export type Maybe<T> = T | null;
export type InputMaybe<T> = Maybe<T>;
export type Exact<T extends { [key: string]: unknown }> = { [K in keyof T]: T[K] };
export type MakeOptional<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]?: Maybe<T[SubKey]> };
export type MakeMaybe<T, K extends keyof T> = Omit<T, K> & { [SubKey in K]: Maybe<T[SubKey]> };
export type MakeEmpty<T extends { [key: string]: unknown }, K extends keyof T> = { [_ in K]?: never };
export type Incremental<T> = T | { [P in keyof T]?: P extends ' $fragmentName' | '__typename' ? T[P] : never };
/** All built-in and custom scalars, mapped to their actual values */
export type Scalars = {
  ID: { input: string; output: string; }
  String: { input: string; output: string; }
  Boolean: { input: boolean; output: boolean; }
  Int: { input: number; output: number; }
  Float: { input: number; output: number; }
  DateTimeISO: { input: any; output: any; }
  JSON: { input: any; output: any; }
};

export type AcessHistoryUser = {
  __typename?: 'AcessHistoryUser';
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type AcessHistoryUserAvgAggregate = {
  __typename?: 'AcessHistoryUserAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type AcessHistoryUserAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type AcessHistoryUserCountAggregate = {
  __typename?: 'AcessHistoryUserCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type AcessHistoryUserCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type AcessHistoryUserCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type AcessHistoryUserCreateManyUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type AcessHistoryUserCreateManyUserInputEnvelope = {
  data: Array<AcessHistoryUserCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type AcessHistoryUserCreateOrConnectWithoutUserInput = {
  create: AcessHistoryUserUncheckedCreateWithoutUserInput;
  where: AcessHistoryUserWhereUniqueInput;
};

export type AcessHistoryUserCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type AcessHistoryUserGroupBy = {
  __typename?: 'AcessHistoryUserGroupBy';
  _avg?: Maybe<AcessHistoryUserAvgAggregate>;
  _count?: Maybe<AcessHistoryUserCountAggregate>;
  _max?: Maybe<AcessHistoryUserMaxAggregate>;
  _min?: Maybe<AcessHistoryUserMinAggregate>;
  _sum?: Maybe<AcessHistoryUserSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type AcessHistoryUserListRelationFilter = {
  every?: InputMaybe<AcessHistoryUserWhereInput>;
  none?: InputMaybe<AcessHistoryUserWhereInput>;
  some?: InputMaybe<AcessHistoryUserWhereInput>;
};

export type AcessHistoryUserMaxAggregate = {
  __typename?: 'AcessHistoryUserMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type AcessHistoryUserMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type AcessHistoryUserMinAggregate = {
  __typename?: 'AcessHistoryUserMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type AcessHistoryUserMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type AcessHistoryUserOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type AcessHistoryUserOrderByWithAggregationInput = {
  _avg?: InputMaybe<AcessHistoryUserAvgOrderByAggregateInput>;
  _count?: InputMaybe<AcessHistoryUserCountOrderByAggregateInput>;
  _max?: InputMaybe<AcessHistoryUserMaxOrderByAggregateInput>;
  _min?: InputMaybe<AcessHistoryUserMinOrderByAggregateInput>;
  _sum?: InputMaybe<AcessHistoryUserSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type AcessHistoryUserOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum AcessHistoryUserScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid'
}

export type AcessHistoryUserScalarWhereInput = {
  AND?: InputMaybe<Array<AcessHistoryUserScalarWhereInput>>;
  NOT?: InputMaybe<Array<AcessHistoryUserScalarWhereInput>>;
  OR?: InputMaybe<Array<AcessHistoryUserScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type AcessHistoryUserScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<AcessHistoryUserScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<AcessHistoryUserScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<AcessHistoryUserScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type AcessHistoryUserSumAggregate = {
  __typename?: 'AcessHistoryUserSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type AcessHistoryUserSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type AcessHistoryUserUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<AcessHistoryUserCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<AcessHistoryUserCreateWithoutUserInput>>;
  createMany?: InputMaybe<AcessHistoryUserCreateManyUserInputEnvelope>;
};

export type AcessHistoryUserUncheckedCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type AcessHistoryUserUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type AcessHistoryUserUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type AcessHistoryUserUncheckedUpdateManyWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type AcessHistoryUserUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<AcessHistoryUserCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<AcessHistoryUserCreateWithoutUserInput>>;
  createMany?: InputMaybe<AcessHistoryUserCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<AcessHistoryUserScalarWhereInput>>;
  disconnect?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  set?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  update?: InputMaybe<Array<AcessHistoryUserUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<AcessHistoryUserUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<AcessHistoryUserUpsertWithWhereUniqueWithoutUserInput>>;
};

export type AcessHistoryUserUncheckedUpdateWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type AcessHistoryUserUpdateManyWithWhereWithoutUserInput = {
  data: AcessHistoryUserUncheckedUpdateManyWithoutUserInput;
  where: AcessHistoryUserScalarWhereInput;
};

export type AcessHistoryUserUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<AcessHistoryUserCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<AcessHistoryUserCreateWithoutUserInput>>;
  createMany?: InputMaybe<AcessHistoryUserCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<AcessHistoryUserScalarWhereInput>>;
  disconnect?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  set?: InputMaybe<Array<AcessHistoryUserWhereUniqueInput>>;
  update?: InputMaybe<Array<AcessHistoryUserUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<AcessHistoryUserUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<AcessHistoryUserUpsertWithWhereUniqueWithoutUserInput>>;
};

export type AcessHistoryUserUpdateWithWhereUniqueWithoutUserInput = {
  data: AcessHistoryUserUncheckedUpdateWithoutUserInput;
  where: AcessHistoryUserWhereUniqueInput;
};

export type AcessHistoryUserUpsertWithWhereUniqueWithoutUserInput = {
  create: AcessHistoryUserUncheckedCreateWithoutUserInput;
  update: AcessHistoryUserUncheckedUpdateWithoutUserInput;
  where: AcessHistoryUserWhereUniqueInput;
};

export type AcessHistoryUserWhereInput = {
  AND?: InputMaybe<Array<AcessHistoryUserWhereInput>>;
  NOT?: InputMaybe<Array<AcessHistoryUserWhereInput>>;
  OR?: InputMaybe<Array<AcessHistoryUserWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type AcessHistoryUserWhereUniqueInput = {
  AND?: InputMaybe<Array<AcessHistoryUserWhereInput>>;
  NOT?: InputMaybe<Array<AcessHistoryUserWhereInput>>;
  OR?: InputMaybe<Array<AcessHistoryUserWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type AffectedRowsOutput = {
  __typename?: 'AffectedRowsOutput';
  count: Scalars['Int']['output'];
};

export type AggregateAcessHistoryUser = {
  __typename?: 'AggregateAcessHistoryUser';
  _avg?: Maybe<AcessHistoryUserAvgAggregate>;
  _count?: Maybe<AcessHistoryUserCountAggregate>;
  _max?: Maybe<AcessHistoryUserMaxAggregate>;
  _min?: Maybe<AcessHistoryUserMinAggregate>;
  _sum?: Maybe<AcessHistoryUserSumAggregate>;
};

export type AggregateArchives = {
  __typename?: 'AggregateArchives';
  _avg?: Maybe<ArchivesAvgAggregate>;
  _count?: Maybe<ArchivesCountAggregate>;
  _max?: Maybe<ArchivesMaxAggregate>;
  _min?: Maybe<ArchivesMinAggregate>;
  _sum?: Maybe<ArchivesSumAggregate>;
};

export type AggregateBoard = {
  __typename?: 'AggregateBoard';
  _count?: Maybe<BoardCountAggregate>;
  _max?: Maybe<BoardMaxAggregate>;
  _min?: Maybe<BoardMinAggregate>;
};

export type AggregateBoardMenbership = {
  __typename?: 'AggregateBoardMenbership';
  _avg?: Maybe<BoardMenbershipAvgAggregate>;
  _count?: Maybe<BoardMenbershipCountAggregate>;
  _max?: Maybe<BoardMenbershipMaxAggregate>;
  _min?: Maybe<BoardMenbershipMinAggregate>;
  _sum?: Maybe<BoardMenbershipSumAggregate>;
};

export type AggregateCard = {
  __typename?: 'AggregateCard';
  _avg?: Maybe<CardAvgAggregate>;
  _count?: Maybe<CardCountAggregate>;
  _max?: Maybe<CardMaxAggregate>;
  _min?: Maybe<CardMinAggregate>;
  _sum?: Maybe<CardSumAggregate>;
};

export type AggregateCardAssignment = {
  __typename?: 'AggregateCardAssignment';
  _avg?: Maybe<CardAssignmentAvgAggregate>;
  _count?: Maybe<CardAssignmentCountAggregate>;
  _max?: Maybe<CardAssignmentMaxAggregate>;
  _min?: Maybe<CardAssignmentMinAggregate>;
  _sum?: Maybe<CardAssignmentSumAggregate>;
};

export type AggregateCardComment = {
  __typename?: 'AggregateCardComment';
  _avg?: Maybe<CardCommentAvgAggregate>;
  _count?: Maybe<CardCommentCountAggregate>;
  _max?: Maybe<CardCommentMaxAggregate>;
  _min?: Maybe<CardCommentMinAggregate>;
  _sum?: Maybe<CardCommentSumAggregate>;
};

export type AggregateCardMovement = {
  __typename?: 'AggregateCardMovement';
  _avg?: Maybe<CardMovementAvgAggregate>;
  _count?: Maybe<CardMovementCountAggregate>;
  _max?: Maybe<CardMovementMaxAggregate>;
  _min?: Maybe<CardMovementMinAggregate>;
  _sum?: Maybe<CardMovementSumAggregate>;
};

export type AggregateCardTags = {
  __typename?: 'AggregateCardTags';
  _avg?: Maybe<CardTagsAvgAggregate>;
  _count?: Maybe<CardTagsCountAggregate>;
  _max?: Maybe<CardTagsMaxAggregate>;
  _min?: Maybe<CardTagsMinAggregate>;
  _sum?: Maybe<CardTagsSumAggregate>;
};

export type AggregateClient = {
  __typename?: 'AggregateClient';
  _avg?: Maybe<ClientAvgAggregate>;
  _count?: Maybe<ClientCountAggregate>;
  _max?: Maybe<ClientMaxAggregate>;
  _min?: Maybe<ClientMinAggregate>;
  _sum?: Maybe<ClientSumAggregate>;
};

export type AggregateColumn = {
  __typename?: 'AggregateColumn';
  _avg?: Maybe<ColumnAvgAggregate>;
  _count?: Maybe<ColumnCountAggregate>;
  _max?: Maybe<ColumnMaxAggregate>;
  _min?: Maybe<ColumnMinAggregate>;
  _sum?: Maybe<ColumnSumAggregate>;
};

export type AggregateCommentProject = {
  __typename?: 'AggregateCommentProject';
  _avg?: Maybe<CommentProjectAvgAggregate>;
  _count?: Maybe<CommentProjectCountAggregate>;
  _max?: Maybe<CommentProjectMaxAggregate>;
  _min?: Maybe<CommentProjectMinAggregate>;
  _sum?: Maybe<CommentProjectSumAggregate>;
};

export type AggregateCsat = {
  __typename?: 'AggregateCsat';
  _avg?: Maybe<CsatAvgAggregate>;
  _count?: Maybe<CsatCountAggregate>;
  _max?: Maybe<CsatMaxAggregate>;
  _min?: Maybe<CsatMinAggregate>;
  _sum?: Maybe<CsatSumAggregate>;
};

export type AggregateField = {
  __typename?: 'AggregateField';
  _avg?: Maybe<FieldAvgAggregate>;
  _count?: Maybe<FieldCountAggregate>;
  _max?: Maybe<FieldMaxAggregate>;
  _min?: Maybe<FieldMinAggregate>;
  _sum?: Maybe<FieldSumAggregate>;
};

export type AggregateFieldColumn = {
  __typename?: 'AggregateFieldColumn';
  _avg?: Maybe<FieldColumnAvgAggregate>;
  _count?: Maybe<FieldColumnCountAggregate>;
  _max?: Maybe<FieldColumnMaxAggregate>;
  _min?: Maybe<FieldColumnMinAggregate>;
  _sum?: Maybe<FieldColumnSumAggregate>;
};

export type AggregateFieldsValue = {
  __typename?: 'AggregateFieldsValue';
  _avg?: Maybe<FieldsValueAvgAggregate>;
  _count?: Maybe<FieldsValueCountAggregate>;
  _max?: Maybe<FieldsValueMaxAggregate>;
  _min?: Maybe<FieldsValueMinAggregate>;
  _sum?: Maybe<FieldsValueSumAggregate>;
};

export type AggregateGroup = {
  __typename?: 'AggregateGroup';
  _avg?: Maybe<GroupAvgAggregate>;
  _count?: Maybe<GroupCountAggregate>;
  _max?: Maybe<GroupMaxAggregate>;
  _min?: Maybe<GroupMinAggregate>;
  _sum?: Maybe<GroupSumAggregate>;
};

export type AggregateGroupMenbership = {
  __typename?: 'AggregateGroupMenbership';
  _avg?: Maybe<GroupMenbershipAvgAggregate>;
  _count?: Maybe<GroupMenbershipCountAggregate>;
  _max?: Maybe<GroupMenbershipMaxAggregate>;
  _min?: Maybe<GroupMenbershipMinAggregate>;
  _sum?: Maybe<GroupMenbershipSumAggregate>;
};

export type AggregateGroupUser = {
  __typename?: 'AggregateGroupUser';
  _avg?: Maybe<GroupUserAvgAggregate>;
  _count?: Maybe<GroupUserCountAggregate>;
  _max?: Maybe<GroupUserMaxAggregate>;
  _min?: Maybe<GroupUserMinAggregate>;
  _sum?: Maybe<GroupUserSumAggregate>;
};

export type AggregateHistoryFlag = {
  __typename?: 'AggregateHistoryFlag';
  _avg?: Maybe<HistoryFlagAvgAggregate>;
  _count?: Maybe<HistoryFlagCountAggregate>;
  _max?: Maybe<HistoryFlagMaxAggregate>;
  _min?: Maybe<HistoryFlagMinAggregate>;
  _sum?: Maybe<HistoryFlagSumAggregate>;
};

export type AggregateHistoryMonthlyRecurringRevenue = {
  __typename?: 'AggregateHistoryMonthlyRecurringRevenue';
  _avg?: Maybe<HistoryMonthlyRecurringRevenueAvgAggregate>;
  _count?: Maybe<HistoryMonthlyRecurringRevenueCountAggregate>;
  _max?: Maybe<HistoryMonthlyRecurringRevenueMaxAggregate>;
  _min?: Maybe<HistoryMonthlyRecurringRevenueMinAggregate>;
  _sum?: Maybe<HistoryMonthlyRecurringRevenueSumAggregate>;
};

export type AggregateHistoryStep = {
  __typename?: 'AggregateHistoryStep';
  _avg?: Maybe<HistoryStepAvgAggregate>;
  _count?: Maybe<HistoryStepCountAggregate>;
  _max?: Maybe<HistoryStepMaxAggregate>;
  _min?: Maybe<HistoryStepMinAggregate>;
  _sum?: Maybe<HistoryStepSumAggregate>;
};

export type AggregateInvest = {
  __typename?: 'AggregateInvest';
  _avg?: Maybe<InvestAvgAggregate>;
  _count?: Maybe<InvestCountAggregate>;
  _max?: Maybe<InvestMaxAggregate>;
  _min?: Maybe<InvestMinAggregate>;
  _sum?: Maybe<InvestSumAggregate>;
};

export type AggregateJobFunction = {
  __typename?: 'AggregateJobFunction';
  _avg?: Maybe<JobFunctionAvgAggregate>;
  _count?: Maybe<JobFunctionCountAggregate>;
  _max?: Maybe<JobFunctionMaxAggregate>;
  _min?: Maybe<JobFunctionMinAggregate>;
  _sum?: Maybe<JobFunctionSumAggregate>;
};

export type AggregateKr = {
  __typename?: 'AggregateKr';
  _avg?: Maybe<KrAvgAggregate>;
  _count?: Maybe<KrCountAggregate>;
  _max?: Maybe<KrMaxAggregate>;
  _min?: Maybe<KrMinAggregate>;
  _sum?: Maybe<KrSumAggregate>;
};

export type AggregateKrCommentProject = {
  __typename?: 'AggregateKrCommentProject';
  _avg?: Maybe<KrCommentProjectAvgAggregate>;
  _count?: Maybe<KrCommentProjectCountAggregate>;
  _max?: Maybe<KrCommentProjectMaxAggregate>;
  _min?: Maybe<KrCommentProjectMinAggregate>;
  _sum?: Maybe<KrCommentProjectSumAggregate>;
};

export type AggregateNotfy = {
  __typename?: 'AggregateNotfy';
  _avg?: Maybe<NotfyAvgAggregate>;
  _count?: Maybe<NotfyCountAggregate>;
  _max?: Maybe<NotfyMaxAggregate>;
  _min?: Maybe<NotfyMinAggregate>;
  _sum?: Maybe<NotfySumAggregate>;
};

export type AggregateObjective = {
  __typename?: 'AggregateObjective';
  _avg?: Maybe<ObjectiveAvgAggregate>;
  _count?: Maybe<ObjectiveCountAggregate>;
  _max?: Maybe<ObjectiveMaxAggregate>;
  _min?: Maybe<ObjectiveMinAggregate>;
  _sum?: Maybe<ObjectiveSumAggregate>;
};

export type AggregateOkrObjectiveProject = {
  __typename?: 'AggregateOkrObjectiveProject';
  _avg?: Maybe<OkrObjectiveProjectAvgAggregate>;
  _count?: Maybe<OkrObjectiveProjectCountAggregate>;
  _max?: Maybe<OkrObjectiveProjectMaxAggregate>;
  _min?: Maybe<OkrObjectiveProjectMinAggregate>;
  _sum?: Maybe<OkrObjectiveProjectSumAggregate>;
};

export type AggregateOkrProject = {
  __typename?: 'AggregateOkrProject';
  _avg?: Maybe<OkrProjectAvgAggregate>;
  _count?: Maybe<OkrProjectCountAggregate>;
  _max?: Maybe<OkrProjectMaxAggregate>;
  _min?: Maybe<OkrProjectMinAggregate>;
  _sum?: Maybe<OkrProjectSumAggregate>;
};

export type AggregateOkrProjectHistory = {
  __typename?: 'AggregateOkrProjectHistory';
  _avg?: Maybe<OkrProjectHistoryAvgAggregate>;
  _count?: Maybe<OkrProjectHistoryCountAggregate>;
  _max?: Maybe<OkrProjectHistoryMaxAggregate>;
  _min?: Maybe<OkrProjectHistoryMinAggregate>;
  _sum?: Maybe<OkrProjectHistorySumAggregate>;
};

export type AggregateOrganization = {
  __typename?: 'AggregateOrganization';
  _avg?: Maybe<OrganizationAvgAggregate>;
  _count?: Maybe<OrganizationCountAggregate>;
  _max?: Maybe<OrganizationMaxAggregate>;
  _min?: Maybe<OrganizationMinAggregate>;
  _sum?: Maybe<OrganizationSumAggregate>;
};

export type AggregatePermission = {
  __typename?: 'AggregatePermission';
  _avg?: Maybe<PermissionAvgAggregate>;
  _count?: Maybe<PermissionCountAggregate>;
  _max?: Maybe<PermissionMaxAggregate>;
  _min?: Maybe<PermissionMinAggregate>;
  _sum?: Maybe<PermissionSumAggregate>;
};

export type AggregatePipefyProject = {
  __typename?: 'AggregatePipefyProject';
  _avg?: Maybe<PipefyProjectAvgAggregate>;
  _count?: Maybe<PipefyProjectCountAggregate>;
  _max?: Maybe<PipefyProjectMaxAggregate>;
  _min?: Maybe<PipefyProjectMinAggregate>;
  _sum?: Maybe<PipefyProjectSumAggregate>;
};

export type AggregatePrimitiveFields = {
  __typename?: 'AggregatePrimitiveFields';
  _avg?: Maybe<PrimitiveFieldsAvgAggregate>;
  _count?: Maybe<PrimitiveFieldsCountAggregate>;
  _max?: Maybe<PrimitiveFieldsMaxAggregate>;
  _min?: Maybe<PrimitiveFieldsMinAggregate>;
  _sum?: Maybe<PrimitiveFieldsSumAggregate>;
};

export type AggregatePrimitiveStreenght = {
  __typename?: 'AggregatePrimitiveStreenght';
  _avg?: Maybe<PrimitiveStreenghtAvgAggregate>;
  _count?: Maybe<PrimitiveStreenghtCountAggregate>;
  _max?: Maybe<PrimitiveStreenghtMaxAggregate>;
  _min?: Maybe<PrimitiveStreenghtMinAggregate>;
  _sum?: Maybe<PrimitiveStreenghtSumAggregate>;
};

export type AggregateProject = {
  __typename?: 'AggregateProject';
  _avg?: Maybe<ProjectAvgAggregate>;
  _count?: Maybe<ProjectCountAggregate>;
  _max?: Maybe<ProjectMaxAggregate>;
  _min?: Maybe<ProjectMinAggregate>;
  _sum?: Maybe<ProjectSumAggregate>;
};

export type AggregateProjectManager = {
  __typename?: 'AggregateProjectManager';
  _avg?: Maybe<ProjectManagerAvgAggregate>;
  _count?: Maybe<ProjectManagerCountAggregate>;
  _max?: Maybe<ProjectManagerMaxAggregate>;
  _min?: Maybe<ProjectManagerMinAggregate>;
  _sum?: Maybe<ProjectManagerSumAggregate>;
};

export type AggregateProjectsBoards = {
  __typename?: 'AggregateProjectsBoards';
  _avg?: Maybe<ProjectsBoardsAvgAggregate>;
  _count?: Maybe<ProjectsBoardsCountAggregate>;
  _max?: Maybe<ProjectsBoardsMaxAggregate>;
  _min?: Maybe<ProjectsBoardsMinAggregate>;
  _sum?: Maybe<ProjectsBoardsSumAggregate>;
};

export type AggregateQnp = {
  __typename?: 'AggregateQnp';
  _avg?: Maybe<QnpAvgAggregate>;
  _count?: Maybe<QnpCountAggregate>;
  _max?: Maybe<QnpMaxAggregate>;
  _min?: Maybe<QnpMinAggregate>;
  _sum?: Maybe<QnpSumAggregate>;
};

export type AggregateReceivedClient = {
  __typename?: 'AggregateReceivedClient';
  _avg?: Maybe<ReceivedClientAvgAggregate>;
  _count?: Maybe<ReceivedClientCountAggregate>;
  _max?: Maybe<ReceivedClientMaxAggregate>;
  _min?: Maybe<ReceivedClientMinAggregate>;
  _sum?: Maybe<ReceivedClientSumAggregate>;
};

export type AggregateSelfStructure = {
  __typename?: 'AggregateSelfStructure';
  _avg?: Maybe<SelfStructureAvgAggregate>;
  _count?: Maybe<SelfStructureCountAggregate>;
  _max?: Maybe<SelfStructureMaxAggregate>;
  _min?: Maybe<SelfStructureMinAggregate>;
  _sum?: Maybe<SelfStructureSumAggregate>;
};

export type AggregateServiceLevelAgreement = {
  __typename?: 'AggregateServiceLevelAgreement';
  _avg?: Maybe<ServiceLevelAgreementAvgAggregate>;
  _count?: Maybe<ServiceLevelAgreementCountAggregate>;
  _max?: Maybe<ServiceLevelAgreementMaxAggregate>;
  _min?: Maybe<ServiceLevelAgreementMinAggregate>;
  _sum?: Maybe<ServiceLevelAgreementSumAggregate>;
};

export type AggregateStep = {
  __typename?: 'AggregateStep';
  _avg?: Maybe<StepAvgAggregate>;
  _count?: Maybe<StepCountAggregate>;
  _max?: Maybe<StepMaxAggregate>;
  _min?: Maybe<StepMinAggregate>;
  _sum?: Maybe<StepSumAggregate>;
};

export type AggregateTag = {
  __typename?: 'AggregateTag';
  _avg?: Maybe<TagAvgAggregate>;
  _count?: Maybe<TagCountAggregate>;
  _max?: Maybe<TagMaxAggregate>;
  _min?: Maybe<TagMinAggregate>;
  _sum?: Maybe<TagSumAggregate>;
};

export type AggregateTask = {
  __typename?: 'AggregateTask';
  _avg?: Maybe<TaskAvgAggregate>;
  _count?: Maybe<TaskCountAggregate>;
  _max?: Maybe<TaskMaxAggregate>;
  _min?: Maybe<TaskMinAggregate>;
  _sum?: Maybe<TaskSumAggregate>;
};

export type AggregateTeam = {
  __typename?: 'AggregateTeam';
  _avg?: Maybe<TeamAvgAggregate>;
  _count?: Maybe<TeamCountAggregate>;
  _max?: Maybe<TeamMaxAggregate>;
  _min?: Maybe<TeamMinAggregate>;
  _sum?: Maybe<TeamSumAggregate>;
};

export type AggregateThrowErrorFront = {
  __typename?: 'AggregateThrowErrorFront';
  _avg?: Maybe<ThrowErrorFrontAvgAggregate>;
  _count?: Maybe<ThrowErrorFrontCountAggregate>;
  _max?: Maybe<ThrowErrorFrontMaxAggregate>;
  _min?: Maybe<ThrowErrorFrontMinAggregate>;
  _sum?: Maybe<ThrowErrorFrontSumAggregate>;
};

export type AggregateTokenFirebase = {
  __typename?: 'AggregateTokenFirebase';
  _avg?: Maybe<TokenFirebaseAvgAggregate>;
  _count?: Maybe<TokenFirebaseCountAggregate>;
  _max?: Maybe<TokenFirebaseMaxAggregate>;
  _min?: Maybe<TokenFirebaseMinAggregate>;
  _sum?: Maybe<TokenFirebaseSumAggregate>;
};

export type AggregateUser = {
  __typename?: 'AggregateUser';
  _count?: Maybe<UserCountAggregate>;
  _max?: Maybe<UserMaxAggregate>;
  _min?: Maybe<UserMinAggregate>;
};

export type AggregateUserJobFunction = {
  __typename?: 'AggregateUserJobFunction';
  _avg?: Maybe<UserJobFunctionAvgAggregate>;
  _count?: Maybe<UserJobFunctionCountAggregate>;
  _max?: Maybe<UserJobFunctionMaxAggregate>;
  _min?: Maybe<UserJobFunctionMinAggregate>;
  _sum?: Maybe<UserJobFunctionSumAggregate>;
};

export type AggregateUserNotfy = {
  __typename?: 'AggregateUserNotfy';
  _avg?: Maybe<UserNotfyAvgAggregate>;
  _count?: Maybe<UserNotfyCountAggregate>;
  _max?: Maybe<UserNotfyMaxAggregate>;
  _min?: Maybe<UserNotfyMinAggregate>;
  _sum?: Maybe<UserNotfySumAggregate>;
};

export type AggregateUserOrganization = {
  __typename?: 'AggregateUserOrganization';
  _avg?: Maybe<UserOrganizationAvgAggregate>;
  _count?: Maybe<UserOrganizationCountAggregate>;
  _max?: Maybe<UserOrganizationMaxAggregate>;
  _min?: Maybe<UserOrganizationMinAggregate>;
  _sum?: Maybe<UserOrganizationSumAggregate>;
};

export type AggregateUserStep = {
  __typename?: 'AggregateUserStep';
  _avg?: Maybe<UserStepAvgAggregate>;
  _count?: Maybe<UserStepCountAggregate>;
  _max?: Maybe<UserStepMaxAggregate>;
  _min?: Maybe<UserStepMinAggregate>;
  _sum?: Maybe<UserStepSumAggregate>;
};

export type AggregateUserTeam = {
  __typename?: 'AggregateUserTeam';
  _avg?: Maybe<UserTeamAvgAggregate>;
  _count?: Maybe<UserTeamCountAggregate>;
  _max?: Maybe<UserTeamMaxAggregate>;
  _min?: Maybe<UserTeamMinAggregate>;
  _sum?: Maybe<UserTeamSumAggregate>;
};

export type AggregateViewedCommentProject = {
  __typename?: 'AggregateViewedCommentProject';
  _avg?: Maybe<ViewedCommentProjectAvgAggregate>;
  _count?: Maybe<ViewedCommentProjectCountAggregate>;
  _max?: Maybe<ViewedCommentProjectMaxAggregate>;
  _min?: Maybe<ViewedCommentProjectMinAggregate>;
  _sum?: Maybe<ViewedCommentProjectSumAggregate>;
};

export type Archives = {
  __typename?: 'Archives';
  cash: Scalars['Float']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  mimeType: Scalars['String']['output'];
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
  project: Project;
  projectId: Scalars['Int']['output'];
  size: Scalars['String']['output'];
  typeFile: TypeFile;
  updatedAt: Scalars['DateTimeISO']['output'];
  user?: Maybe<User>;
};


export type ArchivesUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type ArchivesAvgAggregate = {
  __typename?: 'ArchivesAvgAggregate';
  cash?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type ArchivesAvgOrderByAggregateInput = {
  cash?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type ArchivesCountAggregate = {
  __typename?: 'ArchivesCountAggregate';
  _all: Scalars['Int']['output'];
  cash: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  mimeType: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  path: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  size: Scalars['Int']['output'];
  typeFile: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type ArchivesCountOrderByAggregateInput = {
  cash?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  mimeType?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  path?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  size?: InputMaybe<SortOrder>;
  typeFile?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type ArchivesCreateManyInput = {
  cash?: InputMaybe<Scalars['Float']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  path: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
  size?: InputMaybe<Scalars['String']['input']>;
  typeFile: TypeFile;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ArchivesCreateManyProjectInput = {
  cash?: InputMaybe<Scalars['Float']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  path: Scalars['String']['input'];
  size?: InputMaybe<Scalars['String']['input']>;
  typeFile: TypeFile;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ArchivesCreateManyProjectInputEnvelope = {
  data: Array<ArchivesCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ArchivesCreateManyUserInput = {
  cash?: InputMaybe<Scalars['Float']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  path: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
  size?: InputMaybe<Scalars['String']['input']>;
  typeFile: TypeFile;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ArchivesCreateManyUserInputEnvelope = {
  data: Array<ArchivesCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ArchivesCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ArchivesCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ArchivesCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ArchivesCreateManyProjectInputEnvelope>;
};

export type ArchivesCreateOrConnectWithoutProjectInput = {
  create: ArchivesUncheckedCreateWithoutProjectInput;
  where: ArchivesWhereUniqueInput;
};

export type ArchivesCreateOrConnectWithoutUserInput = {
  create: ArchivesUncheckedCreateWithoutUserInput;
  where: ArchivesWhereUniqueInput;
};

export type ArchivesCreateWithoutProjectInput = {
  cash?: InputMaybe<Scalars['Float']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  path: Scalars['String']['input'];
  size?: InputMaybe<Scalars['String']['input']>;
  typeFile: TypeFile;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user?: InputMaybe<UserCreateNestedOneWithoutArchivesInput>;
};

export type ArchivesCreateWithoutUserInput = {
  cash?: InputMaybe<Scalars['Float']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  path: Scalars['String']['input'];
  project: ProjectCreateNestedOneWithoutArchivesInput;
  size?: InputMaybe<Scalars['String']['input']>;
  typeFile: TypeFile;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ArchivesGroupBy = {
  __typename?: 'ArchivesGroupBy';
  _avg?: Maybe<ArchivesAvgAggregate>;
  _count?: Maybe<ArchivesCountAggregate>;
  _max?: Maybe<ArchivesMaxAggregate>;
  _min?: Maybe<ArchivesMinAggregate>;
  _sum?: Maybe<ArchivesSumAggregate>;
  cash: Scalars['Float']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  mimeType: Scalars['String']['output'];
  name: Scalars['String']['output'];
  path: Scalars['String']['output'];
  projectId: Scalars['Int']['output'];
  size: Scalars['String']['output'];
  typeFile: TypeFile;
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type ArchivesListRelationFilter = {
  every?: InputMaybe<ArchivesWhereInput>;
  none?: InputMaybe<ArchivesWhereInput>;
  some?: InputMaybe<ArchivesWhereInput>;
};

export type ArchivesMaxAggregate = {
  __typename?: 'ArchivesMaxAggregate';
  cash?: Maybe<Scalars['Float']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mimeType?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  size?: Maybe<Scalars['String']['output']>;
  typeFile?: Maybe<TypeFile>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type ArchivesMaxOrderByAggregateInput = {
  cash?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  mimeType?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  path?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  size?: InputMaybe<SortOrder>;
  typeFile?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type ArchivesMinAggregate = {
  __typename?: 'ArchivesMinAggregate';
  cash?: Maybe<Scalars['Float']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  mimeType?: Maybe<Scalars['String']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  path?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  size?: Maybe<Scalars['String']['output']>;
  typeFile?: Maybe<TypeFile>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type ArchivesMinOrderByAggregateInput = {
  cash?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  mimeType?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  path?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  size?: InputMaybe<SortOrder>;
  typeFile?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type ArchivesOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ArchivesOrderByWithAggregationInput = {
  _avg?: InputMaybe<ArchivesAvgOrderByAggregateInput>;
  _count?: InputMaybe<ArchivesCountOrderByAggregateInput>;
  _max?: InputMaybe<ArchivesMaxOrderByAggregateInput>;
  _min?: InputMaybe<ArchivesMinOrderByAggregateInput>;
  _sum?: InputMaybe<ArchivesSumOrderByAggregateInput>;
  cash?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  mimeType?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  path?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  size?: InputMaybe<SortOrder>;
  typeFile?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type ArchivesOrderByWithRelationInput = {
  cash?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  mimeType?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  path?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
  size?: InputMaybe<SortOrder>;
  typeFile?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export enum ArchivesScalarFieldEnum {
  Cash = 'cash',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Description = 'description',
  Id = 'id',
  MimeType = 'mimeType',
  Name = 'name',
  Path = 'path',
  ProjectId = 'projectId',
  Size = 'size',
  TypeFile = 'typeFile',
  UpdatedAt = 'updatedAt'
}

export type ArchivesScalarWhereInput = {
  AND?: InputMaybe<Array<ArchivesScalarWhereInput>>;
  NOT?: InputMaybe<Array<ArchivesScalarWhereInput>>;
  OR?: InputMaybe<Array<ArchivesScalarWhereInput>>;
  cash?: InputMaybe<FloatFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IntFilter>;
  mimeType?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  path?: InputMaybe<StringFilter>;
  projectId?: InputMaybe<IntFilter>;
  size?: InputMaybe<StringFilter>;
  typeFile?: InputMaybe<EnumtypeFileFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type ArchivesScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ArchivesScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ArchivesScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ArchivesScalarWhereWithAggregatesInput>>;
  cash?: InputMaybe<FloatWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  description?: InputMaybe<StringWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  mimeType?: InputMaybe<StringWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  path?: InputMaybe<StringWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
  size?: InputMaybe<StringWithAggregatesFilter>;
  typeFile?: InputMaybe<EnumtypeFileWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type ArchivesSumAggregate = {
  __typename?: 'ArchivesSumAggregate';
  cash?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type ArchivesSumOrderByAggregateInput = {
  cash?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type ArchivesUncheckedCreateInput = {
  cash?: InputMaybe<Scalars['Float']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  path: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
  size?: InputMaybe<Scalars['String']['input']>;
  typeFile: TypeFile;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ArchivesUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ArchivesCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ArchivesCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ArchivesCreateManyProjectInputEnvelope>;
};

export type ArchivesUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ArchivesCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ArchivesCreateWithoutUserInput>>;
  createMany?: InputMaybe<ArchivesCreateManyUserInputEnvelope>;
};

export type ArchivesUncheckedCreateWithoutProjectInput = {
  cash?: InputMaybe<Scalars['Float']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  path: Scalars['String']['input'];
  size?: InputMaybe<Scalars['String']['input']>;
  typeFile: TypeFile;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ArchivesUncheckedCreateWithoutUserInput = {
  cash?: InputMaybe<Scalars['Float']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  mimeType?: InputMaybe<Scalars['String']['input']>;
  name: Scalars['String']['input'];
  path: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
  size?: InputMaybe<Scalars['String']['input']>;
  typeFile: TypeFile;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ArchivesUncheckedUpdateInput = {
  cash?: InputMaybe<FloatFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  mimeType?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  path?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  size?: InputMaybe<StringFieldUpdateOperationsInput>;
  typeFile?: InputMaybe<EnumtypeFileFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ArchivesUncheckedUpdateManyInput = {
  cash?: InputMaybe<FloatFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  mimeType?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  path?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  size?: InputMaybe<StringFieldUpdateOperationsInput>;
  typeFile?: InputMaybe<EnumtypeFileFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ArchivesUncheckedUpdateManyWithoutProjectInput = {
  cash?: InputMaybe<FloatFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  mimeType?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  path?: InputMaybe<StringFieldUpdateOperationsInput>;
  size?: InputMaybe<StringFieldUpdateOperationsInput>;
  typeFile?: InputMaybe<EnumtypeFileFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ArchivesUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ArchivesCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ArchivesCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ArchivesCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ArchivesScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  set?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  update?: InputMaybe<Array<ArchivesUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<ArchivesUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<ArchivesUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type ArchivesUncheckedUpdateManyWithoutUserInput = {
  cash?: InputMaybe<FloatFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  mimeType?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  path?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  size?: InputMaybe<StringFieldUpdateOperationsInput>;
  typeFile?: InputMaybe<EnumtypeFileFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ArchivesUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ArchivesCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ArchivesCreateWithoutUserInput>>;
  createMany?: InputMaybe<ArchivesCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ArchivesScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  set?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  update?: InputMaybe<Array<ArchivesUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<ArchivesUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<ArchivesUpsertWithWhereUniqueWithoutUserInput>>;
};

export type ArchivesUncheckedUpdateWithoutProjectInput = {
  cash?: InputMaybe<FloatFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  mimeType?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  path?: InputMaybe<StringFieldUpdateOperationsInput>;
  size?: InputMaybe<StringFieldUpdateOperationsInput>;
  typeFile?: InputMaybe<EnumtypeFileFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ArchivesUncheckedUpdateWithoutUserInput = {
  cash?: InputMaybe<FloatFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  mimeType?: InputMaybe<StringFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  path?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  size?: InputMaybe<StringFieldUpdateOperationsInput>;
  typeFile?: InputMaybe<EnumtypeFileFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ArchivesUpdateManyWithWhereWithoutProjectInput = {
  data: ArchivesUncheckedUpdateManyWithoutProjectInput;
  where: ArchivesScalarWhereInput;
};

export type ArchivesUpdateManyWithWhereWithoutUserInput = {
  data: ArchivesUncheckedUpdateManyWithoutUserInput;
  where: ArchivesScalarWhereInput;
};

export type ArchivesUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ArchivesCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ArchivesCreateWithoutUserInput>>;
  createMany?: InputMaybe<ArchivesCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ArchivesScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  set?: InputMaybe<Array<ArchivesWhereUniqueInput>>;
  update?: InputMaybe<Array<ArchivesUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<ArchivesUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<ArchivesUpsertWithWhereUniqueWithoutUserInput>>;
};

export type ArchivesUpdateWithWhereUniqueWithoutProjectInput = {
  data: ArchivesUncheckedUpdateWithoutProjectInput;
  where: ArchivesWhereUniqueInput;
};

export type ArchivesUpdateWithWhereUniqueWithoutUserInput = {
  data: ArchivesUncheckedUpdateWithoutUserInput;
  where: ArchivesWhereUniqueInput;
};

export type ArchivesUpsertWithWhereUniqueWithoutProjectInput = {
  create: ArchivesUncheckedCreateWithoutProjectInput;
  update: ArchivesUncheckedUpdateWithoutProjectInput;
  where: ArchivesWhereUniqueInput;
};

export type ArchivesUpsertWithWhereUniqueWithoutUserInput = {
  create: ArchivesUncheckedCreateWithoutUserInput;
  update: ArchivesUncheckedUpdateWithoutUserInput;
  where: ArchivesWhereUniqueInput;
};

export type ArchivesWhereInput = {
  AND?: InputMaybe<Array<ArchivesWhereInput>>;
  NOT?: InputMaybe<Array<ArchivesWhereInput>>;
  OR?: InputMaybe<Array<ArchivesWhereInput>>;
  cash?: InputMaybe<FloatFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IntFilter>;
  mimeType?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  path?: InputMaybe<StringFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  size?: InputMaybe<StringFilter>;
  typeFile?: InputMaybe<EnumtypeFileFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type ArchivesWhereUniqueInput = {
  AND?: InputMaybe<Array<ArchivesWhereInput>>;
  NOT?: InputMaybe<Array<ArchivesWhereInput>>;
  OR?: InputMaybe<Array<ArchivesWhereInput>>;
  cash?: InputMaybe<FloatFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  mimeType?: InputMaybe<StringFilter>;
  name?: InputMaybe<StringFilter>;
  path?: InputMaybe<StringFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  size?: InputMaybe<StringFilter>;
  typeFile?: InputMaybe<EnumtypeFileFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type AuthorizedAccess = {
  __typename?: 'AuthorizedAccess';
  board: Board;
  isAuth: Scalars['Boolean']['output'];
};

export type Board = {
  __typename?: 'Board';
  _count?: Maybe<BoardCount>;
  authorizedCustom: AuthorizedAccess;
  boardMenbership: Array<BoardMenbership>;
  category: Array<Scalars['String']['output']>;
  column: Array<Column>;
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdByUser?: Maybe<User>;
  group: Array<Group>;
  groupMenbership: Array<GroupMenbership>;
  id: Scalars['String']['output'];
  isPublic: Scalars['Boolean']['output'];
  projectsBoards: Array<ProjectsBoards>;
  tags: Array<Tag>;
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
  updatedByUser?: Maybe<User>;
};


export type BoardBoardMenbershipArgs = {
  cursor?: InputMaybe<BoardMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type BoardColumnArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<ColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type BoardCreatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type BoardGroupArgs = {
  cursor?: InputMaybe<GroupWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupWhereInput>;
};


export type BoardGroupMenbershipArgs = {
  cursor?: InputMaybe<GroupMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type BoardProjectsBoardsArgs = {
  cursor?: InputMaybe<ProjectsBoardsWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectsBoardsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectsBoardsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type BoardTagsArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  distinct?: InputMaybe<Array<TagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagWhereInput>;
};


export type BoardUpdatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type BoardCount = {
  __typename?: 'BoardCount';
  boardMenbership: Scalars['Int']['output'];
  column: Scalars['Int']['output'];
  group: Scalars['Int']['output'];
  groupMenbership: Scalars['Int']['output'];
  projectsBoards: Scalars['Int']['output'];
  tags: Scalars['Int']['output'];
};


export type BoardCountBoardMenbershipArgs = {
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type BoardCountColumnArgs = {
  where?: InputMaybe<ColumnWhereInput>;
};


export type BoardCountGroupArgs = {
  where?: InputMaybe<GroupWhereInput>;
};


export type BoardCountGroupMenbershipArgs = {
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type BoardCountProjectsBoardsArgs = {
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type BoardCountTagsArgs = {
  where?: InputMaybe<TagWhereInput>;
};

export type BoardCountAggregate = {
  __typename?: 'BoardCountAggregate';
  _all: Scalars['Int']['output'];
  category: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  isPublic: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type BoardCountOrderByAggregateInput = {
  category?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isPublic?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type BoardCreateManyCreatedByUserInput = {
  category?: InputMaybe<BoardCreatecategoryInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardCreateManyCreatedByUserInputEnvelope = {
  data: Array<BoardCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BoardCreateManyInput = {
  category?: InputMaybe<BoardCreatecategoryInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardCreateManyUpdatedByUserInput = {
  category?: InputMaybe<BoardCreatecategoryInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type BoardCreateManyUpdatedByUserInputEnvelope = {
  data: Array<BoardCreateManyUpdatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BoardCreateNestedOneWithoutBoardMenbershipInput = {
  connect?: InputMaybe<BoardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<BoardCreateOrConnectWithoutBoardMenbershipInput>;
  create?: InputMaybe<BoardUncheckedCreateWithoutBoardMenbershipInput>;
};

export type BoardCreateNestedOneWithoutColumnInput = {
  connect?: InputMaybe<BoardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<BoardCreateOrConnectWithoutColumnInput>;
  create?: InputMaybe<BoardUncheckedCreateWithoutColumnInput>;
};

export type BoardCreateNestedOneWithoutGroupInput = {
  connect?: InputMaybe<BoardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<BoardCreateOrConnectWithoutGroupInput>;
  create?: InputMaybe<BoardUncheckedCreateWithoutGroupInput>;
};

export type BoardCreateNestedOneWithoutGroupMenbershipInput = {
  connect?: InputMaybe<BoardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<BoardCreateOrConnectWithoutGroupMenbershipInput>;
  create?: InputMaybe<BoardUncheckedCreateWithoutGroupMenbershipInput>;
};

export type BoardCreateNestedOneWithoutProjectsBoardsInput = {
  connect?: InputMaybe<BoardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<BoardCreateOrConnectWithoutProjectsBoardsInput>;
  create?: InputMaybe<BoardUncheckedCreateWithoutProjectsBoardsInput>;
};

export type BoardCreateOrConnectWithoutBoardMenbershipInput = {
  create: BoardUncheckedCreateWithoutBoardMenbershipInput;
  where: BoardWhereUniqueInput;
};

export type BoardCreateOrConnectWithoutColumnInput = {
  create: BoardUncheckedCreateWithoutColumnInput;
  where: BoardWhereUniqueInput;
};

export type BoardCreateOrConnectWithoutCreatedByUserInput = {
  create: BoardUncheckedCreateWithoutCreatedByUserInput;
  where: BoardWhereUniqueInput;
};

export type BoardCreateOrConnectWithoutGroupInput = {
  create: BoardUncheckedCreateWithoutGroupInput;
  where: BoardWhereUniqueInput;
};

export type BoardCreateOrConnectWithoutGroupMenbershipInput = {
  create: BoardUncheckedCreateWithoutGroupMenbershipInput;
  where: BoardWhereUniqueInput;
};

export type BoardCreateOrConnectWithoutProjectsBoardsInput = {
  create: BoardUncheckedCreateWithoutProjectsBoardsInput;
  where: BoardWhereUniqueInput;
};

export type BoardCreateOrConnectWithoutUpdatedByUserInput = {
  create: BoardUncheckedCreateWithoutUpdatedByUserInput;
  where: BoardWhereUniqueInput;
};

export type BoardCreateWithoutCreatedByUserInput = {
  boardMenbership?: InputMaybe<BoardMenbershipCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  group?: InputMaybe<GroupCreateNestedManyWithoutBoardInput>;
  groupMenbership?: InputMaybe<GroupMenbershipCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutBoardUpdatedByInput>;
};

export type BoardCreateWithoutUpdatedByUserInput = {
  boardMenbership?: InputMaybe<BoardMenbershipCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutBoardCreatedByInput>;
  group?: InputMaybe<GroupCreateNestedManyWithoutBoardInput>;
  groupMenbership?: InputMaybe<GroupMenbershipCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type BoardCreatecategoryInput = {
  set: Array<Scalars['String']['input']>;
};

export type BoardGroupBy = {
  __typename?: 'BoardGroupBy';
  _count?: Maybe<BoardCountAggregate>;
  _max?: Maybe<BoardMaxAggregate>;
  _min?: Maybe<BoardMinAggregate>;
  category?: Maybe<Array<Scalars['String']['output']>>;
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['String']['output'];
  isPublic: Scalars['Boolean']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type BoardListRelationFilter = {
  every?: InputMaybe<BoardWhereInput>;
  none?: InputMaybe<BoardWhereInput>;
  some?: InputMaybe<BoardWhereInput>;
};

export type BoardMaxAggregate = {
  __typename?: 'BoardMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isPublic?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type BoardMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isPublic?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type BoardMenbership = {
  __typename?: 'BoardMenbership';
  board: Board;
  boardId: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type BoardMenbershipAvgAggregate = {
  __typename?: 'BoardMenbershipAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type BoardMenbershipAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type BoardMenbershipCountAggregate = {
  __typename?: 'BoardMenbershipCountAggregate';
  _all: Scalars['Int']['output'];
  boardId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type BoardMenbershipCountOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type BoardMenbershipCreateManyBoardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type BoardMenbershipCreateManyBoardInputEnvelope = {
  data: Array<BoardMenbershipCreateManyBoardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BoardMenbershipCreateManyInput = {
  boardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type BoardMenbershipCreateManyUserInput = {
  boardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type BoardMenbershipCreateManyUserInputEnvelope = {
  data: Array<BoardMenbershipCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BoardMenbershipCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardMenbershipCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<BoardMenbershipCreateWithoutBoardInput>>;
  createMany?: InputMaybe<BoardMenbershipCreateManyBoardInputEnvelope>;
};

export type BoardMenbershipCreateOrConnectWithoutBoardInput = {
  create: BoardMenbershipUncheckedCreateWithoutBoardInput;
  where: BoardMenbershipWhereUniqueInput;
};

export type BoardMenbershipCreateOrConnectWithoutUserInput = {
  create: BoardMenbershipUncheckedCreateWithoutUserInput;
  where: BoardMenbershipWhereUniqueInput;
};

export type BoardMenbershipCreateWithoutBoardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user: UserCreateNestedOneWithoutCoardMenbershipInput;
};

export type BoardMenbershipCreateWithoutUserInput = {
  board: BoardCreateNestedOneWithoutBoardMenbershipInput;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type BoardMenbershipGroupBy = {
  __typename?: 'BoardMenbershipGroupBy';
  _avg?: Maybe<BoardMenbershipAvgAggregate>;
  _count?: Maybe<BoardMenbershipCountAggregate>;
  _max?: Maybe<BoardMenbershipMaxAggregate>;
  _min?: Maybe<BoardMenbershipMinAggregate>;
  _sum?: Maybe<BoardMenbershipSumAggregate>;
  boardId: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type BoardMenbershipListRelationFilter = {
  every?: InputMaybe<BoardMenbershipWhereInput>;
  none?: InputMaybe<BoardMenbershipWhereInput>;
  some?: InputMaybe<BoardMenbershipWhereInput>;
};

export type BoardMenbershipMaxAggregate = {
  __typename?: 'BoardMenbershipMaxAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type BoardMenbershipMaxOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type BoardMenbershipMinAggregate = {
  __typename?: 'BoardMenbershipMinAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type BoardMenbershipMinOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type BoardMenbershipOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type BoardMenbershipOrderByWithAggregationInput = {
  _avg?: InputMaybe<BoardMenbershipAvgOrderByAggregateInput>;
  _count?: InputMaybe<BoardMenbershipCountOrderByAggregateInput>;
  _max?: InputMaybe<BoardMenbershipMaxOrderByAggregateInput>;
  _min?: InputMaybe<BoardMenbershipMinOrderByAggregateInput>;
  _sum?: InputMaybe<BoardMenbershipSumOrderByAggregateInput>;
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type BoardMenbershipOrderByWithRelationInput = {
  board?: InputMaybe<BoardOrderByWithRelationInput>;
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum BoardMenbershipScalarFieldEnum {
  BoardId = 'boardId',
  CreatedAt = 'createdAt',
  Id = 'id',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid'
}

export type BoardMenbershipScalarWhereInput = {
  AND?: InputMaybe<Array<BoardMenbershipScalarWhereInput>>;
  NOT?: InputMaybe<Array<BoardMenbershipScalarWhereInput>>;
  OR?: InputMaybe<Array<BoardMenbershipScalarWhereInput>>;
  boardId?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type BoardMenbershipScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<BoardMenbershipScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<BoardMenbershipScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<BoardMenbershipScalarWhereWithAggregatesInput>>;
  boardId?: InputMaybe<StringWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type BoardMenbershipSumAggregate = {
  __typename?: 'BoardMenbershipSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type BoardMenbershipSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type BoardMenbershipUncheckedCreateInput = {
  boardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type BoardMenbershipUncheckedCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardMenbershipCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<BoardMenbershipCreateWithoutBoardInput>>;
  createMany?: InputMaybe<BoardMenbershipCreateManyBoardInputEnvelope>;
};

export type BoardMenbershipUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardMenbershipCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<BoardMenbershipCreateWithoutUserInput>>;
  createMany?: InputMaybe<BoardMenbershipCreateManyUserInputEnvelope>;
};

export type BoardMenbershipUncheckedCreateWithoutBoardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type BoardMenbershipUncheckedCreateWithoutUserInput = {
  boardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type BoardMenbershipUncheckedUpdateInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type BoardMenbershipUncheckedUpdateManyInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type BoardMenbershipUncheckedUpdateManyWithoutBoardInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type BoardMenbershipUncheckedUpdateManyWithoutBoardNestedInput = {
  connect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardMenbershipCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<BoardMenbershipCreateWithoutBoardInput>>;
  createMany?: InputMaybe<BoardMenbershipCreateManyBoardInputEnvelope>;
  delete?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<BoardMenbershipScalarWhereInput>>;
  disconnect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  set?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  update?: InputMaybe<Array<BoardMenbershipUpdateWithWhereUniqueWithoutBoardInput>>;
  updateMany?: InputMaybe<Array<BoardMenbershipUpdateManyWithWhereWithoutBoardInput>>;
  upsert?: InputMaybe<Array<BoardMenbershipUpsertWithWhereUniqueWithoutBoardInput>>;
};

export type BoardMenbershipUncheckedUpdateManyWithoutUserInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type BoardMenbershipUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardMenbershipCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<BoardMenbershipCreateWithoutUserInput>>;
  createMany?: InputMaybe<BoardMenbershipCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<BoardMenbershipScalarWhereInput>>;
  disconnect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  set?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  update?: InputMaybe<Array<BoardMenbershipUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<BoardMenbershipUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<BoardMenbershipUpsertWithWhereUniqueWithoutUserInput>>;
};

export type BoardMenbershipUncheckedUpdateWithoutBoardInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type BoardMenbershipUncheckedUpdateWithoutUserInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type BoardMenbershipUpdateManyWithWhereWithoutBoardInput = {
  data: BoardMenbershipUncheckedUpdateManyWithoutBoardInput;
  where: BoardMenbershipScalarWhereInput;
};

export type BoardMenbershipUpdateManyWithWhereWithoutUserInput = {
  data: BoardMenbershipUncheckedUpdateManyWithoutUserInput;
  where: BoardMenbershipScalarWhereInput;
};

export type BoardMenbershipUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardMenbershipCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<BoardMenbershipCreateWithoutUserInput>>;
  createMany?: InputMaybe<BoardMenbershipCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<BoardMenbershipScalarWhereInput>>;
  disconnect?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  set?: InputMaybe<Array<BoardMenbershipWhereUniqueInput>>;
  update?: InputMaybe<Array<BoardMenbershipUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<BoardMenbershipUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<BoardMenbershipUpsertWithWhereUniqueWithoutUserInput>>;
};

export type BoardMenbershipUpdateWithWhereUniqueWithoutBoardInput = {
  data: BoardMenbershipUncheckedUpdateWithoutBoardInput;
  where: BoardMenbershipWhereUniqueInput;
};

export type BoardMenbershipUpdateWithWhereUniqueWithoutUserInput = {
  data: BoardMenbershipUncheckedUpdateWithoutUserInput;
  where: BoardMenbershipWhereUniqueInput;
};

export type BoardMenbershipUpsertWithWhereUniqueWithoutBoardInput = {
  create: BoardMenbershipUncheckedCreateWithoutBoardInput;
  update: BoardMenbershipUncheckedUpdateWithoutBoardInput;
  where: BoardMenbershipWhereUniqueInput;
};

export type BoardMenbershipUpsertWithWhereUniqueWithoutUserInput = {
  create: BoardMenbershipUncheckedCreateWithoutUserInput;
  update: BoardMenbershipUncheckedUpdateWithoutUserInput;
  where: BoardMenbershipWhereUniqueInput;
};

export type BoardMenbershipWhereInput = {
  AND?: InputMaybe<Array<BoardMenbershipWhereInput>>;
  NOT?: InputMaybe<Array<BoardMenbershipWhereInput>>;
  OR?: InputMaybe<Array<BoardMenbershipWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type BoardMenbershipWhereUniqueInput = {
  AND?: InputMaybe<Array<BoardMenbershipWhereInput>>;
  NOT?: InputMaybe<Array<BoardMenbershipWhereInput>>;
  OR?: InputMaybe<Array<BoardMenbershipWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type BoardMinAggregate = {
  __typename?: 'BoardMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isPublic?: Maybe<Scalars['Boolean']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type BoardMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isPublic?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type BoardNullableRelationFilter = {
  is?: InputMaybe<BoardWhereInput>;
  isNot?: InputMaybe<BoardWhereInput>;
};

export type BoardOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type BoardOrderByWithAggregationInput = {
  _count?: InputMaybe<BoardCountOrderByAggregateInput>;
  _max?: InputMaybe<BoardMaxOrderByAggregateInput>;
  _min?: InputMaybe<BoardMinOrderByAggregateInput>;
  category?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  isPublic?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
};

export type BoardOrderByWithRelationInput = {
  boardMenbership?: InputMaybe<BoardMenbershipOrderByRelationAggregateInput>;
  category?: InputMaybe<SortOrder>;
  column?: InputMaybe<ColumnOrderByRelationAggregateInput>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  group?: InputMaybe<GroupOrderByRelationAggregateInput>;
  groupMenbership?: InputMaybe<GroupMenbershipOrderByRelationAggregateInput>;
  id?: InputMaybe<SortOrder>;
  isPublic?: InputMaybe<SortOrder>;
  projectsBoards?: InputMaybe<ProjectsBoardsOrderByRelationAggregateInput>;
  tags?: InputMaybe<TagOrderByRelationAggregateInput>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
  updatedByUser?: InputMaybe<UserOrderByWithRelationInput>;
};

export type BoardRelationFilter = {
  is?: InputMaybe<BoardWhereInput>;
  isNot?: InputMaybe<BoardWhereInput>;
};

export enum BoardScalarFieldEnum {
  Category = 'category',
  Content = 'content',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Id = 'id',
  IsPublic = 'isPublic',
  Title = 'title',
  UpdatedAt = 'updatedAt',
  UpdatedBy = 'updatedBy'
}

export type BoardScalarWhereInput = {
  AND?: InputMaybe<Array<BoardScalarWhereInput>>;
  NOT?: InputMaybe<Array<BoardScalarWhereInput>>;
  OR?: InputMaybe<Array<BoardScalarWhereInput>>;
  category?: InputMaybe<StringNullableListFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<StringFilter>;
  isPublic?: InputMaybe<BoolFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
};

export type BoardScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<BoardScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<BoardScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<BoardScalarWhereWithAggregatesInput>>;
  category?: InputMaybe<StringNullableListFilter>;
  content?: InputMaybe<JsonNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  id?: InputMaybe<StringWithAggregatesFilter>;
  isPublic?: InputMaybe<BoolWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export type BoardUncheckedCreateInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  group?: InputMaybe<GroupUncheckedCreateNestedManyWithoutBoardInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagUncheckedCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<BoardCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<BoardCreateManyCreatedByUserInputEnvelope>;
};

export type BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
  connect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<BoardCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<BoardCreateManyUpdatedByUserInputEnvelope>;
};

export type BoardUncheckedCreateWithoutBoardMenbershipInput = {
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  group?: InputMaybe<GroupUncheckedCreateNestedManyWithoutBoardInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagUncheckedCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardUncheckedCreateWithoutColumnInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  group?: InputMaybe<GroupUncheckedCreateNestedManyWithoutBoardInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagUncheckedCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardUncheckedCreateWithoutCreatedByUserInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  group?: InputMaybe<GroupUncheckedCreateNestedManyWithoutBoardInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagUncheckedCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardUncheckedCreateWithoutGroupInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagUncheckedCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardUncheckedCreateWithoutGroupMenbershipInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  group?: InputMaybe<GroupUncheckedCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagUncheckedCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardUncheckedCreateWithoutProjectsBoardsInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  group?: InputMaybe<GroupUncheckedCreateNestedManyWithoutBoardInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  tags?: InputMaybe<TagUncheckedCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type BoardUncheckedCreateWithoutUpdatedByUserInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  category?: InputMaybe<BoardCreatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutBoardInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  group?: InputMaybe<GroupUncheckedCreateNestedManyWithoutBoardInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutBoardInput>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<Scalars['Boolean']['input']>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutBoardInput>;
  tags?: InputMaybe<TagUncheckedCreateNestedManyWithoutBoardInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type BoardUncheckedUpdateInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedUpdateManyWithoutBoardNestedInput>;
  category?: InputMaybe<BoardUpdatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedUpdateManyWithoutBoardNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  group?: InputMaybe<GroupUncheckedUpdateManyWithoutBoardNestedInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedUpdateManyWithoutBoardNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isPublic?: InputMaybe<BoolFieldUpdateOperationsInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedUpdateManyWithoutBoardNestedInput>;
  tags?: InputMaybe<TagUncheckedUpdateManyWithoutBoardNestedInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type BoardUncheckedUpdateManyInput = {
  category?: InputMaybe<BoardUpdatecategoryInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isPublic?: InputMaybe<BoolFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type BoardUncheckedUpdateManyWithoutCreatedByUserInput = {
  category?: InputMaybe<BoardUpdatecategoryInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isPublic?: InputMaybe<BoolFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type BoardUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<BoardCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<BoardCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<BoardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<BoardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  set?: InputMaybe<Array<BoardWhereUniqueInput>>;
  update?: InputMaybe<Array<BoardUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<BoardUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<BoardUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type BoardUncheckedUpdateManyWithoutUpdatedByUserInput = {
  category?: InputMaybe<BoardUpdatecategoryInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isPublic?: InputMaybe<BoolFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type BoardUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<BoardCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<BoardCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<BoardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<BoardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  set?: InputMaybe<Array<BoardWhereUniqueInput>>;
  update?: InputMaybe<Array<BoardUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<BoardUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<BoardUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type BoardUncheckedUpdateWithoutCreatedByUserInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedUpdateManyWithoutBoardNestedInput>;
  category?: InputMaybe<BoardUpdatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedUpdateManyWithoutBoardNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  group?: InputMaybe<GroupUncheckedUpdateManyWithoutBoardNestedInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedUpdateManyWithoutBoardNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isPublic?: InputMaybe<BoolFieldUpdateOperationsInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedUpdateManyWithoutBoardNestedInput>;
  tags?: InputMaybe<TagUncheckedUpdateManyWithoutBoardNestedInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type BoardUncheckedUpdateWithoutUpdatedByUserInput = {
  boardMenbership?: InputMaybe<BoardMenbershipUncheckedUpdateManyWithoutBoardNestedInput>;
  category?: InputMaybe<BoardUpdatecategoryInput>;
  column?: InputMaybe<ColumnUncheckedUpdateManyWithoutBoardNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  group?: InputMaybe<GroupUncheckedUpdateManyWithoutBoardNestedInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedUpdateManyWithoutBoardNestedInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isPublic?: InputMaybe<BoolFieldUpdateOperationsInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedUpdateManyWithoutBoardNestedInput>;
  tags?: InputMaybe<TagUncheckedUpdateManyWithoutBoardNestedInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type BoardUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: BoardUncheckedUpdateManyWithoutCreatedByUserInput;
  where: BoardScalarWhereInput;
};

export type BoardUpdateManyWithWhereWithoutUpdatedByUserInput = {
  data: BoardUncheckedUpdateManyWithoutUpdatedByUserInput;
  where: BoardScalarWhereInput;
};

export type BoardUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<BoardCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<BoardCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<BoardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<BoardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  set?: InputMaybe<Array<BoardWhereUniqueInput>>;
  update?: InputMaybe<Array<BoardUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<BoardUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<BoardUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type BoardUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<BoardCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<BoardCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<BoardCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<BoardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<BoardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<BoardWhereUniqueInput>>;
  set?: InputMaybe<Array<BoardWhereUniqueInput>>;
  update?: InputMaybe<Array<BoardUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<BoardUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<BoardUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type BoardUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: BoardUncheckedUpdateWithoutCreatedByUserInput;
  where: BoardWhereUniqueInput;
};

export type BoardUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
  data: BoardUncheckedUpdateWithoutUpdatedByUserInput;
  where: BoardWhereUniqueInput;
};

export type BoardUpdatecategoryInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type BoardUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: BoardUncheckedCreateWithoutCreatedByUserInput;
  update: BoardUncheckedUpdateWithoutCreatedByUserInput;
  where: BoardWhereUniqueInput;
};

export type BoardUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
  create: BoardUncheckedCreateWithoutUpdatedByUserInput;
  update: BoardUncheckedUpdateWithoutUpdatedByUserInput;
  where: BoardWhereUniqueInput;
};

export type BoardWhereInput = {
  AND?: InputMaybe<Array<BoardWhereInput>>;
  NOT?: InputMaybe<Array<BoardWhereInput>>;
  OR?: InputMaybe<Array<BoardWhereInput>>;
  boardMenbership?: InputMaybe<BoardMenbershipListRelationFilter>;
  category?: InputMaybe<StringNullableListFilter>;
  column?: InputMaybe<ColumnListRelationFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  group?: InputMaybe<GroupListRelationFilter>;
  groupMenbership?: InputMaybe<GroupMenbershipListRelationFilter>;
  id?: InputMaybe<StringFilter>;
  isPublic?: InputMaybe<BoolFilter>;
  projectsBoards?: InputMaybe<ProjectsBoardsListRelationFilter>;
  tags?: InputMaybe<TagListRelationFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
};

export type BoardWhereUniqueInput = {
  AND?: InputMaybe<Array<BoardWhereInput>>;
  NOT?: InputMaybe<Array<BoardWhereInput>>;
  OR?: InputMaybe<Array<BoardWhereInput>>;
  boardMenbership?: InputMaybe<BoardMenbershipListRelationFilter>;
  category?: InputMaybe<StringNullableListFilter>;
  column?: InputMaybe<ColumnListRelationFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  group?: InputMaybe<GroupListRelationFilter>;
  groupMenbership?: InputMaybe<GroupMenbershipListRelationFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  isPublic?: InputMaybe<BoolFilter>;
  projectsBoards?: InputMaybe<ProjectsBoardsListRelationFilter>;
  tags?: InputMaybe<TagListRelationFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
};

export type BoolFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['Boolean']['input']>;
};

export type BoolFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolFilter>;
};

export type BoolWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedBoolFilter>;
  _min?: InputMaybe<NestedBoolFilter>;
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolWithAggregatesFilter>;
};

export type Card = {
  __typename?: 'Card';
  _count?: Maybe<CardCount>;
  appointment?: Maybe<Scalars['DateTimeISO']['output']>;
  cardAssignment: Array<CardAssignment>;
  cardComment: Array<CardComment>;
  cardTags: Array<CardTags>;
  column: Column;
  columnId: Scalars['Int']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdByUser?: Maybe<User>;
  description: Scalars['String']['output'];
  fieldValue: Array<FieldsValue>;
  hasHistoryModified: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  isOpen: Scalars['Boolean']['output'];
  moviment: Array<CardMovement>;
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  priority: Scalars['Float']['output'];
  tags: Array<Scalars['String']['output']>;
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
  updatedByUser?: Maybe<User>;
};


export type CardCardAssignmentArgs = {
  cursor?: InputMaybe<CardAssignmentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardAssignmentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardAssignmentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type CardCardCommentArgs = {
  cursor?: InputMaybe<CardCommentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardCommentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardCommentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardCommentWhereInput>;
};


export type CardCardTagsArgs = {
  cursor?: InputMaybe<CardTagsWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardTagsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardTagsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardTagsWhereInput>;
};


export type CardCreatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type CardFieldValueArgs = {
  cursor?: InputMaybe<FieldsValueWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldsValueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldsValueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type CardMovimentArgs = {
  cursor?: InputMaybe<CardMovementWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardMovementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type CardUpdatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type CardAssignment = {
  __typename?: 'CardAssignment';
  CardId: Scalars['String']['output'];
  card: Card;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type CardAssignmentAvgAggregate = {
  __typename?: 'CardAssignmentAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type CardAssignmentAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CardAssignmentCountAggregate = {
  __typename?: 'CardAssignmentCountAggregate';
  CardId: Scalars['Int']['output'];
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type CardAssignmentCountOrderByAggregateInput = {
  CardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type CardAssignmentCreateManyCardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type CardAssignmentCreateManyCardInputEnvelope = {
  data: Array<CardAssignmentCreateManyCardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardAssignmentCreateManyInput = {
  CardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type CardAssignmentCreateManyUserInput = {
  CardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardAssignmentCreateManyUserInputEnvelope = {
  data: Array<CardAssignmentCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardAssignmentCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardAssignmentCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardAssignmentCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardAssignmentCreateManyCardInputEnvelope>;
};

export type CardAssignmentCreateOrConnectWithoutCardInput = {
  create: CardAssignmentUncheckedCreateWithoutCardInput;
  where: CardAssignmentWhereUniqueInput;
};

export type CardAssignmentCreateOrConnectWithoutUserInput = {
  create: CardAssignmentUncheckedCreateWithoutUserInput;
  where: CardAssignmentWhereUniqueInput;
};

export type CardAssignmentCreateWithoutCardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user: UserCreateNestedOneWithoutCardAssignmentInput;
};

export type CardAssignmentCreateWithoutUserInput = {
  card: CardCreateNestedOneWithoutCardAssignmentInput;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardAssignmentGroupBy = {
  __typename?: 'CardAssignmentGroupBy';
  CardId: Scalars['String']['output'];
  _avg?: Maybe<CardAssignmentAvgAggregate>;
  _count?: Maybe<CardAssignmentCountAggregate>;
  _max?: Maybe<CardAssignmentMaxAggregate>;
  _min?: Maybe<CardAssignmentMinAggregate>;
  _sum?: Maybe<CardAssignmentSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type CardAssignmentListRelationFilter = {
  every?: InputMaybe<CardAssignmentWhereInput>;
  none?: InputMaybe<CardAssignmentWhereInput>;
  some?: InputMaybe<CardAssignmentWhereInput>;
};

export type CardAssignmentMaxAggregate = {
  __typename?: 'CardAssignmentMaxAggregate';
  CardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type CardAssignmentMaxOrderByAggregateInput = {
  CardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type CardAssignmentMinAggregate = {
  __typename?: 'CardAssignmentMinAggregate';
  CardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type CardAssignmentMinOrderByAggregateInput = {
  CardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type CardAssignmentOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CardAssignmentOrderByWithAggregationInput = {
  CardId?: InputMaybe<SortOrder>;
  _avg?: InputMaybe<CardAssignmentAvgOrderByAggregateInput>;
  _count?: InputMaybe<CardAssignmentCountOrderByAggregateInput>;
  _max?: InputMaybe<CardAssignmentMaxOrderByAggregateInput>;
  _min?: InputMaybe<CardAssignmentMinOrderByAggregateInput>;
  _sum?: InputMaybe<CardAssignmentSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type CardAssignmentOrderByWithRelationInput = {
  CardId?: InputMaybe<SortOrder>;
  card?: InputMaybe<CardOrderByWithRelationInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum CardAssignmentScalarFieldEnum {
  CardId = 'CardId',
  CreatedAt = 'createdAt',
  Id = 'id',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid'
}

export type CardAssignmentScalarWhereInput = {
  AND?: InputMaybe<Array<CardAssignmentScalarWhereInput>>;
  CardId?: InputMaybe<StringFilter>;
  NOT?: InputMaybe<Array<CardAssignmentScalarWhereInput>>;
  OR?: InputMaybe<Array<CardAssignmentScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type CardAssignmentScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CardAssignmentScalarWhereWithAggregatesInput>>;
  CardId?: InputMaybe<StringWithAggregatesFilter>;
  NOT?: InputMaybe<Array<CardAssignmentScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CardAssignmentScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type CardAssignmentSumAggregate = {
  __typename?: 'CardAssignmentSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type CardAssignmentSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CardAssignmentUncheckedCreateInput = {
  CardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type CardAssignmentUncheckedCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardAssignmentCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardAssignmentCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardAssignmentCreateManyCardInputEnvelope>;
};

export type CardAssignmentUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardAssignmentCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardAssignmentCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardAssignmentCreateManyUserInputEnvelope>;
};

export type CardAssignmentUncheckedCreateWithoutCardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type CardAssignmentUncheckedCreateWithoutUserInput = {
  CardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardAssignmentUncheckedUpdateInput = {
  CardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardAssignmentUncheckedUpdateManyInput = {
  CardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardAssignmentUncheckedUpdateManyWithoutCardInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardAssignmentUncheckedUpdateManyWithoutCardNestedInput = {
  connect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardAssignmentCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardAssignmentCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardAssignmentCreateManyCardInputEnvelope>;
  delete?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardAssignmentScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  set?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  update?: InputMaybe<Array<CardAssignmentUpdateWithWhereUniqueWithoutCardInput>>;
  updateMany?: InputMaybe<Array<CardAssignmentUpdateManyWithWhereWithoutCardInput>>;
  upsert?: InputMaybe<Array<CardAssignmentUpsertWithWhereUniqueWithoutCardInput>>;
};

export type CardAssignmentUncheckedUpdateManyWithoutUserInput = {
  CardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CardAssignmentUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardAssignmentCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardAssignmentCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardAssignmentCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardAssignmentScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  set?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  update?: InputMaybe<Array<CardAssignmentUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<CardAssignmentUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<CardAssignmentUpsertWithWhereUniqueWithoutUserInput>>;
};

export type CardAssignmentUncheckedUpdateWithoutCardInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardAssignmentUncheckedUpdateWithoutUserInput = {
  CardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CardAssignmentUpdateManyWithWhereWithoutCardInput = {
  data: CardAssignmentUncheckedUpdateManyWithoutCardInput;
  where: CardAssignmentScalarWhereInput;
};

export type CardAssignmentUpdateManyWithWhereWithoutUserInput = {
  data: CardAssignmentUncheckedUpdateManyWithoutUserInput;
  where: CardAssignmentScalarWhereInput;
};

export type CardAssignmentUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardAssignmentCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardAssignmentCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardAssignmentCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardAssignmentScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  set?: InputMaybe<Array<CardAssignmentWhereUniqueInput>>;
  update?: InputMaybe<Array<CardAssignmentUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<CardAssignmentUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<CardAssignmentUpsertWithWhereUniqueWithoutUserInput>>;
};

export type CardAssignmentUpdateWithWhereUniqueWithoutCardInput = {
  data: CardAssignmentUncheckedUpdateWithoutCardInput;
  where: CardAssignmentWhereUniqueInput;
};

export type CardAssignmentUpdateWithWhereUniqueWithoutUserInput = {
  data: CardAssignmentUncheckedUpdateWithoutUserInput;
  where: CardAssignmentWhereUniqueInput;
};

export type CardAssignmentUpsertWithWhereUniqueWithoutCardInput = {
  create: CardAssignmentUncheckedCreateWithoutCardInput;
  update: CardAssignmentUncheckedUpdateWithoutCardInput;
  where: CardAssignmentWhereUniqueInput;
};

export type CardAssignmentUpsertWithWhereUniqueWithoutUserInput = {
  create: CardAssignmentUncheckedCreateWithoutUserInput;
  update: CardAssignmentUncheckedUpdateWithoutUserInput;
  where: CardAssignmentWhereUniqueInput;
};

export type CardAssignmentWhereInput = {
  AND?: InputMaybe<Array<CardAssignmentWhereInput>>;
  CardId?: InputMaybe<StringFilter>;
  NOT?: InputMaybe<Array<CardAssignmentWhereInput>>;
  OR?: InputMaybe<Array<CardAssignmentWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type CardAssignmentWhereUniqueInput = {
  AND?: InputMaybe<Array<CardAssignmentWhereInput>>;
  CardId?: InputMaybe<StringFilter>;
  NOT?: InputMaybe<Array<CardAssignmentWhereInput>>;
  OR?: InputMaybe<Array<CardAssignmentWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type CardAvgAggregate = {
  __typename?: 'CardAvgAggregate';
  columnId?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
  priority?: Maybe<Scalars['Float']['output']>;
};

export type CardAvgOrderByAggregateInput = {
  columnId?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  priority?: InputMaybe<SortOrder>;
};

export type CardComment = {
  __typename?: 'CardComment';
  card: Card;
  cardId: Scalars['String']['output'];
  comment: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type CardCommentAvgAggregate = {
  __typename?: 'CardCommentAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type CardCommentAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CardCommentCountAggregate = {
  __typename?: 'CardCommentCountAggregate';
  _all: Scalars['Int']['output'];
  cardId: Scalars['Int']['output'];
  comment: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type CardCommentCountOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  comment?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type CardCommentCreateManyCardInput = {
  comment: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type CardCommentCreateManyCardInputEnvelope = {
  data: Array<CardCommentCreateManyCardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardCommentCreateManyInput = {
  cardId: Scalars['String']['input'];
  comment: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type CardCommentCreateManyUserInput = {
  cardId: Scalars['String']['input'];
  comment: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardCommentCreateManyUserInputEnvelope = {
  data: Array<CardCommentCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardCommentCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCommentCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardCommentCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardCommentCreateManyCardInputEnvelope>;
};

export type CardCommentCreateOrConnectWithoutCardInput = {
  create: CardCommentUncheckedCreateWithoutCardInput;
  where: CardCommentWhereUniqueInput;
};

export type CardCommentCreateOrConnectWithoutUserInput = {
  create: CardCommentUncheckedCreateWithoutUserInput;
  where: CardCommentWhereUniqueInput;
};

export type CardCommentCreateWithoutCardInput = {
  comment: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user: UserCreateNestedOneWithoutCardCommentInput;
};

export type CardCommentCreateWithoutUserInput = {
  card: CardCreateNestedOneWithoutCardCommentInput;
  comment: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardCommentGroupBy = {
  __typename?: 'CardCommentGroupBy';
  _avg?: Maybe<CardCommentAvgAggregate>;
  _count?: Maybe<CardCommentCountAggregate>;
  _max?: Maybe<CardCommentMaxAggregate>;
  _min?: Maybe<CardCommentMinAggregate>;
  _sum?: Maybe<CardCommentSumAggregate>;
  cardId: Scalars['String']['output'];
  comment: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type CardCommentListRelationFilter = {
  every?: InputMaybe<CardCommentWhereInput>;
  none?: InputMaybe<CardCommentWhereInput>;
  some?: InputMaybe<CardCommentWhereInput>;
};

export type CardCommentMaxAggregate = {
  __typename?: 'CardCommentMaxAggregate';
  cardId?: Maybe<Scalars['String']['output']>;
  comment?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type CardCommentMaxOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  comment?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type CardCommentMinAggregate = {
  __typename?: 'CardCommentMinAggregate';
  cardId?: Maybe<Scalars['String']['output']>;
  comment?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type CardCommentMinOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  comment?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type CardCommentOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CardCommentOrderByWithAggregationInput = {
  _avg?: InputMaybe<CardCommentAvgOrderByAggregateInput>;
  _count?: InputMaybe<CardCommentCountOrderByAggregateInput>;
  _max?: InputMaybe<CardCommentMaxOrderByAggregateInput>;
  _min?: InputMaybe<CardCommentMinOrderByAggregateInput>;
  _sum?: InputMaybe<CardCommentSumOrderByAggregateInput>;
  cardId?: InputMaybe<SortOrder>;
  comment?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type CardCommentOrderByWithRelationInput = {
  card?: InputMaybe<CardOrderByWithRelationInput>;
  cardId?: InputMaybe<SortOrder>;
  comment?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum CardCommentScalarFieldEnum {
  CardId = 'cardId',
  Comment = 'comment',
  CreatedAt = 'createdAt',
  Id = 'id',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid'
}

export type CardCommentScalarWhereInput = {
  AND?: InputMaybe<Array<CardCommentScalarWhereInput>>;
  NOT?: InputMaybe<Array<CardCommentScalarWhereInput>>;
  OR?: InputMaybe<Array<CardCommentScalarWhereInput>>;
  cardId?: InputMaybe<StringFilter>;
  comment?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type CardCommentScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CardCommentScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CardCommentScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CardCommentScalarWhereWithAggregatesInput>>;
  cardId?: InputMaybe<StringWithAggregatesFilter>;
  comment?: InputMaybe<StringWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type CardCommentSumAggregate = {
  __typename?: 'CardCommentSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type CardCommentSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type CardCommentUncheckedCreateInput = {
  cardId: Scalars['String']['input'];
  comment: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type CardCommentUncheckedCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCommentCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardCommentCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardCommentCreateManyCardInputEnvelope>;
};

export type CardCommentUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCommentCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardCommentCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardCommentCreateManyUserInputEnvelope>;
};

export type CardCommentUncheckedCreateWithoutCardInput = {
  comment: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type CardCommentUncheckedCreateWithoutUserInput = {
  cardId: Scalars['String']['input'];
  comment: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardCommentUncheckedUpdateInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  comment?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardCommentUncheckedUpdateManyInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  comment?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardCommentUncheckedUpdateManyWithoutCardInput = {
  comment?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardCommentUncheckedUpdateManyWithoutCardNestedInput = {
  connect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCommentCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardCommentCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardCommentCreateManyCardInputEnvelope>;
  delete?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardCommentScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  set?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  update?: InputMaybe<Array<CardCommentUpdateWithWhereUniqueWithoutCardInput>>;
  updateMany?: InputMaybe<Array<CardCommentUpdateManyWithWhereWithoutCardInput>>;
  upsert?: InputMaybe<Array<CardCommentUpsertWithWhereUniqueWithoutCardInput>>;
};

export type CardCommentUncheckedUpdateManyWithoutUserInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  comment?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CardCommentUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCommentCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardCommentCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardCommentCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardCommentScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  set?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  update?: InputMaybe<Array<CardCommentUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<CardCommentUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<CardCommentUpsertWithWhereUniqueWithoutUserInput>>;
};

export type CardCommentUncheckedUpdateWithoutCardInput = {
  comment?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardCommentUncheckedUpdateWithoutUserInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  comment?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CardCommentUpdateManyWithWhereWithoutCardInput = {
  data: CardCommentUncheckedUpdateManyWithoutCardInput;
  where: CardCommentScalarWhereInput;
};

export type CardCommentUpdateManyWithWhereWithoutUserInput = {
  data: CardCommentUncheckedUpdateManyWithoutUserInput;
  where: CardCommentScalarWhereInput;
};

export type CardCommentUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCommentCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardCommentCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardCommentCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardCommentScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  set?: InputMaybe<Array<CardCommentWhereUniqueInput>>;
  update?: InputMaybe<Array<CardCommentUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<CardCommentUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<CardCommentUpsertWithWhereUniqueWithoutUserInput>>;
};

export type CardCommentUpdateWithWhereUniqueWithoutCardInput = {
  data: CardCommentUncheckedUpdateWithoutCardInput;
  where: CardCommentWhereUniqueInput;
};

export type CardCommentUpdateWithWhereUniqueWithoutUserInput = {
  data: CardCommentUncheckedUpdateWithoutUserInput;
  where: CardCommentWhereUniqueInput;
};

export type CardCommentUpsertWithWhereUniqueWithoutCardInput = {
  create: CardCommentUncheckedCreateWithoutCardInput;
  update: CardCommentUncheckedUpdateWithoutCardInput;
  where: CardCommentWhereUniqueInput;
};

export type CardCommentUpsertWithWhereUniqueWithoutUserInput = {
  create: CardCommentUncheckedCreateWithoutUserInput;
  update: CardCommentUncheckedUpdateWithoutUserInput;
  where: CardCommentWhereUniqueInput;
};

export type CardCommentWhereInput = {
  AND?: InputMaybe<Array<CardCommentWhereInput>>;
  NOT?: InputMaybe<Array<CardCommentWhereInput>>;
  OR?: InputMaybe<Array<CardCommentWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  cardId?: InputMaybe<StringFilter>;
  comment?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type CardCommentWhereUniqueInput = {
  AND?: InputMaybe<Array<CardCommentWhereInput>>;
  NOT?: InputMaybe<Array<CardCommentWhereInput>>;
  OR?: InputMaybe<Array<CardCommentWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  cardId?: InputMaybe<StringFilter>;
  comment?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type CardCount = {
  __typename?: 'CardCount';
  cardAssignment: Scalars['Int']['output'];
  cardComment: Scalars['Int']['output'];
  cardTags: Scalars['Int']['output'];
  fieldValue: Scalars['Int']['output'];
  moviment: Scalars['Int']['output'];
};


export type CardCountCardAssignmentArgs = {
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type CardCountCardCommentArgs = {
  where?: InputMaybe<CardCommentWhereInput>;
};


export type CardCountCardTagsArgs = {
  where?: InputMaybe<CardTagsWhereInput>;
};


export type CardCountFieldValueArgs = {
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type CardCountMovimentArgs = {
  where?: InputMaybe<CardMovementWhereInput>;
};

export type CardCountAggregate = {
  __typename?: 'CardCountAggregate';
  _all: Scalars['Int']['output'];
  appointment: Scalars['Int']['output'];
  columnId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  hasHistoryModified: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  isOpen: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  priority: Scalars['Int']['output'];
  tags: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type CardCountOrderByAggregateInput = {
  appointment?: InputMaybe<SortOrder>;
  columnId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  hasHistoryModified?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isOpen?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  priority?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type CardCreateManyColumnInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardCreateManyColumnInputEnvelope = {
  data: Array<CardCreateManyColumnInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardCreateManyCreatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardCreateManyCreatedByUserInputEnvelope = {
  data: Array<CardCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardCreateManyInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardCreateManyUpdatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardCreateManyUpdatedByUserInputEnvelope = {
  data: Array<CardCreateManyUpdatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardCreateNestedManyWithoutColumnInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutColumnInput>>;
  create?: InputMaybe<Array<CardCreateWithoutColumnInput>>;
  createMany?: InputMaybe<CardCreateManyColumnInputEnvelope>;
};

export type CardCreateNestedOneWithoutCardAssignmentInput = {
  connect?: InputMaybe<CardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CardCreateOrConnectWithoutCardAssignmentInput>;
  create?: InputMaybe<CardUncheckedCreateWithoutCardAssignmentInput>;
};

export type CardCreateNestedOneWithoutCardCommentInput = {
  connect?: InputMaybe<CardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CardCreateOrConnectWithoutCardCommentInput>;
  create?: InputMaybe<CardUncheckedCreateWithoutCardCommentInput>;
};

export type CardCreateNestedOneWithoutCardTagsInput = {
  connect?: InputMaybe<CardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CardCreateOrConnectWithoutCardTagsInput>;
  create?: InputMaybe<CardUncheckedCreateWithoutCardTagsInput>;
};

export type CardCreateNestedOneWithoutFieldValueInput = {
  connect?: InputMaybe<CardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CardCreateOrConnectWithoutFieldValueInput>;
  create?: InputMaybe<CardUncheckedCreateWithoutFieldValueInput>;
};

export type CardCreateNestedOneWithoutMovimentInput = {
  connect?: InputMaybe<CardWhereUniqueInput>;
  connectOrCreate?: InputMaybe<CardCreateOrConnectWithoutMovimentInput>;
  create?: InputMaybe<CardUncheckedCreateWithoutMovimentInput>;
};

export type CardCreateOrConnectWithoutCardAssignmentInput = {
  create: CardUncheckedCreateWithoutCardAssignmentInput;
  where: CardWhereUniqueInput;
};

export type CardCreateOrConnectWithoutCardCommentInput = {
  create: CardUncheckedCreateWithoutCardCommentInput;
  where: CardWhereUniqueInput;
};

export type CardCreateOrConnectWithoutCardTagsInput = {
  create: CardUncheckedCreateWithoutCardTagsInput;
  where: CardWhereUniqueInput;
};

export type CardCreateOrConnectWithoutColumnInput = {
  create: CardUncheckedCreateWithoutColumnInput;
  where: CardWhereUniqueInput;
};

export type CardCreateOrConnectWithoutCreatedByUserInput = {
  create: CardUncheckedCreateWithoutCreatedByUserInput;
  where: CardWhereUniqueInput;
};

export type CardCreateOrConnectWithoutFieldValueInput = {
  create: CardUncheckedCreateWithoutFieldValueInput;
  where: CardWhereUniqueInput;
};

export type CardCreateOrConnectWithoutMovimentInput = {
  create: CardUncheckedCreateWithoutMovimentInput;
  where: CardWhereUniqueInput;
};

export type CardCreateOrConnectWithoutUpdatedByUserInput = {
  create: CardUncheckedCreateWithoutUpdatedByUserInput;
  where: CardWhereUniqueInput;
};

export type CardCreateWithoutColumnInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsCreateNestedManyWithoutCardInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutCardCreatedByInput>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutCardUpdatedByInput>;
};

export type CardCreateWithoutCreatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsCreateNestedManyWithoutCardInput>;
  column: ColumnCreateNestedOneWithoutCardInput;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutCardUpdatedByInput>;
};

export type CardCreateWithoutUpdatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsCreateNestedManyWithoutCardInput>;
  column: ColumnCreateNestedOneWithoutCardInput;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutCardCreatedByInput>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardCreatetagsInput = {
  set: Array<Scalars['String']['input']>;
};

export type CardGroupBy = {
  __typename?: 'CardGroupBy';
  _avg?: Maybe<CardAvgAggregate>;
  _count?: Maybe<CardCountAggregate>;
  _max?: Maybe<CardMaxAggregate>;
  _min?: Maybe<CardMinAggregate>;
  _sum?: Maybe<CardSumAggregate>;
  appointment?: Maybe<Scalars['DateTimeISO']['output']>;
  columnId: Scalars['Int']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  hasHistoryModified: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  isOpen: Scalars['Boolean']['output'];
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  priority: Scalars['Float']['output'];
  tags?: Maybe<Array<Scalars['String']['output']>>;
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type CardListRelationFilter = {
  every?: InputMaybe<CardWhereInput>;
  none?: InputMaybe<CardWhereInput>;
  some?: InputMaybe<CardWhereInput>;
};

export type CardMaxAggregate = {
  __typename?: 'CardMaxAggregate';
  appointment?: Maybe<Scalars['DateTimeISO']['output']>;
  columnId?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  hasHistoryModified?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isOpen?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  priority?: Maybe<Scalars['Float']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type CardMaxOrderByAggregateInput = {
  appointment?: InputMaybe<SortOrder>;
  columnId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  hasHistoryModified?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isOpen?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  priority?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type CardMinAggregate = {
  __typename?: 'CardMinAggregate';
  appointment?: Maybe<Scalars['DateTimeISO']['output']>;
  columnId?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  hasHistoryModified?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['String']['output']>;
  isOpen?: Maybe<Scalars['Boolean']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  priority?: Maybe<Scalars['Float']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type CardMinOrderByAggregateInput = {
  appointment?: InputMaybe<SortOrder>;
  columnId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  hasHistoryModified?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isOpen?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  priority?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type CardMovement = {
  __typename?: 'CardMovement';
  card: Card;
  cardId: Scalars['String']['output'];
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  fromColumn: Column;
  fromColumnId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  toColumn: Column;
  toColumnId: Scalars['Int']['output'];
  updateBy?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};


export type CardMovementUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type CardMovementAvgAggregate = {
  __typename?: 'CardMovementAvgAggregate';
  fromColumnId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  toColumnId?: Maybe<Scalars['Float']['output']>;
};

export type CardMovementAvgOrderByAggregateInput = {
  fromColumnId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  toColumnId?: InputMaybe<SortOrder>;
};

export type CardMovementCountAggregate = {
  __typename?: 'CardMovementCountAggregate';
  _all: Scalars['Int']['output'];
  cardId: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  fromColumnId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  toColumnId: Scalars['Int']['output'];
  updateBy: Scalars['Int']['output'];
};

export type CardMovementCountOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  fromColumnId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  toColumnId?: InputMaybe<SortOrder>;
  updateBy?: InputMaybe<SortOrder>;
};

export type CardMovementCreateManyCardInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumnId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumnId: Scalars['Int']['input'];
  updateBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardMovementCreateManyCardInputEnvelope = {
  data: Array<CardMovementCreateManyCardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardMovementCreateManyFromColumnInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumnId: Scalars['Int']['input'];
  updateBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardMovementCreateManyFromColumnInputEnvelope = {
  data: Array<CardMovementCreateManyFromColumnInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardMovementCreateManyInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumnId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumnId: Scalars['Int']['input'];
  updateBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardMovementCreateManyToColumnInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumnId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  updateBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardMovementCreateManyToColumnInputEnvelope = {
  data: Array<CardMovementCreateManyToColumnInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardMovementCreateManyUserInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumnId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumnId: Scalars['Int']['input'];
};

export type CardMovementCreateManyUserInputEnvelope = {
  data: Array<CardMovementCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardMovementCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardMovementCreateManyCardInputEnvelope>;
};

export type CardMovementCreateNestedManyWithoutFromColumnInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutFromColumnInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutFromColumnInput>>;
  createMany?: InputMaybe<CardMovementCreateManyFromColumnInputEnvelope>;
};

export type CardMovementCreateNestedManyWithoutToColumnInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutToColumnInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutToColumnInput>>;
  createMany?: InputMaybe<CardMovementCreateManyToColumnInputEnvelope>;
};

export type CardMovementCreateOrConnectWithoutCardInput = {
  create: CardMovementUncheckedCreateWithoutCardInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementCreateOrConnectWithoutFromColumnInput = {
  create: CardMovementUncheckedCreateWithoutFromColumnInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementCreateOrConnectWithoutToColumnInput = {
  create: CardMovementUncheckedCreateWithoutToColumnInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementCreateOrConnectWithoutUserInput = {
  create: CardMovementUncheckedCreateWithoutUserInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementCreateWithoutCardInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumn: ColumnCreateNestedOneWithoutMovementsFromInput;
  toColumn: ColumnCreateNestedOneWithoutMovementsToInput;
  user?: InputMaybe<UserCreateNestedOneWithoutCardMovementsInput>;
};

export type CardMovementCreateWithoutFromColumnInput = {
  card: CardCreateNestedOneWithoutMovimentInput;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  toColumn: ColumnCreateNestedOneWithoutMovementsToInput;
  user?: InputMaybe<UserCreateNestedOneWithoutCardMovementsInput>;
};

export type CardMovementCreateWithoutToColumnInput = {
  card: CardCreateNestedOneWithoutMovimentInput;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumn: ColumnCreateNestedOneWithoutMovementsFromInput;
  user?: InputMaybe<UserCreateNestedOneWithoutCardMovementsInput>;
};

export type CardMovementCreateWithoutUserInput = {
  card: CardCreateNestedOneWithoutMovimentInput;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumn: ColumnCreateNestedOneWithoutMovementsFromInput;
  toColumn: ColumnCreateNestedOneWithoutMovementsToInput;
};

export type CardMovementGroupBy = {
  __typename?: 'CardMovementGroupBy';
  _avg?: Maybe<CardMovementAvgAggregate>;
  _count?: Maybe<CardMovementCountAggregate>;
  _max?: Maybe<CardMovementMaxAggregate>;
  _min?: Maybe<CardMovementMinAggregate>;
  _sum?: Maybe<CardMovementSumAggregate>;
  cardId: Scalars['String']['output'];
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  fromColumnId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  toColumnId: Scalars['Int']['output'];
  updateBy?: Maybe<Scalars['String']['output']>;
};

export type CardMovementListRelationFilter = {
  every?: InputMaybe<CardMovementWhereInput>;
  none?: InputMaybe<CardMovementWhereInput>;
  some?: InputMaybe<CardMovementWhereInput>;
};

export type CardMovementMaxAggregate = {
  __typename?: 'CardMovementMaxAggregate';
  cardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  fromColumnId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  toColumnId?: Maybe<Scalars['Int']['output']>;
  updateBy?: Maybe<Scalars['String']['output']>;
};

export type CardMovementMaxOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  fromColumnId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  toColumnId?: InputMaybe<SortOrder>;
  updateBy?: InputMaybe<SortOrder>;
};

export type CardMovementMinAggregate = {
  __typename?: 'CardMovementMinAggregate';
  cardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  fromColumnId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  toColumnId?: Maybe<Scalars['Int']['output']>;
  updateBy?: Maybe<Scalars['String']['output']>;
};

export type CardMovementMinOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  fromColumnId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  toColumnId?: InputMaybe<SortOrder>;
  updateBy?: InputMaybe<SortOrder>;
};

export type CardMovementOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CardMovementOrderByWithAggregationInput = {
  _avg?: InputMaybe<CardMovementAvgOrderByAggregateInput>;
  _count?: InputMaybe<CardMovementCountOrderByAggregateInput>;
  _max?: InputMaybe<CardMovementMaxOrderByAggregateInput>;
  _min?: InputMaybe<CardMovementMinOrderByAggregateInput>;
  _sum?: InputMaybe<CardMovementSumOrderByAggregateInput>;
  cardId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  fromColumnId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  toColumnId?: InputMaybe<SortOrder>;
  updateBy?: InputMaybe<SortOrderInput>;
};

export type CardMovementOrderByWithRelationInput = {
  card?: InputMaybe<CardOrderByWithRelationInput>;
  cardId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  fromColumn?: InputMaybe<ColumnOrderByWithRelationInput>;
  fromColumnId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  toColumn?: InputMaybe<ColumnOrderByWithRelationInput>;
  toColumnId?: InputMaybe<SortOrder>;
  updateBy?: InputMaybe<SortOrderInput>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export enum CardMovementScalarFieldEnum {
  CardId = 'cardId',
  Content = 'content',
  CreatedAt = 'createdAt',
  FromColumnId = 'fromColumnId',
  Id = 'id',
  ToColumnId = 'toColumnId',
  UpdateBy = 'updateBy'
}

export type CardMovementScalarWhereInput = {
  AND?: InputMaybe<Array<CardMovementScalarWhereInput>>;
  NOT?: InputMaybe<Array<CardMovementScalarWhereInput>>;
  OR?: InputMaybe<Array<CardMovementScalarWhereInput>>;
  cardId?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  fromColumnId?: InputMaybe<IntFilter>;
  id?: InputMaybe<IntFilter>;
  toColumnId?: InputMaybe<IntFilter>;
  updateBy?: InputMaybe<UuidNullableFilter>;
};

export type CardMovementScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CardMovementScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CardMovementScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CardMovementScalarWhereWithAggregatesInput>>;
  cardId?: InputMaybe<StringWithAggregatesFilter>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  fromColumnId?: InputMaybe<IntWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  toColumnId?: InputMaybe<IntWithAggregatesFilter>;
  updateBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export type CardMovementSumAggregate = {
  __typename?: 'CardMovementSumAggregate';
  fromColumnId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  toColumnId?: Maybe<Scalars['Int']['output']>;
};

export type CardMovementSumOrderByAggregateInput = {
  fromColumnId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  toColumnId?: InputMaybe<SortOrder>;
};

export type CardMovementUncheckedCreateInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumnId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumnId: Scalars['Int']['input'];
  updateBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardMovementUncheckedCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardMovementCreateManyCardInputEnvelope>;
};

export type CardMovementUncheckedCreateNestedManyWithoutFromColumnInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutFromColumnInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutFromColumnInput>>;
  createMany?: InputMaybe<CardMovementCreateManyFromColumnInputEnvelope>;
};

export type CardMovementUncheckedCreateNestedManyWithoutToColumnInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutToColumnInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutToColumnInput>>;
  createMany?: InputMaybe<CardMovementCreateManyToColumnInputEnvelope>;
};

export type CardMovementUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardMovementCreateManyUserInputEnvelope>;
};

export type CardMovementUncheckedCreateWithoutCardInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumnId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumnId: Scalars['Int']['input'];
  updateBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardMovementUncheckedCreateWithoutFromColumnInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumnId: Scalars['Int']['input'];
  updateBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardMovementUncheckedCreateWithoutToColumnInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumnId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  updateBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardMovementUncheckedCreateWithoutUserInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fromColumnId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumnId: Scalars['Int']['input'];
};

export type CardMovementUncheckedUpdateInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fromColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  toColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updateBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateManyInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fromColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  toColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updateBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateManyWithoutCardInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fromColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  toColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updateBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateManyWithoutCardNestedInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardMovementCreateManyCardInputEnvelope>;
  delete?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardMovementScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  set?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  update?: InputMaybe<Array<CardMovementUpdateWithWhereUniqueWithoutCardInput>>;
  updateMany?: InputMaybe<Array<CardMovementUpdateManyWithWhereWithoutCardInput>>;
  upsert?: InputMaybe<Array<CardMovementUpsertWithWhereUniqueWithoutCardInput>>;
};

export type CardMovementUncheckedUpdateManyWithoutFromColumnInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  toColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updateBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateManyWithoutFromColumnNestedInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutFromColumnInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutFromColumnInput>>;
  createMany?: InputMaybe<CardMovementCreateManyFromColumnInputEnvelope>;
  delete?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardMovementScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  set?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  update?: InputMaybe<Array<CardMovementUpdateWithWhereUniqueWithoutFromColumnInput>>;
  updateMany?: InputMaybe<Array<CardMovementUpdateManyWithWhereWithoutFromColumnInput>>;
  upsert?: InputMaybe<Array<CardMovementUpsertWithWhereUniqueWithoutFromColumnInput>>;
};

export type CardMovementUncheckedUpdateManyWithoutToColumnInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fromColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updateBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateManyWithoutToColumnNestedInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutToColumnInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutToColumnInput>>;
  createMany?: InputMaybe<CardMovementCreateManyToColumnInputEnvelope>;
  delete?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardMovementScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  set?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  update?: InputMaybe<Array<CardMovementUpdateWithWhereUniqueWithoutToColumnInput>>;
  updateMany?: InputMaybe<Array<CardMovementUpdateManyWithWhereWithoutToColumnInput>>;
  upsert?: InputMaybe<Array<CardMovementUpsertWithWhereUniqueWithoutToColumnInput>>;
};

export type CardMovementUncheckedUpdateManyWithoutUserInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fromColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  toColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardMovementCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardMovementScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  set?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  update?: InputMaybe<Array<CardMovementUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<CardMovementUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<CardMovementUpsertWithWhereUniqueWithoutUserInput>>;
};

export type CardMovementUncheckedUpdateWithoutCardInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fromColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  toColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updateBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateWithoutFromColumnInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  toColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updateBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateWithoutToColumnInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fromColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updateBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardMovementUncheckedUpdateWithoutUserInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fromColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  toColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type CardMovementUpdateManyWithWhereWithoutCardInput = {
  data: CardMovementUncheckedUpdateManyWithoutCardInput;
  where: CardMovementScalarWhereInput;
};

export type CardMovementUpdateManyWithWhereWithoutFromColumnInput = {
  data: CardMovementUncheckedUpdateManyWithoutFromColumnInput;
  where: CardMovementScalarWhereInput;
};

export type CardMovementUpdateManyWithWhereWithoutToColumnInput = {
  data: CardMovementUncheckedUpdateManyWithoutToColumnInput;
  where: CardMovementScalarWhereInput;
};

export type CardMovementUpdateManyWithWhereWithoutUserInput = {
  data: CardMovementUncheckedUpdateManyWithoutUserInput;
  where: CardMovementScalarWhereInput;
};

export type CardMovementUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardMovementCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CardMovementCreateWithoutUserInput>>;
  createMany?: InputMaybe<CardMovementCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardMovementScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  set?: InputMaybe<Array<CardMovementWhereUniqueInput>>;
  update?: InputMaybe<Array<CardMovementUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<CardMovementUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<CardMovementUpsertWithWhereUniqueWithoutUserInput>>;
};

export type CardMovementUpdateWithWhereUniqueWithoutCardInput = {
  data: CardMovementUncheckedUpdateWithoutCardInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementUpdateWithWhereUniqueWithoutFromColumnInput = {
  data: CardMovementUncheckedUpdateWithoutFromColumnInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementUpdateWithWhereUniqueWithoutToColumnInput = {
  data: CardMovementUncheckedUpdateWithoutToColumnInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementUpdateWithWhereUniqueWithoutUserInput = {
  data: CardMovementUncheckedUpdateWithoutUserInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementUpsertWithWhereUniqueWithoutCardInput = {
  create: CardMovementUncheckedCreateWithoutCardInput;
  update: CardMovementUncheckedUpdateWithoutCardInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementUpsertWithWhereUniqueWithoutFromColumnInput = {
  create: CardMovementUncheckedCreateWithoutFromColumnInput;
  update: CardMovementUncheckedUpdateWithoutFromColumnInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementUpsertWithWhereUniqueWithoutToColumnInput = {
  create: CardMovementUncheckedCreateWithoutToColumnInput;
  update: CardMovementUncheckedUpdateWithoutToColumnInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementUpsertWithWhereUniqueWithoutUserInput = {
  create: CardMovementUncheckedCreateWithoutUserInput;
  update: CardMovementUncheckedUpdateWithoutUserInput;
  where: CardMovementWhereUniqueInput;
};

export type CardMovementWhereInput = {
  AND?: InputMaybe<Array<CardMovementWhereInput>>;
  NOT?: InputMaybe<Array<CardMovementWhereInput>>;
  OR?: InputMaybe<Array<CardMovementWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  cardId?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  fromColumn?: InputMaybe<ColumnRelationFilter>;
  fromColumnId?: InputMaybe<IntFilter>;
  id?: InputMaybe<IntFilter>;
  toColumn?: InputMaybe<ColumnRelationFilter>;
  toColumnId?: InputMaybe<IntFilter>;
  updateBy?: InputMaybe<UuidNullableFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type CardMovementWhereUniqueInput = {
  AND?: InputMaybe<Array<CardMovementWhereInput>>;
  NOT?: InputMaybe<Array<CardMovementWhereInput>>;
  OR?: InputMaybe<Array<CardMovementWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  cardId?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  fromColumn?: InputMaybe<ColumnRelationFilter>;
  fromColumnId?: InputMaybe<IntFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  toColumn?: InputMaybe<ColumnRelationFilter>;
  toColumnId?: InputMaybe<IntFilter>;
  updateBy?: InputMaybe<UuidNullableFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type CardOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CardOrderByWithAggregationInput = {
  _avg?: InputMaybe<CardAvgOrderByAggregateInput>;
  _count?: InputMaybe<CardCountOrderByAggregateInput>;
  _max?: InputMaybe<CardMaxOrderByAggregateInput>;
  _min?: InputMaybe<CardMinOrderByAggregateInput>;
  _sum?: InputMaybe<CardSumOrderByAggregateInput>;
  appointment?: InputMaybe<SortOrderInput>;
  columnId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  description?: InputMaybe<SortOrder>;
  hasHistoryModified?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isOpen?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  priority?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
};

export type CardOrderByWithRelationInput = {
  appointment?: InputMaybe<SortOrderInput>;
  cardAssignment?: InputMaybe<CardAssignmentOrderByRelationAggregateInput>;
  cardComment?: InputMaybe<CardCommentOrderByRelationAggregateInput>;
  cardTags?: InputMaybe<CardTagsOrderByRelationAggregateInput>;
  column?: InputMaybe<ColumnOrderByWithRelationInput>;
  columnId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  description?: InputMaybe<SortOrder>;
  fieldValue?: InputMaybe<FieldsValueOrderByRelationAggregateInput>;
  hasHistoryModified?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  isOpen?: InputMaybe<SortOrder>;
  moviment?: InputMaybe<CardMovementOrderByRelationAggregateInput>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  priority?: InputMaybe<SortOrder>;
  tags?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
  updatedByUser?: InputMaybe<UserOrderByWithRelationInput>;
};

export type CardRelationFilter = {
  is?: InputMaybe<CardWhereInput>;
  isNot?: InputMaybe<CardWhereInput>;
};

export enum CardScalarFieldEnum {
  Appointment = 'appointment',
  ColumnId = 'columnId',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Description = 'description',
  HasHistoryModified = 'hasHistoryModified',
  Id = 'id',
  IsOpen = 'isOpen',
  Name = 'name',
  Order = 'order',
  Priority = 'priority',
  Tags = 'tags',
  UpdatedAt = 'updatedAt',
  UpdatedBy = 'updatedBy'
}

export type CardScalarWhereInput = {
  AND?: InputMaybe<Array<CardScalarWhereInput>>;
  NOT?: InputMaybe<Array<CardScalarWhereInput>>;
  OR?: InputMaybe<Array<CardScalarWhereInput>>;
  appointment?: InputMaybe<DateTimeNullableFilter>;
  columnId?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringFilter>;
  hasHistoryModified?: InputMaybe<BoolFilter>;
  id?: InputMaybe<StringFilter>;
  isOpen?: InputMaybe<BoolFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  priority?: InputMaybe<FloatFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
};

export type CardScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CardScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CardScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CardScalarWhereWithAggregatesInput>>;
  appointment?: InputMaybe<DateTimeNullableWithAggregatesFilter>;
  columnId?: InputMaybe<IntWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  description?: InputMaybe<StringWithAggregatesFilter>;
  hasHistoryModified?: InputMaybe<BoolWithAggregatesFilter>;
  id?: InputMaybe<StringWithAggregatesFilter>;
  isOpen?: InputMaybe<BoolWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  order?: InputMaybe<IntWithAggregatesFilter>;
  priority?: InputMaybe<FloatWithAggregatesFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export type CardSumAggregate = {
  __typename?: 'CardSumAggregate';
  columnId?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  priority?: Maybe<Scalars['Float']['output']>;
};

export type CardSumOrderByAggregateInput = {
  columnId?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  priority?: InputMaybe<SortOrder>;
};

export type CardTags = {
  __typename?: 'CardTags';
  card: Card;
  cardId: Scalars['String']['output'];
  tag: Tag;
  tagId: Scalars['Int']['output'];
};

export type CardTagsAvgAggregate = {
  __typename?: 'CardTagsAvgAggregate';
  tagId?: Maybe<Scalars['Float']['output']>;
};

export type CardTagsAvgOrderByAggregateInput = {
  tagId?: InputMaybe<SortOrder>;
};

export type CardTagsCardIdTagIdCompoundUniqueInput = {
  cardId: Scalars['String']['input'];
  tagId: Scalars['Int']['input'];
};

export type CardTagsCountAggregate = {
  __typename?: 'CardTagsCountAggregate';
  _all: Scalars['Int']['output'];
  cardId: Scalars['Int']['output'];
  tagId: Scalars['Int']['output'];
};

export type CardTagsCountOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  tagId?: InputMaybe<SortOrder>;
};

export type CardTagsCreateManyCardInput = {
  tagId: Scalars['Int']['input'];
};

export type CardTagsCreateManyCardInputEnvelope = {
  data: Array<CardTagsCreateManyCardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardTagsCreateManyInput = {
  cardId: Scalars['String']['input'];
  tagId: Scalars['Int']['input'];
};

export type CardTagsCreateManyTagInput = {
  cardId: Scalars['String']['input'];
};

export type CardTagsCreateManyTagInputEnvelope = {
  data: Array<CardTagsCreateManyTagInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CardTagsCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardTagsCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardTagsCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardTagsCreateManyCardInputEnvelope>;
};

export type CardTagsCreateNestedManyWithoutTagInput = {
  connect?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardTagsCreateOrConnectWithoutTagInput>>;
  create?: InputMaybe<Array<CardTagsCreateWithoutTagInput>>;
  createMany?: InputMaybe<CardTagsCreateManyTagInputEnvelope>;
};

export type CardTagsCreateOrConnectWithoutCardInput = {
  create: CardTagsUncheckedCreateWithoutCardInput;
  where: CardTagsWhereUniqueInput;
};

export type CardTagsCreateOrConnectWithoutTagInput = {
  create: CardTagsUncheckedCreateWithoutTagInput;
  where: CardTagsWhereUniqueInput;
};

export type CardTagsCreateWithoutCardInput = {
  tag: TagCreateNestedOneWithoutCardTagsInput;
};

export type CardTagsCreateWithoutTagInput = {
  card: CardCreateNestedOneWithoutCardTagsInput;
};

export type CardTagsGroupBy = {
  __typename?: 'CardTagsGroupBy';
  _avg?: Maybe<CardTagsAvgAggregate>;
  _count?: Maybe<CardTagsCountAggregate>;
  _max?: Maybe<CardTagsMaxAggregate>;
  _min?: Maybe<CardTagsMinAggregate>;
  _sum?: Maybe<CardTagsSumAggregate>;
  cardId: Scalars['String']['output'];
  tagId: Scalars['Int']['output'];
};

export type CardTagsListRelationFilter = {
  every?: InputMaybe<CardTagsWhereInput>;
  none?: InputMaybe<CardTagsWhereInput>;
  some?: InputMaybe<CardTagsWhereInput>;
};

export type CardTagsMaxAggregate = {
  __typename?: 'CardTagsMaxAggregate';
  cardId?: Maybe<Scalars['String']['output']>;
  tagId?: Maybe<Scalars['Int']['output']>;
};

export type CardTagsMaxOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  tagId?: InputMaybe<SortOrder>;
};

export type CardTagsMinAggregate = {
  __typename?: 'CardTagsMinAggregate';
  cardId?: Maybe<Scalars['String']['output']>;
  tagId?: Maybe<Scalars['Int']['output']>;
};

export type CardTagsMinOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  tagId?: InputMaybe<SortOrder>;
};

export type CardTagsOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CardTagsOrderByWithAggregationInput = {
  _avg?: InputMaybe<CardTagsAvgOrderByAggregateInput>;
  _count?: InputMaybe<CardTagsCountOrderByAggregateInput>;
  _max?: InputMaybe<CardTagsMaxOrderByAggregateInput>;
  _min?: InputMaybe<CardTagsMinOrderByAggregateInput>;
  _sum?: InputMaybe<CardTagsSumOrderByAggregateInput>;
  cardId?: InputMaybe<SortOrder>;
  tagId?: InputMaybe<SortOrder>;
};

export type CardTagsOrderByWithRelationInput = {
  card?: InputMaybe<CardOrderByWithRelationInput>;
  cardId?: InputMaybe<SortOrder>;
  tag?: InputMaybe<TagOrderByWithRelationInput>;
  tagId?: InputMaybe<SortOrder>;
};

export enum CardTagsScalarFieldEnum {
  CardId = 'cardId',
  TagId = 'tagId'
}

export type CardTagsScalarWhereInput = {
  AND?: InputMaybe<Array<CardTagsScalarWhereInput>>;
  NOT?: InputMaybe<Array<CardTagsScalarWhereInput>>;
  OR?: InputMaybe<Array<CardTagsScalarWhereInput>>;
  cardId?: InputMaybe<StringFilter>;
  tagId?: InputMaybe<IntFilter>;
};

export type CardTagsScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CardTagsScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CardTagsScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CardTagsScalarWhereWithAggregatesInput>>;
  cardId?: InputMaybe<StringWithAggregatesFilter>;
  tagId?: InputMaybe<IntWithAggregatesFilter>;
};

export type CardTagsSumAggregate = {
  __typename?: 'CardTagsSumAggregate';
  tagId?: Maybe<Scalars['Int']['output']>;
};

export type CardTagsSumOrderByAggregateInput = {
  tagId?: InputMaybe<SortOrder>;
};

export type CardTagsUncheckedCreateInput = {
  cardId: Scalars['String']['input'];
  tagId: Scalars['Int']['input'];
};

export type CardTagsUncheckedCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardTagsCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardTagsCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardTagsCreateManyCardInputEnvelope>;
};

export type CardTagsUncheckedCreateNestedManyWithoutTagInput = {
  connect?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardTagsCreateOrConnectWithoutTagInput>>;
  create?: InputMaybe<Array<CardTagsCreateWithoutTagInput>>;
  createMany?: InputMaybe<CardTagsCreateManyTagInputEnvelope>;
};

export type CardTagsUncheckedCreateWithoutCardInput = {
  tagId: Scalars['Int']['input'];
};

export type CardTagsUncheckedCreateWithoutTagInput = {
  cardId: Scalars['String']['input'];
};

export type CardTagsUncheckedUpdateInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  tagId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type CardTagsUncheckedUpdateManyInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  tagId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type CardTagsUncheckedUpdateManyWithoutCardInput = {
  tagId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type CardTagsUncheckedUpdateManyWithoutCardNestedInput = {
  connect?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardTagsCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<CardTagsCreateWithoutCardInput>>;
  createMany?: InputMaybe<CardTagsCreateManyCardInputEnvelope>;
  delete?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardTagsScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  set?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  update?: InputMaybe<Array<CardTagsUpdateWithWhereUniqueWithoutCardInput>>;
  updateMany?: InputMaybe<Array<CardTagsUpdateManyWithWhereWithoutCardInput>>;
  upsert?: InputMaybe<Array<CardTagsUpsertWithWhereUniqueWithoutCardInput>>;
};

export type CardTagsUncheckedUpdateManyWithoutTagInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardTagsUncheckedUpdateManyWithoutTagNestedInput = {
  connect?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardTagsCreateOrConnectWithoutTagInput>>;
  create?: InputMaybe<Array<CardTagsCreateWithoutTagInput>>;
  createMany?: InputMaybe<CardTagsCreateManyTagInputEnvelope>;
  delete?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardTagsScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  set?: InputMaybe<Array<CardTagsWhereUniqueInput>>;
  update?: InputMaybe<Array<CardTagsUpdateWithWhereUniqueWithoutTagInput>>;
  updateMany?: InputMaybe<Array<CardTagsUpdateManyWithWhereWithoutTagInput>>;
  upsert?: InputMaybe<Array<CardTagsUpsertWithWhereUniqueWithoutTagInput>>;
};

export type CardTagsUncheckedUpdateWithoutCardInput = {
  tagId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type CardTagsUncheckedUpdateWithoutTagInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type CardTagsUpdateManyWithWhereWithoutCardInput = {
  data: CardTagsUncheckedUpdateManyWithoutCardInput;
  where: CardTagsScalarWhereInput;
};

export type CardTagsUpdateManyWithWhereWithoutTagInput = {
  data: CardTagsUncheckedUpdateManyWithoutTagInput;
  where: CardTagsScalarWhereInput;
};

export type CardTagsUpdateWithWhereUniqueWithoutCardInput = {
  data: CardTagsUncheckedUpdateWithoutCardInput;
  where: CardTagsWhereUniqueInput;
};

export type CardTagsUpdateWithWhereUniqueWithoutTagInput = {
  data: CardTagsUncheckedUpdateWithoutTagInput;
  where: CardTagsWhereUniqueInput;
};

export type CardTagsUpsertWithWhereUniqueWithoutCardInput = {
  create: CardTagsUncheckedCreateWithoutCardInput;
  update: CardTagsUncheckedUpdateWithoutCardInput;
  where: CardTagsWhereUniqueInput;
};

export type CardTagsUpsertWithWhereUniqueWithoutTagInput = {
  create: CardTagsUncheckedCreateWithoutTagInput;
  update: CardTagsUncheckedUpdateWithoutTagInput;
  where: CardTagsWhereUniqueInput;
};

export type CardTagsWhereInput = {
  AND?: InputMaybe<Array<CardTagsWhereInput>>;
  NOT?: InputMaybe<Array<CardTagsWhereInput>>;
  OR?: InputMaybe<Array<CardTagsWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  cardId?: InputMaybe<StringFilter>;
  tag?: InputMaybe<TagRelationFilter>;
  tagId?: InputMaybe<IntFilter>;
};

export type CardTagsWhereUniqueInput = {
  AND?: InputMaybe<Array<CardTagsWhereInput>>;
  NOT?: InputMaybe<Array<CardTagsWhereInput>>;
  OR?: InputMaybe<Array<CardTagsWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  cardId?: InputMaybe<StringFilter>;
  cardId_tagId?: InputMaybe<CardTagsCardIdTagIdCompoundUniqueInput>;
  tag?: InputMaybe<TagRelationFilter>;
  tagId?: InputMaybe<IntFilter>;
};

export type CardUncheckedCreateInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutCardInput>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardUncheckedCreateNestedManyWithoutColumnInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutColumnInput>>;
  create?: InputMaybe<Array<CardCreateWithoutColumnInput>>;
  createMany?: InputMaybe<CardCreateManyColumnInputEnvelope>;
};

export type CardUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<CardCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<CardCreateManyCreatedByUserInputEnvelope>;
};

export type CardUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<CardCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<CardCreateManyUpdatedByUserInputEnvelope>;
};

export type CardUncheckedCreateWithoutCardAssignmentInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutCardInput>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardUncheckedCreateWithoutCardCommentInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutCardInput>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardUncheckedCreateWithoutCardTagsInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutCardInput>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardUncheckedCreateWithoutColumnInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutCardInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardUncheckedCreateWithoutCreatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutCardInput>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardUncheckedCreateWithoutFieldValueInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutCardInput>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardUncheckedCreateWithoutMovimentInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutCardInput>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type CardUncheckedCreateWithoutUpdatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutCardInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutCardInput>;
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutCardInput>;
  columnId: Scalars['Int']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutCardInput>;
  hasHistoryModified?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<Scalars['Boolean']['input']>;
  moviment?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutCardInput>;
  name: Scalars['String']['input'];
  order: Scalars['Int']['input'];
  priority?: InputMaybe<Scalars['Float']['input']>;
  tags?: InputMaybe<CardCreatetagsInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CardUncheckedUpdateInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedUpdateManyWithoutCardNestedInput>;
  cardComment?: InputMaybe<CardCommentUncheckedUpdateManyWithoutCardNestedInput>;
  cardTags?: InputMaybe<CardTagsUncheckedUpdateManyWithoutCardNestedInput>;
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutCardNestedInput>;
  hasHistoryModified?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isOpen?: InputMaybe<BoolFieldUpdateOperationsInput>;
  moviment?: InputMaybe<CardMovementUncheckedUpdateManyWithoutCardNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<FloatFieldUpdateOperationsInput>;
  tags?: InputMaybe<CardUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardUncheckedUpdateManyInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  hasHistoryModified?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isOpen?: InputMaybe<BoolFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<FloatFieldUpdateOperationsInput>;
  tags?: InputMaybe<CardUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardUncheckedUpdateManyWithoutColumnInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  hasHistoryModified?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isOpen?: InputMaybe<BoolFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<FloatFieldUpdateOperationsInput>;
  tags?: InputMaybe<CardUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardUncheckedUpdateManyWithoutColumnNestedInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutColumnInput>>;
  create?: InputMaybe<Array<CardCreateWithoutColumnInput>>;
  createMany?: InputMaybe<CardCreateManyColumnInputEnvelope>;
  delete?: InputMaybe<Array<CardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardWhereUniqueInput>>;
  set?: InputMaybe<Array<CardWhereUniqueInput>>;
  update?: InputMaybe<Array<CardUpdateWithWhereUniqueWithoutColumnInput>>;
  updateMany?: InputMaybe<Array<CardUpdateManyWithWhereWithoutColumnInput>>;
  upsert?: InputMaybe<Array<CardUpsertWithWhereUniqueWithoutColumnInput>>;
};

export type CardUncheckedUpdateManyWithoutCreatedByUserInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  hasHistoryModified?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isOpen?: InputMaybe<BoolFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<FloatFieldUpdateOperationsInput>;
  tags?: InputMaybe<CardUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<CardCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<CardCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<CardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardWhereUniqueInput>>;
  set?: InputMaybe<Array<CardWhereUniqueInput>>;
  update?: InputMaybe<Array<CardUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<CardUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<CardUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type CardUncheckedUpdateManyWithoutUpdatedByUserInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  hasHistoryModified?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isOpen?: InputMaybe<BoolFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<FloatFieldUpdateOperationsInput>;
  tags?: InputMaybe<CardUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CardUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<CardCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<CardCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<CardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardWhereUniqueInput>>;
  set?: InputMaybe<Array<CardWhereUniqueInput>>;
  update?: InputMaybe<Array<CardUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<CardUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<CardUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type CardUncheckedUpdateWithoutColumnInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedUpdateManyWithoutCardNestedInput>;
  cardComment?: InputMaybe<CardCommentUncheckedUpdateManyWithoutCardNestedInput>;
  cardTags?: InputMaybe<CardTagsUncheckedUpdateManyWithoutCardNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutCardNestedInput>;
  hasHistoryModified?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isOpen?: InputMaybe<BoolFieldUpdateOperationsInput>;
  moviment?: InputMaybe<CardMovementUncheckedUpdateManyWithoutCardNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<FloatFieldUpdateOperationsInput>;
  tags?: InputMaybe<CardUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardUncheckedUpdateWithoutCreatedByUserInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedUpdateManyWithoutCardNestedInput>;
  cardComment?: InputMaybe<CardCommentUncheckedUpdateManyWithoutCardNestedInput>;
  cardTags?: InputMaybe<CardTagsUncheckedUpdateManyWithoutCardNestedInput>;
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutCardNestedInput>;
  hasHistoryModified?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isOpen?: InputMaybe<BoolFieldUpdateOperationsInput>;
  moviment?: InputMaybe<CardMovementUncheckedUpdateManyWithoutCardNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<FloatFieldUpdateOperationsInput>;
  tags?: InputMaybe<CardUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type CardUncheckedUpdateWithoutUpdatedByUserInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedUpdateManyWithoutCardNestedInput>;
  cardComment?: InputMaybe<CardCommentUncheckedUpdateManyWithoutCardNestedInput>;
  cardTags?: InputMaybe<CardTagsUncheckedUpdateManyWithoutCardNestedInput>;
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutCardNestedInput>;
  hasHistoryModified?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<StringFieldUpdateOperationsInput>;
  isOpen?: InputMaybe<BoolFieldUpdateOperationsInput>;
  moviment?: InputMaybe<CardMovementUncheckedUpdateManyWithoutCardNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  priority?: InputMaybe<FloatFieldUpdateOperationsInput>;
  tags?: InputMaybe<CardUpdatetagsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CardUpdateManyWithWhereWithoutColumnInput = {
  data: CardUncheckedUpdateManyWithoutColumnInput;
  where: CardScalarWhereInput;
};

export type CardUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: CardUncheckedUpdateManyWithoutCreatedByUserInput;
  where: CardScalarWhereInput;
};

export type CardUpdateManyWithWhereWithoutUpdatedByUserInput = {
  data: CardUncheckedUpdateManyWithoutUpdatedByUserInput;
  where: CardScalarWhereInput;
};

export type CardUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<CardCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<CardCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<CardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardWhereUniqueInput>>;
  set?: InputMaybe<Array<CardWhereUniqueInput>>;
  update?: InputMaybe<Array<CardUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<CardUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<CardUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type CardUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<CardWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CardCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<CardCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<CardCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<CardWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CardScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CardWhereUniqueInput>>;
  set?: InputMaybe<Array<CardWhereUniqueInput>>;
  update?: InputMaybe<Array<CardUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<CardUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<CardUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type CardUpdateWithWhereUniqueWithoutColumnInput = {
  data: CardUncheckedUpdateWithoutColumnInput;
  where: CardWhereUniqueInput;
};

export type CardUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: CardUncheckedUpdateWithoutCreatedByUserInput;
  where: CardWhereUniqueInput;
};

export type CardUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
  data: CardUncheckedUpdateWithoutUpdatedByUserInput;
  where: CardWhereUniqueInput;
};

export type CardUpdatetagsInput = {
  push?: InputMaybe<Array<Scalars['String']['input']>>;
  set?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type CardUpsertWithWhereUniqueWithoutColumnInput = {
  create: CardUncheckedCreateWithoutColumnInput;
  update: CardUncheckedUpdateWithoutColumnInput;
  where: CardWhereUniqueInput;
};

export type CardUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: CardUncheckedCreateWithoutCreatedByUserInput;
  update: CardUncheckedUpdateWithoutCreatedByUserInput;
  where: CardWhereUniqueInput;
};

export type CardUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
  create: CardUncheckedCreateWithoutUpdatedByUserInput;
  update: CardUncheckedUpdateWithoutUpdatedByUserInput;
  where: CardWhereUniqueInput;
};

export type CardWhereInput = {
  AND?: InputMaybe<Array<CardWhereInput>>;
  NOT?: InputMaybe<Array<CardWhereInput>>;
  OR?: InputMaybe<Array<CardWhereInput>>;
  appointment?: InputMaybe<DateTimeNullableFilter>;
  cardAssignment?: InputMaybe<CardAssignmentListRelationFilter>;
  cardComment?: InputMaybe<CardCommentListRelationFilter>;
  cardTags?: InputMaybe<CardTagsListRelationFilter>;
  column?: InputMaybe<ColumnRelationFilter>;
  columnId?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  description?: InputMaybe<StringFilter>;
  fieldValue?: InputMaybe<FieldsValueListRelationFilter>;
  hasHistoryModified?: InputMaybe<BoolFilter>;
  id?: InputMaybe<StringFilter>;
  isOpen?: InputMaybe<BoolFilter>;
  moviment?: InputMaybe<CardMovementListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  priority?: InputMaybe<FloatFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
};

export type CardWhereUniqueInput = {
  AND?: InputMaybe<Array<CardWhereInput>>;
  NOT?: InputMaybe<Array<CardWhereInput>>;
  OR?: InputMaybe<Array<CardWhereInput>>;
  appointment?: InputMaybe<DateTimeNullableFilter>;
  cardAssignment?: InputMaybe<CardAssignmentListRelationFilter>;
  cardComment?: InputMaybe<CardCommentListRelationFilter>;
  cardTags?: InputMaybe<CardTagsListRelationFilter>;
  column?: InputMaybe<ColumnRelationFilter>;
  columnId?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  description?: InputMaybe<StringFilter>;
  fieldValue?: InputMaybe<FieldsValueListRelationFilter>;
  hasHistoryModified?: InputMaybe<BoolFilter>;
  id?: InputMaybe<Scalars['String']['input']>;
  isOpen?: InputMaybe<BoolFilter>;
  moviment?: InputMaybe<CardMovementListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  priority?: InputMaybe<FloatFilter>;
  tags?: InputMaybe<StringNullableListFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
};

export type ChangeUser = {
  password: Scalars['String']['input'];
  token: Scalars['String']['input'];
};

export type Client = {
  __typename?: 'Client';
  Csat: Array<Csat>;
  Qnp: Array<Qnp>;
  _count?: Maybe<ClientCount>;
  cnpj: Scalars['String']['output'];
  content?: Maybe<Scalars['JSON']['output']>;
  cpf?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  project: Array<Project>;
  user: User;
  userUuid: Scalars['String']['output'];
};


export type ClientCsatArgs = {
  cursor?: InputMaybe<CsatWhereUniqueInput>;
  distinct?: InputMaybe<Array<CsatScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CsatOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CsatWhereInput>;
};


export type ClientQnpArgs = {
  cursor?: InputMaybe<QnpWhereUniqueInput>;
  distinct?: InputMaybe<Array<QnpScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<QnpOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<QnpWhereInput>;
};


export type ClientProjectArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};

export type ClientAvgAggregate = {
  __typename?: 'ClientAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type ClientAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type ClientCount = {
  __typename?: 'ClientCount';
  Csat: Scalars['Int']['output'];
  Qnp: Scalars['Int']['output'];
  project: Scalars['Int']['output'];
};


export type ClientCountCsatArgs = {
  where?: InputMaybe<CsatWhereInput>;
};


export type ClientCountQnpArgs = {
  where?: InputMaybe<QnpWhereInput>;
};


export type ClientCountProjectArgs = {
  where?: InputMaybe<ProjectWhereInput>;
};

export type ClientCountAggregate = {
  __typename?: 'ClientCountAggregate';
  _all: Scalars['Int']['output'];
  cnpj: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  cpf: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type ClientCountOrderByAggregateInput = {
  cnpj?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  cpf?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ClientCreateManyInput = {
  cnpj?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type ClientCreateManyUserInput = {
  cnpj?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type ClientCreateManyUserInputEnvelope = {
  data: Array<ClientCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ClientCreateNestedOneWithoutProjectInput = {
  connect?: InputMaybe<ClientWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ClientCreateOrConnectWithoutProjectInput>;
  create?: InputMaybe<ClientUncheckedCreateWithoutProjectInput>;
};

export type ClientCreateOrConnectWithoutProjectInput = {
  create: ClientUncheckedCreateWithoutProjectInput;
  where: ClientWhereUniqueInput;
};

export type ClientCreateOrConnectWithoutUserInput = {
  create: ClientUncheckedCreateWithoutUserInput;
  where: ClientWhereUniqueInput;
};

export type ClientCreateWithoutUserInput = {
  Csat?: InputMaybe<CsatCreateNestedManyWithoutClientInput>;
  Qnp?: InputMaybe<QnpCreateNestedManyWithoutClientInput>;
  cnpj?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<Scalars['String']['input']>;
  project?: InputMaybe<ProjectCreateNestedManyWithoutClientInput>;
};

export type ClientGroupBy = {
  __typename?: 'ClientGroupBy';
  _avg?: Maybe<ClientAvgAggregate>;
  _count?: Maybe<ClientCountAggregate>;
  _max?: Maybe<ClientMaxAggregate>;
  _min?: Maybe<ClientMinAggregate>;
  _sum?: Maybe<ClientSumAggregate>;
  cnpj: Scalars['String']['output'];
  content?: Maybe<Scalars['JSON']['output']>;
  cpf?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  userUuid: Scalars['String']['output'];
};

export type ClientListRelationFilter = {
  every?: InputMaybe<ClientWhereInput>;
  none?: InputMaybe<ClientWhereInput>;
  some?: InputMaybe<ClientWhereInput>;
};

export type ClientMaxAggregate = {
  __typename?: 'ClientMaxAggregate';
  cnpj?: Maybe<Scalars['String']['output']>;
  cpf?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type ClientMaxOrderByAggregateInput = {
  cnpj?: InputMaybe<SortOrder>;
  cpf?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ClientMinAggregate = {
  __typename?: 'ClientMinAggregate';
  cnpj?: Maybe<Scalars['String']['output']>;
  cpf?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type ClientMinOrderByAggregateInput = {
  cnpj?: InputMaybe<SortOrder>;
  cpf?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ClientNullableRelationFilter = {
  is?: InputMaybe<ClientWhereInput>;
  isNot?: InputMaybe<ClientWhereInput>;
};

export type ClientOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ClientOrderByWithAggregationInput = {
  _avg?: InputMaybe<ClientAvgOrderByAggregateInput>;
  _count?: InputMaybe<ClientCountOrderByAggregateInput>;
  _max?: InputMaybe<ClientMaxOrderByAggregateInput>;
  _min?: InputMaybe<ClientMinOrderByAggregateInput>;
  _sum?: InputMaybe<ClientSumOrderByAggregateInput>;
  cnpj?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrderInput>;
  cpf?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ClientOrderByWithRelationInput = {
  Csat?: InputMaybe<CsatOrderByRelationAggregateInput>;
  Qnp?: InputMaybe<QnpOrderByRelationAggregateInput>;
  cnpj?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrderInput>;
  cpf?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByRelationAggregateInput>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ClientRelationFilter = {
  is?: InputMaybe<ClientWhereInput>;
  isNot?: InputMaybe<ClientWhereInput>;
};

export enum ClientScalarFieldEnum {
  Cnpj = 'cnpj',
  Content = 'content',
  Cpf = 'cpf',
  Id = 'id',
  UserUuid = 'userUuid'
}

export type ClientScalarWhereInput = {
  AND?: InputMaybe<Array<ClientScalarWhereInput>>;
  NOT?: InputMaybe<Array<ClientScalarWhereInput>>;
  OR?: InputMaybe<Array<ClientScalarWhereInput>>;
  cnpj?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  cpf?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IntFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type ClientScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ClientScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ClientScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ClientScalarWhereWithAggregatesInput>>;
  cnpj?: InputMaybe<StringWithAggregatesFilter>;
  content?: InputMaybe<JsonNullableWithAggregatesFilter>;
  cpf?: InputMaybe<StringNullableWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type ClientSumAggregate = {
  __typename?: 'ClientSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type ClientSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type ClientUncheckedCreateInput = {
  Csat?: InputMaybe<CsatUncheckedCreateNestedManyWithoutClientInput>;
  Qnp?: InputMaybe<QnpUncheckedCreateNestedManyWithoutClientInput>;
  cnpj?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutClientInput>;
  userUuid: Scalars['String']['input'];
};

export type ClientUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<ClientWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClientCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ClientCreateWithoutUserInput>>;
  createMany?: InputMaybe<ClientCreateManyUserInputEnvelope>;
};

export type ClientUncheckedCreateWithoutProjectInput = {
  Csat?: InputMaybe<CsatUncheckedCreateNestedManyWithoutClientInput>;
  Qnp?: InputMaybe<QnpUncheckedCreateNestedManyWithoutClientInput>;
  cnpj?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type ClientUncheckedCreateWithoutUserInput = {
  Csat?: InputMaybe<CsatUncheckedCreateNestedManyWithoutClientInput>;
  Qnp?: InputMaybe<QnpUncheckedCreateNestedManyWithoutClientInput>;
  cnpj?: InputMaybe<Scalars['String']['input']>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutClientInput>;
};

export type ClientUncheckedUpdateInput = {
  Csat?: InputMaybe<CsatUncheckedUpdateManyWithoutClientNestedInput>;
  Qnp?: InputMaybe<QnpUncheckedUpdateManyWithoutClientNestedInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  project?: InputMaybe<ProjectUncheckedUpdateManyWithoutClientNestedInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ClientUncheckedUpdateManyInput = {
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ClientUncheckedUpdateManyWithoutUserInput = {
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ClientUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<ClientWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClientCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ClientCreateWithoutUserInput>>;
  createMany?: InputMaybe<ClientCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<ClientWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClientScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClientWhereUniqueInput>>;
  set?: InputMaybe<Array<ClientWhereUniqueInput>>;
  update?: InputMaybe<Array<ClientUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<ClientUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<ClientUpsertWithWhereUniqueWithoutUserInput>>;
};

export type ClientUncheckedUpdateWithoutUserInput = {
  Csat?: InputMaybe<CsatUncheckedUpdateManyWithoutClientNestedInput>;
  Qnp?: InputMaybe<QnpUncheckedUpdateManyWithoutClientNestedInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  cpf?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  project?: InputMaybe<ProjectUncheckedUpdateManyWithoutClientNestedInput>;
};

export type ClientUpdateManyWithWhereWithoutUserInput = {
  data: ClientUncheckedUpdateManyWithoutUserInput;
  where: ClientScalarWhereInput;
};

export type ClientUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<ClientWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ClientCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ClientCreateWithoutUserInput>>;
  createMany?: InputMaybe<ClientCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<ClientWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ClientScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ClientWhereUniqueInput>>;
  set?: InputMaybe<Array<ClientWhereUniqueInput>>;
  update?: InputMaybe<Array<ClientUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<ClientUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<ClientUpsertWithWhereUniqueWithoutUserInput>>;
};

export type ClientUpdateWithWhereUniqueWithoutUserInput = {
  data: ClientUncheckedUpdateWithoutUserInput;
  where: ClientWhereUniqueInput;
};

export type ClientUpsertWithWhereUniqueWithoutUserInput = {
  create: ClientUncheckedCreateWithoutUserInput;
  update: ClientUncheckedUpdateWithoutUserInput;
  where: ClientWhereUniqueInput;
};

export type ClientWhereInput = {
  AND?: InputMaybe<Array<ClientWhereInput>>;
  Csat?: InputMaybe<CsatListRelationFilter>;
  NOT?: InputMaybe<Array<ClientWhereInput>>;
  OR?: InputMaybe<Array<ClientWhereInput>>;
  Qnp?: InputMaybe<QnpListRelationFilter>;
  cnpj?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  cpf?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<IntFilter>;
  project?: InputMaybe<ProjectListRelationFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type ClientWhereUniqueInput = {
  AND?: InputMaybe<Array<ClientWhereInput>>;
  Csat?: InputMaybe<CsatListRelationFilter>;
  NOT?: InputMaybe<Array<ClientWhereInput>>;
  OR?: InputMaybe<Array<ClientWhereInput>>;
  Qnp?: InputMaybe<QnpListRelationFilter>;
  cnpj?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  cpf?: InputMaybe<StringNullableFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectListRelationFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<Scalars['String']['input']>;
};

export type Column = {
  __typename?: 'Column';
  _count?: Maybe<ColumnCount>;
  board: Board;
  boardId: Scalars['String']['output'];
  card: Array<Card>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdByUser?: Maybe<User>;
  fieldValue: Array<FieldColumn>;
  id: Scalars['Int']['output'];
  linkedColumns: Array<Column>;
  linkingColumns: Array<Column>;
  movementsFrom: Array<CardMovement>;
  movementsTo: Array<CardMovement>;
  order: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
  updatedByUser?: Maybe<User>;
};


export type ColumnCardArgs = {
  cursor?: InputMaybe<CardWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardWhereInput>;
};


export type ColumnCreatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type ColumnFieldValueArgs = {
  cursor?: InputMaybe<FieldColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type ColumnLinkedColumnsArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<ColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type ColumnLinkingColumnsArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<ColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type ColumnMovementsFromArgs = {
  cursor?: InputMaybe<CardMovementWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardMovementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type ColumnMovementsToArgs = {
  cursor?: InputMaybe<CardMovementWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardMovementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type ColumnUpdatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type ColumnAvgAggregate = {
  __typename?: 'ColumnAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

export type ColumnAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
};

export type ColumnCount = {
  __typename?: 'ColumnCount';
  card: Scalars['Int']['output'];
  fieldValue: Scalars['Int']['output'];
  linkedColumns: Scalars['Int']['output'];
  linkingColumns: Scalars['Int']['output'];
  movementsFrom: Scalars['Int']['output'];
  movementsTo: Scalars['Int']['output'];
};


export type ColumnCountCardArgs = {
  where?: InputMaybe<CardWhereInput>;
};


export type ColumnCountFieldValueArgs = {
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type ColumnCountLinkedColumnsArgs = {
  where?: InputMaybe<ColumnWhereInput>;
};


export type ColumnCountLinkingColumnsArgs = {
  where?: InputMaybe<ColumnWhereInput>;
};


export type ColumnCountMovementsFromArgs = {
  where?: InputMaybe<CardMovementWhereInput>;
};


export type ColumnCountMovementsToArgs = {
  where?: InputMaybe<CardMovementWhereInput>;
};

export type ColumnCountAggregate = {
  __typename?: 'ColumnCountAggregate';
  _all: Scalars['Int']['output'];
  boardId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type ColumnCountOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ColumnCreateManyBoardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnCreateManyBoardInputEnvelope = {
  data: Array<ColumnCreateManyBoardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ColumnCreateManyCreatedByUserInput = {
  boardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnCreateManyCreatedByUserInputEnvelope = {
  data: Array<ColumnCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ColumnCreateManyInput = {
  boardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnCreateManyUpdatedByUserInput = {
  boardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ColumnCreateManyUpdatedByUserInputEnvelope = {
  data: Array<ColumnCreateManyUpdatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ColumnCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutBoardInput>>;
  createMany?: InputMaybe<ColumnCreateManyBoardInputEnvelope>;
};

export type ColumnCreateNestedManyWithoutLinkedColumnsInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutLinkedColumnsInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutLinkedColumnsInput>>;
};

export type ColumnCreateNestedManyWithoutLinkingColumnsInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutLinkingColumnsInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutLinkingColumnsInput>>;
};

export type ColumnCreateNestedOneWithoutCardInput = {
  connect?: InputMaybe<ColumnWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ColumnCreateOrConnectWithoutCardInput>;
  create?: InputMaybe<ColumnUncheckedCreateWithoutCardInput>;
};

export type ColumnCreateNestedOneWithoutFieldValueInput = {
  connect?: InputMaybe<ColumnWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ColumnCreateOrConnectWithoutFieldValueInput>;
  create?: InputMaybe<ColumnUncheckedCreateWithoutFieldValueInput>;
};

export type ColumnCreateNestedOneWithoutMovementsFromInput = {
  connect?: InputMaybe<ColumnWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ColumnCreateOrConnectWithoutMovementsFromInput>;
  create?: InputMaybe<ColumnUncheckedCreateWithoutMovementsFromInput>;
};

export type ColumnCreateNestedOneWithoutMovementsToInput = {
  connect?: InputMaybe<ColumnWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ColumnCreateOrConnectWithoutMovementsToInput>;
  create?: InputMaybe<ColumnUncheckedCreateWithoutMovementsToInput>;
};

export type ColumnCreateOrConnectWithoutBoardInput = {
  create: ColumnUncheckedCreateWithoutBoardInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateOrConnectWithoutCardInput = {
  create: ColumnUncheckedCreateWithoutCardInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateOrConnectWithoutCreatedByUserInput = {
  create: ColumnUncheckedCreateWithoutCreatedByUserInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateOrConnectWithoutFieldValueInput = {
  create: ColumnUncheckedCreateWithoutFieldValueInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateOrConnectWithoutLinkedColumnsInput = {
  create: ColumnUncheckedCreateWithoutLinkedColumnsInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateOrConnectWithoutLinkingColumnsInput = {
  create: ColumnUncheckedCreateWithoutLinkingColumnsInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateOrConnectWithoutMovementsFromInput = {
  create: ColumnUncheckedCreateWithoutMovementsFromInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateOrConnectWithoutMovementsToInput = {
  create: ColumnUncheckedCreateWithoutMovementsToInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateOrConnectWithoutUpdatedByUserInput = {
  create: ColumnUncheckedCreateWithoutUpdatedByUserInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnCreateWithoutBoardInput = {
  card?: InputMaybe<CardCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutColumnCreatedByInput>;
  fieldValue?: InputMaybe<FieldColumnCreateNestedManyWithoutColumnInput>;
  linkedColumns?: InputMaybe<ColumnCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutColumnUpdatedByInput>;
};

export type ColumnCreateWithoutCreatedByUserInput = {
  board: BoardCreateNestedOneWithoutColumnInput;
  card?: InputMaybe<CardCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fieldValue?: InputMaybe<FieldColumnCreateNestedManyWithoutColumnInput>;
  linkedColumns?: InputMaybe<ColumnCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutColumnUpdatedByInput>;
};

export type ColumnCreateWithoutLinkedColumnsInput = {
  board: BoardCreateNestedOneWithoutColumnInput;
  card?: InputMaybe<CardCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutColumnCreatedByInput>;
  fieldValue?: InputMaybe<FieldColumnCreateNestedManyWithoutColumnInput>;
  linkingColumns?: InputMaybe<ColumnCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutColumnUpdatedByInput>;
};

export type ColumnCreateWithoutLinkingColumnsInput = {
  board: BoardCreateNestedOneWithoutColumnInput;
  card?: InputMaybe<CardCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutColumnCreatedByInput>;
  fieldValue?: InputMaybe<FieldColumnCreateNestedManyWithoutColumnInput>;
  linkedColumns?: InputMaybe<ColumnCreateNestedManyWithoutLinkingColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutColumnUpdatedByInput>;
};

export type ColumnCreateWithoutUpdatedByUserInput = {
  board: BoardCreateNestedOneWithoutColumnInput;
  card?: InputMaybe<CardCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutColumnCreatedByInput>;
  fieldValue?: InputMaybe<FieldColumnCreateNestedManyWithoutColumnInput>;
  linkedColumns?: InputMaybe<ColumnCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ColumnGroupBy = {
  __typename?: 'ColumnGroupBy';
  _avg?: Maybe<ColumnAvgAggregate>;
  _count?: Maybe<ColumnCountAggregate>;
  _max?: Maybe<ColumnMaxAggregate>;
  _min?: Maybe<ColumnMinAggregate>;
  _sum?: Maybe<ColumnSumAggregate>;
  boardId: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type ColumnListRelationFilter = {
  every?: InputMaybe<ColumnWhereInput>;
  none?: InputMaybe<ColumnWhereInput>;
  some?: InputMaybe<ColumnWhereInput>;
};

export type ColumnMaxAggregate = {
  __typename?: 'ColumnMaxAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type ColumnMaxOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ColumnMinAggregate = {
  __typename?: 'ColumnMinAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type ColumnMinOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ColumnOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ColumnOrderByWithAggregationInput = {
  _avg?: InputMaybe<ColumnAvgOrderByAggregateInput>;
  _count?: InputMaybe<ColumnCountOrderByAggregateInput>;
  _max?: InputMaybe<ColumnMaxOrderByAggregateInput>;
  _min?: InputMaybe<ColumnMinOrderByAggregateInput>;
  _sum?: InputMaybe<ColumnSumOrderByAggregateInput>;
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
};

export type ColumnOrderByWithRelationInput = {
  board?: InputMaybe<BoardOrderByWithRelationInput>;
  boardId?: InputMaybe<SortOrder>;
  card?: InputMaybe<CardOrderByRelationAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  fieldValue?: InputMaybe<FieldColumnOrderByRelationAggregateInput>;
  id?: InputMaybe<SortOrder>;
  linkedColumns?: InputMaybe<ColumnOrderByRelationAggregateInput>;
  linkingColumns?: InputMaybe<ColumnOrderByRelationAggregateInput>;
  movementsFrom?: InputMaybe<CardMovementOrderByRelationAggregateInput>;
  movementsTo?: InputMaybe<CardMovementOrderByRelationAggregateInput>;
  order?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
  updatedByUser?: InputMaybe<UserOrderByWithRelationInput>;
};

export type ColumnRelationFilter = {
  is?: InputMaybe<ColumnWhereInput>;
  isNot?: InputMaybe<ColumnWhereInput>;
};

export enum ColumnScalarFieldEnum {
  BoardId = 'boardId',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Id = 'id',
  Order = 'order',
  Title = 'title',
  UpdatedAt = 'updatedAt',
  UpdatedBy = 'updatedBy'
}

export type ColumnScalarWhereInput = {
  AND?: InputMaybe<Array<ColumnScalarWhereInput>>;
  NOT?: InputMaybe<Array<ColumnScalarWhereInput>>;
  OR?: InputMaybe<Array<ColumnScalarWhereInput>>;
  boardId?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<IntFilter>;
  order?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
};

export type ColumnScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ColumnScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ColumnScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ColumnScalarWhereWithAggregatesInput>>;
  boardId?: InputMaybe<StringWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  order?: InputMaybe<IntWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export type ColumnSumAggregate = {
  __typename?: 'ColumnSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};

export type ColumnSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
};

export type ColumnUncheckedCreateInput = {
  boardId: Scalars['String']['input'];
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutBoardInput>>;
  createMany?: InputMaybe<ColumnCreateManyBoardInputEnvelope>;
};

export type ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ColumnCreateManyCreatedByUserInputEnvelope>;
};

export type ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutLinkedColumnsInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutLinkedColumnsInput>>;
};

export type ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutLinkingColumnsInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutLinkingColumnsInput>>;
};

export type ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ColumnCreateManyUpdatedByUserInputEnvelope>;
};

export type ColumnUncheckedCreateWithoutBoardInput = {
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateWithoutCardInput = {
  boardId: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateWithoutCreatedByUserInput = {
  boardId: Scalars['String']['input'];
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateWithoutFieldValueInput = {
  boardId: Scalars['String']['input'];
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateWithoutLinkedColumnsInput = {
  boardId: Scalars['String']['input'];
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateWithoutLinkingColumnsInput = {
  boardId: Scalars['String']['input'];
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateWithoutMovementsFromInput = {
  boardId: Scalars['String']['input'];
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateWithoutMovementsToInput = {
  boardId: Scalars['String']['input'];
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ColumnUncheckedCreateWithoutUpdatedByUserInput = {
  boardId: Scalars['String']['input'];
  card?: InputMaybe<CardUncheckedCreateNestedManyWithoutColumnInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldValue?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutColumnInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkingColumnsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutLinkedColumnsInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutFromColumnInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutToColumnInput>;
  order: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ColumnUncheckedUpdateInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  card?: InputMaybe<CardUncheckedUpdateManyWithoutColumnNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutColumnNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  linkedColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkingColumnsNestedInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkedColumnsNestedInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedUpdateManyWithoutFromColumnNestedInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedUpdateManyWithoutToColumnNestedInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateManyInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateManyWithoutBoardInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateManyWithoutBoardNestedInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutBoardInput>>;
  createMany?: InputMaybe<ColumnCreateManyBoardInputEnvelope>;
  delete?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<ColumnUpdateWithWhereUniqueWithoutBoardInput>>;
  updateMany?: InputMaybe<Array<ColumnUpdateManyWithWhereWithoutBoardInput>>;
  upsert?: InputMaybe<Array<ColumnUpsertWithWhereUniqueWithoutBoardInput>>;
};

export type ColumnUncheckedUpdateManyWithoutCreatedByUserInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ColumnCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<ColumnUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<ColumnUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<ColumnUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type ColumnUncheckedUpdateManyWithoutLinkedColumnsInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateManyWithoutLinkedColumnsNestedInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutLinkedColumnsInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutLinkedColumnsInput>>;
  delete?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<ColumnUpdateWithWhereUniqueWithoutLinkedColumnsInput>>;
  updateMany?: InputMaybe<Array<ColumnUpdateManyWithWhereWithoutLinkedColumnsInput>>;
  upsert?: InputMaybe<Array<ColumnUpsertWithWhereUniqueWithoutLinkedColumnsInput>>;
};

export type ColumnUncheckedUpdateManyWithoutLinkingColumnsInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateManyWithoutLinkingColumnsNestedInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutLinkingColumnsInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutLinkingColumnsInput>>;
  delete?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<ColumnUpdateWithWhereUniqueWithoutLinkingColumnsInput>>;
  updateMany?: InputMaybe<Array<ColumnUpdateManyWithWhereWithoutLinkingColumnsInput>>;
  upsert?: InputMaybe<Array<ColumnUpsertWithWhereUniqueWithoutLinkingColumnsInput>>;
};

export type ColumnUncheckedUpdateManyWithoutUpdatedByUserInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ColumnCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<ColumnUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<ColumnUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<ColumnUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type ColumnUncheckedUpdateWithoutBoardInput = {
  card?: InputMaybe<CardUncheckedUpdateManyWithoutColumnNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutColumnNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  linkedColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkingColumnsNestedInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkedColumnsNestedInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedUpdateManyWithoutFromColumnNestedInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedUpdateManyWithoutToColumnNestedInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateWithoutCreatedByUserInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  card?: InputMaybe<CardUncheckedUpdateManyWithoutColumnNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutColumnNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  linkedColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkingColumnsNestedInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkedColumnsNestedInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedUpdateManyWithoutFromColumnNestedInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedUpdateManyWithoutToColumnNestedInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateWithoutLinkedColumnsInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  card?: InputMaybe<CardUncheckedUpdateManyWithoutColumnNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutColumnNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkedColumnsNestedInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedUpdateManyWithoutFromColumnNestedInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedUpdateManyWithoutToColumnNestedInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateWithoutLinkingColumnsInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  card?: InputMaybe<CardUncheckedUpdateManyWithoutColumnNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutColumnNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  linkedColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkingColumnsNestedInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedUpdateManyWithoutFromColumnNestedInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedUpdateManyWithoutToColumnNestedInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ColumnUncheckedUpdateWithoutUpdatedByUserInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  card?: InputMaybe<CardUncheckedUpdateManyWithoutColumnNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldValue?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutColumnNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  linkedColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkingColumnsNestedInput>;
  linkingColumns?: InputMaybe<ColumnUncheckedUpdateManyWithoutLinkedColumnsNestedInput>;
  movementsFrom?: InputMaybe<CardMovementUncheckedUpdateManyWithoutFromColumnNestedInput>;
  movementsTo?: InputMaybe<CardMovementUncheckedUpdateManyWithoutToColumnNestedInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ColumnUpdateManyWithWhereWithoutBoardInput = {
  data: ColumnUncheckedUpdateManyWithoutBoardInput;
  where: ColumnScalarWhereInput;
};

export type ColumnUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: ColumnUncheckedUpdateManyWithoutCreatedByUserInput;
  where: ColumnScalarWhereInput;
};

export type ColumnUpdateManyWithWhereWithoutLinkedColumnsInput = {
  data: ColumnUncheckedUpdateManyWithoutLinkedColumnsInput;
  where: ColumnScalarWhereInput;
};

export type ColumnUpdateManyWithWhereWithoutLinkingColumnsInput = {
  data: ColumnUncheckedUpdateManyWithoutLinkingColumnsInput;
  where: ColumnScalarWhereInput;
};

export type ColumnUpdateManyWithWhereWithoutUpdatedByUserInput = {
  data: ColumnUncheckedUpdateManyWithoutUpdatedByUserInput;
  where: ColumnScalarWhereInput;
};

export type ColumnUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ColumnCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<ColumnUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<ColumnUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<ColumnUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type ColumnUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ColumnCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ColumnCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ColumnCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<ColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<ColumnUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<ColumnUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<ColumnUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type ColumnUpdateWithWhereUniqueWithoutBoardInput = {
  data: ColumnUncheckedUpdateWithoutBoardInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: ColumnUncheckedUpdateWithoutCreatedByUserInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpdateWithWhereUniqueWithoutLinkedColumnsInput = {
  data: ColumnUncheckedUpdateWithoutLinkedColumnsInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpdateWithWhereUniqueWithoutLinkingColumnsInput = {
  data: ColumnUncheckedUpdateWithoutLinkingColumnsInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
  data: ColumnUncheckedUpdateWithoutUpdatedByUserInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpsertWithWhereUniqueWithoutBoardInput = {
  create: ColumnUncheckedCreateWithoutBoardInput;
  update: ColumnUncheckedUpdateWithoutBoardInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: ColumnUncheckedCreateWithoutCreatedByUserInput;
  update: ColumnUncheckedUpdateWithoutCreatedByUserInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpsertWithWhereUniqueWithoutLinkedColumnsInput = {
  create: ColumnUncheckedCreateWithoutLinkedColumnsInput;
  update: ColumnUncheckedUpdateWithoutLinkedColumnsInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpsertWithWhereUniqueWithoutLinkingColumnsInput = {
  create: ColumnUncheckedCreateWithoutLinkingColumnsInput;
  update: ColumnUncheckedUpdateWithoutLinkingColumnsInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
  create: ColumnUncheckedCreateWithoutUpdatedByUserInput;
  update: ColumnUncheckedUpdateWithoutUpdatedByUserInput;
  where: ColumnWhereUniqueInput;
};

export type ColumnWhereInput = {
  AND?: InputMaybe<Array<ColumnWhereInput>>;
  NOT?: InputMaybe<Array<ColumnWhereInput>>;
  OR?: InputMaybe<Array<ColumnWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  card?: InputMaybe<CardListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  fieldValue?: InputMaybe<FieldColumnListRelationFilter>;
  id?: InputMaybe<IntFilter>;
  linkedColumns?: InputMaybe<ColumnListRelationFilter>;
  linkingColumns?: InputMaybe<ColumnListRelationFilter>;
  movementsFrom?: InputMaybe<CardMovementListRelationFilter>;
  movementsTo?: InputMaybe<CardMovementListRelationFilter>;
  order?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
};

export type ColumnWhereUniqueInput = {
  AND?: InputMaybe<Array<ColumnWhereInput>>;
  NOT?: InputMaybe<Array<ColumnWhereInput>>;
  OR?: InputMaybe<Array<ColumnWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  card?: InputMaybe<CardListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  fieldValue?: InputMaybe<FieldColumnListRelationFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  linkedColumns?: InputMaybe<ColumnListRelationFilter>;
  linkingColumns?: InputMaybe<ColumnListRelationFilter>;
  movementsFrom?: InputMaybe<CardMovementListRelationFilter>;
  movementsTo?: InputMaybe<CardMovementListRelationFilter>;
  order?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
};

export type CommentProject = {
  __typename?: 'CommentProject';
  comments: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy: Scalars['String']['output'];
  flag: TypeFlagsCommentProject;
  id: Scalars['Int']['output'];
  project: Project;
  projectId: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
};

export type CommentProjectAvgAggregate = {
  __typename?: 'CommentProjectAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type CommentProjectAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type CommentProjectCountAggregate = {
  __typename?: 'CommentProjectCountAggregate';
  _all: Scalars['Int']['output'];
  comments: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  flag: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type CommentProjectCountOrderByAggregateInput = {
  comments?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CommentProjectCreateManyInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  flag: TypeFlagsCommentProject;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CommentProjectCreateManyProjectInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  flag: TypeFlagsCommentProject;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CommentProjectCreateManyProjectInputEnvelope = {
  data: Array<CommentProjectCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CommentProjectCreateManyUserInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  flag: TypeFlagsCommentProject;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CommentProjectCreateManyUserInputEnvelope = {
  data: Array<CommentProjectCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CommentProjectCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CommentProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<CommentProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<CommentProjectCreateManyProjectInputEnvelope>;
};

export type CommentProjectCreateOrConnectWithoutProjectInput = {
  create: CommentProjectUncheckedCreateWithoutProjectInput;
  where: CommentProjectWhereUniqueInput;
};

export type CommentProjectCreateOrConnectWithoutUserInput = {
  create: CommentProjectUncheckedCreateWithoutUserInput;
  where: CommentProjectWhereUniqueInput;
};

export type CommentProjectCreateWithoutProjectInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  flag: TypeFlagsCommentProject;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user: UserCreateNestedOneWithoutCommentProjectsInput;
};

export type CommentProjectCreateWithoutUserInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  flag: TypeFlagsCommentProject;
  project: ProjectCreateNestedOneWithoutCommentProjectInput;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CommentProjectGroupBy = {
  __typename?: 'CommentProjectGroupBy';
  _avg?: Maybe<CommentProjectAvgAggregate>;
  _count?: Maybe<CommentProjectCountAggregate>;
  _max?: Maybe<CommentProjectMaxAggregate>;
  _min?: Maybe<CommentProjectMinAggregate>;
  _sum?: Maybe<CommentProjectSumAggregate>;
  comments: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy: Scalars['String']['output'];
  flag: TypeFlagsCommentProject;
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type CommentProjectListRelationFilter = {
  every?: InputMaybe<CommentProjectWhereInput>;
  none?: InputMaybe<CommentProjectWhereInput>;
  some?: InputMaybe<CommentProjectWhereInput>;
};

export type CommentProjectMaxAggregate = {
  __typename?: 'CommentProjectMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  flag?: Maybe<TypeFlagsCommentProject>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type CommentProjectMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CommentProjectMinAggregate = {
  __typename?: 'CommentProjectMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  flag?: Maybe<TypeFlagsCommentProject>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type CommentProjectMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CommentProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CommentProjectOrderByWithAggregationInput = {
  _avg?: InputMaybe<CommentProjectAvgOrderByAggregateInput>;
  _count?: InputMaybe<CommentProjectCountOrderByAggregateInput>;
  _max?: InputMaybe<CommentProjectMaxOrderByAggregateInput>;
  _min?: InputMaybe<CommentProjectMinOrderByAggregateInput>;
  _sum?: InputMaybe<CommentProjectSumOrderByAggregateInput>;
  comments?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CommentProjectOrderByWithRelationInput = {
  comments?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export enum CommentProjectScalarFieldEnum {
  Comments = 'comments',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Flag = 'flag',
  Id = 'id',
  ProjectId = 'projectId',
  UpdatedAt = 'updatedAt'
}

export type CommentProjectScalarWhereInput = {
  AND?: InputMaybe<Array<CommentProjectScalarWhereInput>>;
  NOT?: InputMaybe<Array<CommentProjectScalarWhereInput>>;
  OR?: InputMaybe<Array<CommentProjectScalarWhereInput>>;
  comments?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFilter>;
  id?: InputMaybe<IntFilter>;
  projectId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CommentProjectScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CommentProjectScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CommentProjectScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CommentProjectScalarWhereWithAggregatesInput>>;
  comments?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidWithAggregatesFilter>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type CommentProjectSumAggregate = {
  __typename?: 'CommentProjectSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type CommentProjectSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type CommentProjectUncheckedCreateInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  flag: TypeFlagsCommentProject;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CommentProjectUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CommentProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<CommentProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<CommentProjectCreateManyProjectInputEnvelope>;
};

export type CommentProjectUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<CommentProjectCreateManyUserInputEnvelope>;
};

export type CommentProjectUncheckedCreateWithoutProjectInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  flag: TypeFlagsCommentProject;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CommentProjectUncheckedCreateWithoutUserInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  flag: TypeFlagsCommentProject;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CommentProjectUncheckedUpdateInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CommentProjectUncheckedUpdateManyInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CommentProjectUncheckedUpdateManyWithoutProjectInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CommentProjectUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CommentProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<CommentProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<CommentProjectCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<CommentProjectUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<CommentProjectUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<CommentProjectUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type CommentProjectUncheckedUpdateManyWithoutUserInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CommentProjectUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<CommentProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<CommentProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<CommentProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<CommentProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type CommentProjectUncheckedUpdateWithoutProjectInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CommentProjectUncheckedUpdateWithoutUserInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CommentProjectUpdateManyWithWhereWithoutProjectInput = {
  data: CommentProjectUncheckedUpdateManyWithoutProjectInput;
  where: CommentProjectScalarWhereInput;
};

export type CommentProjectUpdateManyWithWhereWithoutUserInput = {
  data: CommentProjectUncheckedUpdateManyWithoutUserInput;
  where: CommentProjectScalarWhereInput;
};

export type CommentProjectUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<CommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<CommentProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<CommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<CommentProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<CommentProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<CommentProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type CommentProjectUpdateWithWhereUniqueWithoutProjectInput = {
  data: CommentProjectUncheckedUpdateWithoutProjectInput;
  where: CommentProjectWhereUniqueInput;
};

export type CommentProjectUpdateWithWhereUniqueWithoutUserInput = {
  data: CommentProjectUncheckedUpdateWithoutUserInput;
  where: CommentProjectWhereUniqueInput;
};

export type CommentProjectUpsertWithWhereUniqueWithoutProjectInput = {
  create: CommentProjectUncheckedCreateWithoutProjectInput;
  update: CommentProjectUncheckedUpdateWithoutProjectInput;
  where: CommentProjectWhereUniqueInput;
};

export type CommentProjectUpsertWithWhereUniqueWithoutUserInput = {
  create: CommentProjectUncheckedCreateWithoutUserInput;
  update: CommentProjectUncheckedUpdateWithoutUserInput;
  where: CommentProjectWhereUniqueInput;
};

export type CommentProjectWhereInput = {
  AND?: InputMaybe<Array<CommentProjectWhereInput>>;
  NOT?: InputMaybe<Array<CommentProjectWhereInput>>;
  OR?: InputMaybe<Array<CommentProjectWhereInput>>;
  comments?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFilter>;
  id?: InputMaybe<IntFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type CommentProjectWhereUniqueInput = {
  AND?: InputMaybe<Array<CommentProjectWhereInput>>;
  NOT?: InputMaybe<Array<CommentProjectWhereInput>>;
  OR?: InputMaybe<Array<CommentProjectWhereInput>>;
  comments?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  flag?: InputMaybe<EnumtypeFlagsCommentProjectFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type Csat = {
  __typename?: 'Csat';
  client: Client;
  clientId: Scalars['Int']['output'];
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type CsatAvgAggregate = {
  __typename?: 'CsatAvgAggregate';
  clientId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type CsatAvgOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type CsatCountAggregate = {
  __typename?: 'CsatCountAggregate';
  _all: Scalars['Int']['output'];
  clientId: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type CsatCountOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CsatCreateManyClientInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CsatCreateManyClientInputEnvelope = {
  data: Array<CsatCreateManyClientInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type CsatCreateManyInput = {
  clientId: Scalars['Int']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CsatCreateNestedManyWithoutClientInput = {
  connect?: InputMaybe<Array<CsatWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CsatCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<CsatCreateWithoutClientInput>>;
  createMany?: InputMaybe<CsatCreateManyClientInputEnvelope>;
};

export type CsatCreateOrConnectWithoutClientInput = {
  create: CsatUncheckedCreateWithoutClientInput;
  where: CsatWhereUniqueInput;
};

export type CsatCreateWithoutClientInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CsatGroupBy = {
  __typename?: 'CsatGroupBy';
  _avg?: Maybe<CsatAvgAggregate>;
  _count?: Maybe<CsatCountAggregate>;
  _max?: Maybe<CsatMaxAggregate>;
  _min?: Maybe<CsatMinAggregate>;
  _sum?: Maybe<CsatSumAggregate>;
  clientId: Scalars['Int']['output'];
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type CsatListRelationFilter = {
  every?: InputMaybe<CsatWhereInput>;
  none?: InputMaybe<CsatWhereInput>;
  some?: InputMaybe<CsatWhereInput>;
};

export type CsatMaxAggregate = {
  __typename?: 'CsatMaxAggregate';
  clientId?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type CsatMaxOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CsatMinAggregate = {
  __typename?: 'CsatMinAggregate';
  clientId?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type CsatMinOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CsatOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type CsatOrderByWithAggregationInput = {
  _avg?: InputMaybe<CsatAvgOrderByAggregateInput>;
  _count?: InputMaybe<CsatCountOrderByAggregateInput>;
  _max?: InputMaybe<CsatMaxOrderByAggregateInput>;
  _min?: InputMaybe<CsatMinOrderByAggregateInput>;
  _sum?: InputMaybe<CsatSumOrderByAggregateInput>;
  clientId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type CsatOrderByWithRelationInput = {
  client?: InputMaybe<ClientOrderByWithRelationInput>;
  clientId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum CsatScalarFieldEnum {
  ClientId = 'clientId',
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id',
  UpdatedAt = 'updatedAt'
}

export type CsatScalarWhereInput = {
  AND?: InputMaybe<Array<CsatScalarWhereInput>>;
  NOT?: InputMaybe<Array<CsatScalarWhereInput>>;
  OR?: InputMaybe<Array<CsatScalarWhereInput>>;
  clientId?: InputMaybe<IntFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CsatScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<CsatScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<CsatScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<CsatScalarWhereWithAggregatesInput>>;
  clientId?: InputMaybe<IntWithAggregatesFilter>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type CsatSumAggregate = {
  __typename?: 'CsatSumAggregate';
  clientId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type CsatSumOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type CsatUncheckedCreateInput = {
  clientId: Scalars['Int']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CsatUncheckedCreateNestedManyWithoutClientInput = {
  connect?: InputMaybe<Array<CsatWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CsatCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<CsatCreateWithoutClientInput>>;
  createMany?: InputMaybe<CsatCreateManyClientInputEnvelope>;
};

export type CsatUncheckedCreateWithoutClientInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type CsatUncheckedUpdateInput = {
  clientId?: InputMaybe<IntFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CsatUncheckedUpdateManyInput = {
  clientId?: InputMaybe<IntFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CsatUncheckedUpdateManyWithoutClientInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CsatUncheckedUpdateManyWithoutClientNestedInput = {
  connect?: InputMaybe<Array<CsatWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<CsatCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<CsatCreateWithoutClientInput>>;
  createMany?: InputMaybe<CsatCreateManyClientInputEnvelope>;
  delete?: InputMaybe<Array<CsatWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<CsatScalarWhereInput>>;
  disconnect?: InputMaybe<Array<CsatWhereUniqueInput>>;
  set?: InputMaybe<Array<CsatWhereUniqueInput>>;
  update?: InputMaybe<Array<CsatUpdateWithWhereUniqueWithoutClientInput>>;
  updateMany?: InputMaybe<Array<CsatUpdateManyWithWhereWithoutClientInput>>;
  upsert?: InputMaybe<Array<CsatUpsertWithWhereUniqueWithoutClientInput>>;
};

export type CsatUncheckedUpdateWithoutClientInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type CsatUpdateManyWithWhereWithoutClientInput = {
  data: CsatUncheckedUpdateManyWithoutClientInput;
  where: CsatScalarWhereInput;
};

export type CsatUpdateWithWhereUniqueWithoutClientInput = {
  data: CsatUncheckedUpdateWithoutClientInput;
  where: CsatWhereUniqueInput;
};

export type CsatUpsertWithWhereUniqueWithoutClientInput = {
  create: CsatUncheckedCreateWithoutClientInput;
  update: CsatUncheckedUpdateWithoutClientInput;
  where: CsatWhereUniqueInput;
};

export type CsatWhereInput = {
  AND?: InputMaybe<Array<CsatWhereInput>>;
  NOT?: InputMaybe<Array<CsatWhereInput>>;
  OR?: InputMaybe<Array<CsatWhereInput>>;
  client?: InputMaybe<ClientRelationFilter>;
  clientId?: InputMaybe<IntFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type CsatWhereUniqueInput = {
  AND?: InputMaybe<Array<CsatWhereInput>>;
  NOT?: InputMaybe<Array<CsatWhereInput>>;
  OR?: InputMaybe<Array<CsatWhereInput>>;
  client?: InputMaybe<ClientRelationFilter>;
  clientId?: InputMaybe<IntFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type DateTimeFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type DateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type DateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type DateTimeNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedDateTimeNullableFilter>;
  _min?: InputMaybe<NestedDateTimeNullableFilter>;
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type DateTimeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedDateTimeFilter>;
  _min?: InputMaybe<NestedDateTimeFilter>;
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type EnumFieldFlagsFieldUpdateOperationsInput = {
  set?: InputMaybe<FieldFlags>;
};

export type EnumFieldFlagsFilter = {
  equals?: InputMaybe<FieldFlags>;
  in?: InputMaybe<Array<FieldFlags>>;
  not?: InputMaybe<NestedEnumFieldFlagsFilter>;
  notIn?: InputMaybe<Array<FieldFlags>>;
};

export type EnumFieldFlagsWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumFieldFlagsFilter>;
  _min?: InputMaybe<NestedEnumFieldFlagsFilter>;
  equals?: InputMaybe<FieldFlags>;
  in?: InputMaybe<Array<FieldFlags>>;
  not?: InputMaybe<NestedEnumFieldFlagsWithAggregatesFilter>;
  notIn?: InputMaybe<Array<FieldFlags>>;
};

export type EnumFieldStepsFieldUpdateOperationsInput = {
  set?: InputMaybe<FieldSteps>;
};

export type EnumFieldStepsFilter = {
  equals?: InputMaybe<FieldSteps>;
  in?: InputMaybe<Array<FieldSteps>>;
  not?: InputMaybe<NestedEnumFieldStepsFilter>;
  notIn?: InputMaybe<Array<FieldSteps>>;
};

export type EnumFieldStepsWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumFieldStepsFilter>;
  _min?: InputMaybe<NestedEnumFieldStepsFilter>;
  equals?: InputMaybe<FieldSteps>;
  in?: InputMaybe<Array<FieldSteps>>;
  not?: InputMaybe<NestedEnumFieldStepsWithAggregatesFilter>;
  notIn?: InputMaybe<Array<FieldSteps>>;
};

export type EnumFieldTypeFieldUpdateOperationsInput = {
  set?: InputMaybe<FieldType>;
};

export type EnumFieldTypeFilter = {
  equals?: InputMaybe<FieldType>;
  in?: InputMaybe<Array<FieldType>>;
  not?: InputMaybe<NestedEnumFieldTypeFilter>;
  notIn?: InputMaybe<Array<FieldType>>;
};

export type EnumFieldTypeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumFieldTypeFilter>;
  _min?: InputMaybe<NestedEnumFieldTypeFilter>;
  equals?: InputMaybe<FieldType>;
  in?: InputMaybe<Array<FieldType>>;
  not?: InputMaybe<NestedEnumFieldTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<FieldType>>;
};

export type EnumTypeServiceFieldUpdateOperationsInput = {
  set?: InputMaybe<TypeService>;
};

export type EnumTypeServiceFilter = {
  equals?: InputMaybe<TypeService>;
  in?: InputMaybe<Array<TypeService>>;
  not?: InputMaybe<NestedEnumTypeServiceFilter>;
  notIn?: InputMaybe<Array<TypeService>>;
};

export type EnumTypeServiceWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumTypeServiceFilter>;
  _min?: InputMaybe<NestedEnumTypeServiceFilter>;
  equals?: InputMaybe<TypeService>;
  in?: InputMaybe<Array<TypeService>>;
  not?: InputMaybe<NestedEnumTypeServiceWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeService>>;
};

export type EnuminvestStatusFieldUpdateOperationsInput = {
  set?: InputMaybe<InvestStatus>;
};

export type EnuminvestStatusFilter = {
  equals?: InputMaybe<InvestStatus>;
  in?: InputMaybe<Array<InvestStatus>>;
  not?: InputMaybe<NestedEnuminvestStatusFilter>;
  notIn?: InputMaybe<Array<InvestStatus>>;
};

export type EnuminvestStatusWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnuminvestStatusFilter>;
  _min?: InputMaybe<NestedEnuminvestStatusFilter>;
  equals?: InputMaybe<InvestStatus>;
  in?: InputMaybe<Array<InvestStatus>>;
  not?: InputMaybe<NestedEnuminvestStatusWithAggregatesFilter>;
  notIn?: InputMaybe<Array<InvestStatus>>;
};

export type EnumroleFieldUpdateOperationsInput = {
  set?: InputMaybe<Role>;
};

export type EnumroleFilter = {
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumroleFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type EnumroleWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumroleFilter>;
  _min?: InputMaybe<NestedEnumroleFilter>;
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumroleWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type EnumtypeFileFieldUpdateOperationsInput = {
  set?: InputMaybe<TypeFile>;
};

export type EnumtypeFileFilter = {
  equals?: InputMaybe<TypeFile>;
  in?: InputMaybe<Array<TypeFile>>;
  not?: InputMaybe<NestedEnumtypeFileFilter>;
  notIn?: InputMaybe<Array<TypeFile>>;
};

export type EnumtypeFileWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumtypeFileFilter>;
  _min?: InputMaybe<NestedEnumtypeFileFilter>;
  equals?: InputMaybe<TypeFile>;
  in?: InputMaybe<Array<TypeFile>>;
  not?: InputMaybe<NestedEnumtypeFileWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeFile>>;
};

export type EnumtypeFlagsCommentProjectFieldUpdateOperationsInput = {
  set?: InputMaybe<TypeFlagsCommentProject>;
};

export type EnumtypeFlagsCommentProjectFilter = {
  equals?: InputMaybe<TypeFlagsCommentProject>;
  in?: InputMaybe<Array<TypeFlagsCommentProject>>;
  not?: InputMaybe<NestedEnumtypeFlagsCommentProjectFilter>;
  notIn?: InputMaybe<Array<TypeFlagsCommentProject>>;
};

export type EnumtypeFlagsCommentProjectWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumtypeFlagsCommentProjectFilter>;
  _min?: InputMaybe<NestedEnumtypeFlagsCommentProjectFilter>;
  equals?: InputMaybe<TypeFlagsCommentProject>;
  in?: InputMaybe<Array<TypeFlagsCommentProject>>;
  not?: InputMaybe<NestedEnumtypeFlagsCommentProjectWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeFlagsCommentProject>>;
};

export type EnumtypeNotfyFieldUpdateOperationsInput = {
  set?: InputMaybe<TypeNotfy>;
};

export type EnumtypeNotfyFilter = {
  equals?: InputMaybe<TypeNotfy>;
  in?: InputMaybe<Array<TypeNotfy>>;
  not?: InputMaybe<NestedEnumtypeNotfyFilter>;
  notIn?: InputMaybe<Array<TypeNotfy>>;
};

export type EnumtypeNotfyWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumtypeNotfyFilter>;
  _min?: InputMaybe<NestedEnumtypeNotfyFilter>;
  equals?: InputMaybe<TypeNotfy>;
  in?: InputMaybe<Array<TypeNotfy>>;
  not?: InputMaybe<NestedEnumtypeNotfyWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeNotfy>>;
};

export type EnumtypeUserFieldUpdateOperationsInput = {
  set?: InputMaybe<TypeUser>;
};

export type EnumtypeUserFilter = {
  equals?: InputMaybe<TypeUser>;
  in?: InputMaybe<Array<TypeUser>>;
  not?: InputMaybe<NestedEnumtypeUserFilter>;
  notIn?: InputMaybe<Array<TypeUser>>;
};

export type EnumtypeUserWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumtypeUserFilter>;
  _min?: InputMaybe<NestedEnumtypeUserFilter>;
  equals?: InputMaybe<TypeUser>;
  in?: InputMaybe<Array<TypeUser>>;
  not?: InputMaybe<NestedEnumtypeUserWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeUser>>;
};

export type Field = {
  __typename?: 'Field';
  FieldsValue: Array<FieldsValue>;
  _count?: Maybe<FieldCount>;
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdUser?: Maybe<User>;
  description: Scalars['String']['output'];
  fieldColumn: Array<FieldColumn>;
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  primitive: PrimitiveFields;
  required: Scalars['Boolean']['output'];
  showInCard: Scalars['Boolean']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
  updatedUser?: Maybe<User>;
};


export type FieldFieldsValueArgs = {
  cursor?: InputMaybe<FieldsValueWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldsValueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldsValueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type FieldCreatedUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type FieldFieldColumnArgs = {
  cursor?: InputMaybe<FieldColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type FieldUpdatedUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type FieldAvgAggregate = {
  __typename?: 'FieldAvgAggregate';
  fieldValueId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  order?: Maybe<Scalars['Float']['output']>;
};

export type FieldAvgOrderByAggregateInput = {
  fieldValueId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
};

export type FieldColumn = {
  __typename?: 'FieldColumn';
  column: Column;
  columnId: Scalars['Int']['output'];
  fieldColumn: Field;
  fieldColumnId: Scalars['Int']['output'];
};

export type FieldColumnAvgAggregate = {
  __typename?: 'FieldColumnAvgAggregate';
  columnId?: Maybe<Scalars['Float']['output']>;
  fieldColumnId?: Maybe<Scalars['Float']['output']>;
};

export type FieldColumnAvgOrderByAggregateInput = {
  columnId?: InputMaybe<SortOrder>;
  fieldColumnId?: InputMaybe<SortOrder>;
};

export type FieldColumnColumnIdFieldColumnIdCompoundUniqueInput = {
  columnId: Scalars['Int']['input'];
  fieldColumnId: Scalars['Int']['input'];
};

export type FieldColumnCountAggregate = {
  __typename?: 'FieldColumnCountAggregate';
  _all: Scalars['Int']['output'];
  columnId: Scalars['Int']['output'];
  fieldColumnId: Scalars['Int']['output'];
};

export type FieldColumnCountOrderByAggregateInput = {
  columnId?: InputMaybe<SortOrder>;
  fieldColumnId?: InputMaybe<SortOrder>;
};

export type FieldColumnCreateManyColumnInput = {
  fieldColumnId: Scalars['Int']['input'];
};

export type FieldColumnCreateManyColumnInputEnvelope = {
  data: Array<FieldColumnCreateManyColumnInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldColumnCreateManyFieldColumnInput = {
  columnId: Scalars['Int']['input'];
};

export type FieldColumnCreateManyFieldColumnInputEnvelope = {
  data: Array<FieldColumnCreateManyFieldColumnInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldColumnCreateManyInput = {
  columnId: Scalars['Int']['input'];
  fieldColumnId: Scalars['Int']['input'];
};

export type FieldColumnCreateNestedManyWithoutColumnInput = {
  connect?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldColumnCreateOrConnectWithoutColumnInput>>;
  create?: InputMaybe<Array<FieldColumnCreateWithoutColumnInput>>;
  createMany?: InputMaybe<FieldColumnCreateManyColumnInputEnvelope>;
};

export type FieldColumnCreateNestedManyWithoutFieldColumnInput = {
  connect?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldColumnCreateOrConnectWithoutFieldColumnInput>>;
  create?: InputMaybe<Array<FieldColumnCreateWithoutFieldColumnInput>>;
  createMany?: InputMaybe<FieldColumnCreateManyFieldColumnInputEnvelope>;
};

export type FieldColumnCreateOrConnectWithoutColumnInput = {
  create: FieldColumnUncheckedCreateWithoutColumnInput;
  where: FieldColumnWhereUniqueInput;
};

export type FieldColumnCreateOrConnectWithoutFieldColumnInput = {
  create: FieldColumnUncheckedCreateWithoutFieldColumnInput;
  where: FieldColumnWhereUniqueInput;
};

export type FieldColumnCreateWithoutColumnInput = {
  fieldColumn: FieldCreateNestedOneWithoutFieldColumnInput;
};

export type FieldColumnCreateWithoutFieldColumnInput = {
  column: ColumnCreateNestedOneWithoutFieldValueInput;
};

export type FieldColumnGroupBy = {
  __typename?: 'FieldColumnGroupBy';
  _avg?: Maybe<FieldColumnAvgAggregate>;
  _count?: Maybe<FieldColumnCountAggregate>;
  _max?: Maybe<FieldColumnMaxAggregate>;
  _min?: Maybe<FieldColumnMinAggregate>;
  _sum?: Maybe<FieldColumnSumAggregate>;
  columnId: Scalars['Int']['output'];
  fieldColumnId: Scalars['Int']['output'];
};

export type FieldColumnListRelationFilter = {
  every?: InputMaybe<FieldColumnWhereInput>;
  none?: InputMaybe<FieldColumnWhereInput>;
  some?: InputMaybe<FieldColumnWhereInput>;
};

export type FieldColumnMaxAggregate = {
  __typename?: 'FieldColumnMaxAggregate';
  columnId?: Maybe<Scalars['Int']['output']>;
  fieldColumnId?: Maybe<Scalars['Int']['output']>;
};

export type FieldColumnMaxOrderByAggregateInput = {
  columnId?: InputMaybe<SortOrder>;
  fieldColumnId?: InputMaybe<SortOrder>;
};

export type FieldColumnMinAggregate = {
  __typename?: 'FieldColumnMinAggregate';
  columnId?: Maybe<Scalars['Int']['output']>;
  fieldColumnId?: Maybe<Scalars['Int']['output']>;
};

export type FieldColumnMinOrderByAggregateInput = {
  columnId?: InputMaybe<SortOrder>;
  fieldColumnId?: InputMaybe<SortOrder>;
};

export type FieldColumnOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type FieldColumnOrderByWithAggregationInput = {
  _avg?: InputMaybe<FieldColumnAvgOrderByAggregateInput>;
  _count?: InputMaybe<FieldColumnCountOrderByAggregateInput>;
  _max?: InputMaybe<FieldColumnMaxOrderByAggregateInput>;
  _min?: InputMaybe<FieldColumnMinOrderByAggregateInput>;
  _sum?: InputMaybe<FieldColumnSumOrderByAggregateInput>;
  columnId?: InputMaybe<SortOrder>;
  fieldColumnId?: InputMaybe<SortOrder>;
};

export type FieldColumnOrderByWithRelationInput = {
  column?: InputMaybe<ColumnOrderByWithRelationInput>;
  columnId?: InputMaybe<SortOrder>;
  fieldColumn?: InputMaybe<FieldOrderByWithRelationInput>;
  fieldColumnId?: InputMaybe<SortOrder>;
};

export enum FieldColumnScalarFieldEnum {
  ColumnId = 'columnId',
  FieldColumnId = 'fieldColumnId'
}

export type FieldColumnScalarWhereInput = {
  AND?: InputMaybe<Array<FieldColumnScalarWhereInput>>;
  NOT?: InputMaybe<Array<FieldColumnScalarWhereInput>>;
  OR?: InputMaybe<Array<FieldColumnScalarWhereInput>>;
  columnId?: InputMaybe<IntFilter>;
  fieldColumnId?: InputMaybe<IntFilter>;
};

export type FieldColumnScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<FieldColumnScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<FieldColumnScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<FieldColumnScalarWhereWithAggregatesInput>>;
  columnId?: InputMaybe<IntWithAggregatesFilter>;
  fieldColumnId?: InputMaybe<IntWithAggregatesFilter>;
};

export type FieldColumnSumAggregate = {
  __typename?: 'FieldColumnSumAggregate';
  columnId?: Maybe<Scalars['Int']['output']>;
  fieldColumnId?: Maybe<Scalars['Int']['output']>;
};

export type FieldColumnSumOrderByAggregateInput = {
  columnId?: InputMaybe<SortOrder>;
  fieldColumnId?: InputMaybe<SortOrder>;
};

export type FieldColumnUncheckedCreateInput = {
  columnId: Scalars['Int']['input'];
  fieldColumnId: Scalars['Int']['input'];
};

export type FieldColumnUncheckedCreateNestedManyWithoutColumnInput = {
  connect?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldColumnCreateOrConnectWithoutColumnInput>>;
  create?: InputMaybe<Array<FieldColumnCreateWithoutColumnInput>>;
  createMany?: InputMaybe<FieldColumnCreateManyColumnInputEnvelope>;
};

export type FieldColumnUncheckedCreateNestedManyWithoutFieldColumnInput = {
  connect?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldColumnCreateOrConnectWithoutFieldColumnInput>>;
  create?: InputMaybe<Array<FieldColumnCreateWithoutFieldColumnInput>>;
  createMany?: InputMaybe<FieldColumnCreateManyFieldColumnInputEnvelope>;
};

export type FieldColumnUncheckedCreateWithoutColumnInput = {
  fieldColumnId: Scalars['Int']['input'];
};

export type FieldColumnUncheckedCreateWithoutFieldColumnInput = {
  columnId: Scalars['Int']['input'];
};

export type FieldColumnUncheckedUpdateInput = {
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  fieldColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldColumnUncheckedUpdateManyInput = {
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
  fieldColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldColumnUncheckedUpdateManyWithoutColumnInput = {
  fieldColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldColumnUncheckedUpdateManyWithoutColumnNestedInput = {
  connect?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldColumnCreateOrConnectWithoutColumnInput>>;
  create?: InputMaybe<Array<FieldColumnCreateWithoutColumnInput>>;
  createMany?: InputMaybe<FieldColumnCreateManyColumnInputEnvelope>;
  delete?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldColumnUpdateWithWhereUniqueWithoutColumnInput>>;
  updateMany?: InputMaybe<Array<FieldColumnUpdateManyWithWhereWithoutColumnInput>>;
  upsert?: InputMaybe<Array<FieldColumnUpsertWithWhereUniqueWithoutColumnInput>>;
};

export type FieldColumnUncheckedUpdateManyWithoutFieldColumnInput = {
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldColumnUncheckedUpdateManyWithoutFieldColumnNestedInput = {
  connect?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldColumnCreateOrConnectWithoutFieldColumnInput>>;
  create?: InputMaybe<Array<FieldColumnCreateWithoutFieldColumnInput>>;
  createMany?: InputMaybe<FieldColumnCreateManyFieldColumnInputEnvelope>;
  delete?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldColumnScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldColumnWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldColumnUpdateWithWhereUniqueWithoutFieldColumnInput>>;
  updateMany?: InputMaybe<Array<FieldColumnUpdateManyWithWhereWithoutFieldColumnInput>>;
  upsert?: InputMaybe<Array<FieldColumnUpsertWithWhereUniqueWithoutFieldColumnInput>>;
};

export type FieldColumnUncheckedUpdateWithoutColumnInput = {
  fieldColumnId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldColumnUncheckedUpdateWithoutFieldColumnInput = {
  columnId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldColumnUpdateManyWithWhereWithoutColumnInput = {
  data: FieldColumnUncheckedUpdateManyWithoutColumnInput;
  where: FieldColumnScalarWhereInput;
};

export type FieldColumnUpdateManyWithWhereWithoutFieldColumnInput = {
  data: FieldColumnUncheckedUpdateManyWithoutFieldColumnInput;
  where: FieldColumnScalarWhereInput;
};

export type FieldColumnUpdateWithWhereUniqueWithoutColumnInput = {
  data: FieldColumnUncheckedUpdateWithoutColumnInput;
  where: FieldColumnWhereUniqueInput;
};

export type FieldColumnUpdateWithWhereUniqueWithoutFieldColumnInput = {
  data: FieldColumnUncheckedUpdateWithoutFieldColumnInput;
  where: FieldColumnWhereUniqueInput;
};

export type FieldColumnUpsertWithWhereUniqueWithoutColumnInput = {
  create: FieldColumnUncheckedCreateWithoutColumnInput;
  update: FieldColumnUncheckedUpdateWithoutColumnInput;
  where: FieldColumnWhereUniqueInput;
};

export type FieldColumnUpsertWithWhereUniqueWithoutFieldColumnInput = {
  create: FieldColumnUncheckedCreateWithoutFieldColumnInput;
  update: FieldColumnUncheckedUpdateWithoutFieldColumnInput;
  where: FieldColumnWhereUniqueInput;
};

export type FieldColumnWhereInput = {
  AND?: InputMaybe<Array<FieldColumnWhereInput>>;
  NOT?: InputMaybe<Array<FieldColumnWhereInput>>;
  OR?: InputMaybe<Array<FieldColumnWhereInput>>;
  column?: InputMaybe<ColumnRelationFilter>;
  columnId?: InputMaybe<IntFilter>;
  fieldColumn?: InputMaybe<FieldRelationFilter>;
  fieldColumnId?: InputMaybe<IntFilter>;
};

export type FieldColumnWhereUniqueInput = {
  AND?: InputMaybe<Array<FieldColumnWhereInput>>;
  NOT?: InputMaybe<Array<FieldColumnWhereInput>>;
  OR?: InputMaybe<Array<FieldColumnWhereInput>>;
  column?: InputMaybe<ColumnRelationFilter>;
  columnId?: InputMaybe<IntFilter>;
  columnId_fieldColumnId?: InputMaybe<FieldColumnColumnIdFieldColumnIdCompoundUniqueInput>;
  fieldColumn?: InputMaybe<FieldRelationFilter>;
  fieldColumnId?: InputMaybe<IntFilter>;
};

export type FieldCount = {
  __typename?: 'FieldCount';
  FieldsValue: Scalars['Int']['output'];
  fieldColumn: Scalars['Int']['output'];
};


export type FieldCountFieldsValueArgs = {
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type FieldCountFieldColumnArgs = {
  where?: InputMaybe<FieldColumnWhereInput>;
};

export type FieldCountAggregate = {
  __typename?: 'FieldCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  fieldType: Scalars['Int']['output'];
  fieldValueId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  order: Scalars['Int']['output'];
  required: Scalars['Int']['output'];
  showInCard: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type FieldCountOrderByAggregateInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  fieldValueId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  required?: InputMaybe<SortOrder>;
  showInCard?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type FieldCreateManyCreatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type FieldCreateManyCreatedUserInputEnvelope = {
  data: Array<FieldCreateManyCreatedUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldCreateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type FieldCreateManyPrimitiveInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type FieldCreateManyPrimitiveInputEnvelope = {
  data: Array<FieldCreateManyPrimitiveInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldCreateManyUpdatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type FieldCreateManyUpdatedUserInputEnvelope = {
  data: Array<FieldCreateManyUpdatedUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldCreateNestedOneWithoutFieldColumnInput = {
  connect?: InputMaybe<FieldWhereUniqueInput>;
  connectOrCreate?: InputMaybe<FieldCreateOrConnectWithoutFieldColumnInput>;
  create?: InputMaybe<FieldUncheckedCreateWithoutFieldColumnInput>;
};

export type FieldCreateNestedOneWithoutFieldsValueInput = {
  connect?: InputMaybe<FieldWhereUniqueInput>;
  connectOrCreate?: InputMaybe<FieldCreateOrConnectWithoutFieldsValueInput>;
  create?: InputMaybe<FieldUncheckedCreateWithoutFieldsValueInput>;
};

export type FieldCreateOrConnectWithoutCreatedUserInput = {
  create: FieldUncheckedCreateWithoutCreatedUserInput;
  where: FieldWhereUniqueInput;
};

export type FieldCreateOrConnectWithoutFieldColumnInput = {
  create: FieldUncheckedCreateWithoutFieldColumnInput;
  where: FieldWhereUniqueInput;
};

export type FieldCreateOrConnectWithoutFieldsValueInput = {
  create: FieldUncheckedCreateWithoutFieldsValueInput;
  where: FieldWhereUniqueInput;
};

export type FieldCreateOrConnectWithoutPrimitiveInput = {
  create: FieldUncheckedCreateWithoutPrimitiveInput;
  where: FieldWhereUniqueInput;
};

export type FieldCreateOrConnectWithoutUpdatedUserInput = {
  create: FieldUncheckedCreateWithoutUpdatedUserInput;
  where: FieldWhereUniqueInput;
};

export type FieldCreateWithoutCreatedUserInput = {
  FieldsValue?: InputMaybe<FieldsValueCreateNestedManyWithoutFieldInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  fieldColumn?: InputMaybe<FieldColumnCreateNestedManyWithoutFieldColumnInput>;
  fieldType: FieldType;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  primitive: PrimitiveFieldsCreateNestedOneWithoutFieldInput;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedUser?: InputMaybe<UserCreateNestedOneWithoutFieldValueUpdatedInput>;
};

export type FieldCreateWithoutPrimitiveInput = {
  FieldsValue?: InputMaybe<FieldsValueCreateNestedManyWithoutFieldInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdUser?: InputMaybe<UserCreateNestedOneWithoutFieldValueCreatedInput>;
  description: Scalars['String']['input'];
  fieldColumn?: InputMaybe<FieldColumnCreateNestedManyWithoutFieldColumnInput>;
  fieldType: FieldType;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedUser?: InputMaybe<UserCreateNestedOneWithoutFieldValueUpdatedInput>;
};

export type FieldCreateWithoutUpdatedUserInput = {
  FieldsValue?: InputMaybe<FieldsValueCreateNestedManyWithoutFieldInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdUser?: InputMaybe<UserCreateNestedOneWithoutFieldValueCreatedInput>;
  description: Scalars['String']['input'];
  fieldColumn?: InputMaybe<FieldColumnCreateNestedManyWithoutFieldColumnInput>;
  fieldType: FieldType;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  primitive: PrimitiveFieldsCreateNestedOneWithoutFieldInput;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export enum FieldFlags {
  Care = 'CARE',
  Danger = 'DANGER',
  Onboarding = 'ONBOARDING',
  Safe = 'SAFE'
}

export type FieldGroupBy = {
  __typename?: 'FieldGroupBy';
  _avg?: Maybe<FieldAvgAggregate>;
  _count?: Maybe<FieldCountAggregate>;
  _max?: Maybe<FieldMaxAggregate>;
  _min?: Maybe<FieldMinAggregate>;
  _sum?: Maybe<FieldSumAggregate>;
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  description: Scalars['String']['output'];
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  order: Scalars['Int']['output'];
  required: Scalars['Boolean']['output'];
  showInCard: Scalars['Boolean']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type FieldListRelationFilter = {
  every?: InputMaybe<FieldWhereInput>;
  none?: InputMaybe<FieldWhereInput>;
  some?: InputMaybe<FieldWhereInput>;
};

export type FieldMaxAggregate = {
  __typename?: 'FieldMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  fieldType?: Maybe<FieldType>;
  fieldValueId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  required?: Maybe<Scalars['Boolean']['output']>;
  showInCard?: Maybe<Scalars['Boolean']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type FieldMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  fieldValueId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  required?: InputMaybe<SortOrder>;
  showInCard?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type FieldMinAggregate = {
  __typename?: 'FieldMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  fieldType?: Maybe<FieldType>;
  fieldValueId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
  required?: Maybe<Scalars['Boolean']['output']>;
  showInCard?: Maybe<Scalars['Boolean']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type FieldMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  fieldValueId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  required?: InputMaybe<SortOrder>;
  showInCard?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type FieldNullableRelationFilter = {
  is?: InputMaybe<FieldWhereInput>;
  isNot?: InputMaybe<FieldWhereInput>;
};

export type FieldOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type FieldOrderByWithAggregationInput = {
  _avg?: InputMaybe<FieldAvgOrderByAggregateInput>;
  _count?: InputMaybe<FieldCountOrderByAggregateInput>;
  _max?: InputMaybe<FieldMaxOrderByAggregateInput>;
  _min?: InputMaybe<FieldMinOrderByAggregateInput>;
  _sum?: InputMaybe<FieldSumOrderByAggregateInput>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  description?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  fieldValueId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  required?: InputMaybe<SortOrder>;
  showInCard?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
};

export type FieldOrderByWithRelationInput = {
  FieldsValue?: InputMaybe<FieldsValueOrderByRelationAggregateInput>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdUser?: InputMaybe<UserOrderByWithRelationInput>;
  description?: InputMaybe<SortOrder>;
  fieldColumn?: InputMaybe<FieldColumnOrderByRelationAggregateInput>;
  fieldType?: InputMaybe<SortOrder>;
  fieldValueId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
  primitive?: InputMaybe<PrimitiveFieldsOrderByWithRelationInput>;
  required?: InputMaybe<SortOrder>;
  showInCard?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
  updatedUser?: InputMaybe<UserOrderByWithRelationInput>;
};

export type FieldRelationFilter = {
  is?: InputMaybe<FieldWhereInput>;
  isNot?: InputMaybe<FieldWhereInput>;
};

export enum FieldScalarFieldEnum {
  Content = 'content',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Description = 'description',
  FieldType = 'fieldType',
  FieldValueId = 'fieldValueId',
  Id = 'id',
  Name = 'name',
  Order = 'order',
  Required = 'required',
  ShowInCard = 'showInCard',
  UpdatedAt = 'updatedAt',
  UpdatedBy = 'updatedBy'
}

export type FieldScalarWhereInput = {
  AND?: InputMaybe<Array<FieldScalarWhereInput>>;
  NOT?: InputMaybe<Array<FieldScalarWhereInput>>;
  OR?: InputMaybe<Array<FieldScalarWhereInput>>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  description?: InputMaybe<StringFilter>;
  fieldType?: InputMaybe<EnumFieldTypeFilter>;
  fieldValueId?: InputMaybe<IntFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  required?: InputMaybe<BoolFilter>;
  showInCard?: InputMaybe<BoolFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
};

export type FieldScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<FieldScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<FieldScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<FieldScalarWhereWithAggregatesInput>>;
  content?: InputMaybe<JsonNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  description?: InputMaybe<StringWithAggregatesFilter>;
  fieldType?: InputMaybe<EnumFieldTypeWithAggregatesFilter>;
  fieldValueId?: InputMaybe<IntWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  order?: InputMaybe<IntWithAggregatesFilter>;
  required?: InputMaybe<BoolWithAggregatesFilter>;
  showInCard?: InputMaybe<BoolWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export enum FieldSteps {
  V1 = 'V1',
  V2 = 'V2',
  V3 = 'V3',
  V4 = 'V4',
  V4X = 'V4X'
}

export type FieldSumAggregate = {
  __typename?: 'FieldSumAggregate';
  fieldValueId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  order?: Maybe<Scalars['Int']['output']>;
};

export type FieldSumOrderByAggregateInput = {
  fieldValueId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  order?: InputMaybe<SortOrder>;
};

export enum FieldType {
  Attachment = 'ATTACHMENT',
  Blob = 'BLOB',
  Cash = 'CASH',
  Cep = 'CEP',
  Checkbox = 'CHECKBOX',
  City = 'CITY',
  Client = 'CLIENT',
  Cnh = 'CNH',
  Cnpj = 'CNPJ',
  Connectionboard = 'CONNECTIONBOARD',
  Country = 'COUNTRY',
  Cpf = 'CPF',
  Date = 'DATE',
  Dateappointment = 'DATEAPPOINTMENT',
  Email = 'EMAIL',
  Hours = 'HOURS',
  Image = 'IMAGE',
  Invest = 'INVEST',
  Link = 'LINK',
  Longtext = 'LONGTEXT',
  Money = 'MONEY',
  Number = 'NUMBER',
  Numberdocument = 'NUMBERDOCUMENT',
  Passport = 'PASSPORT',
  Priority = 'PRIORITY',
  Projects = 'PROJECTS',
  Radiobotton = 'RADIOBOTTON',
  Radiobutton = 'RADIOBUTTON',
  Rg = 'RG',
  Select = 'SELECT',
  Shorttext = 'SHORTTEXT',
  State = 'STATE',
  Tag = 'TAG',
  Tel = 'TEL'
}

export type FieldUncheckedCreateInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutFieldInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldColumn?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutFieldColumnInput>;
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type FieldUncheckedCreateNestedManyWithoutCreatedUserInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<FieldCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<FieldCreateManyCreatedUserInputEnvelope>;
};

export type FieldUncheckedCreateNestedManyWithoutPrimitiveInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldCreateOrConnectWithoutPrimitiveInput>>;
  create?: InputMaybe<Array<FieldCreateWithoutPrimitiveInput>>;
  createMany?: InputMaybe<FieldCreateManyPrimitiveInputEnvelope>;
};

export type FieldUncheckedCreateNestedManyWithoutUpdatedUserInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<FieldCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<FieldCreateManyUpdatedUserInputEnvelope>;
};

export type FieldUncheckedCreateWithoutCreatedUserInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutFieldInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  fieldColumn?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutFieldColumnInput>;
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type FieldUncheckedCreateWithoutFieldColumnInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutFieldInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type FieldUncheckedCreateWithoutFieldsValueInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldColumn?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutFieldColumnInput>;
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type FieldUncheckedCreateWithoutPrimitiveInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutFieldInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldColumn?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutFieldColumnInput>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type FieldUncheckedCreateWithoutUpdatedUserInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutFieldInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  description: Scalars['String']['input'];
  fieldColumn?: InputMaybe<FieldColumnUncheckedCreateNestedManyWithoutFieldColumnInput>;
  fieldType: FieldType;
  fieldValueId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  order?: InputMaybe<Scalars['Int']['input']>;
  required?: InputMaybe<Scalars['Boolean']['input']>;
  showInCard?: InputMaybe<Scalars['Boolean']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type FieldUncheckedUpdateInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutFieldNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldColumn?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutFieldColumnNestedInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  fieldValueId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  required?: InputMaybe<BoolFieldUpdateOperationsInput>;
  showInCard?: InputMaybe<BoolFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type FieldUncheckedUpdateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  fieldValueId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  required?: InputMaybe<BoolFieldUpdateOperationsInput>;
  showInCard?: InputMaybe<BoolFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type FieldUncheckedUpdateManyWithoutCreatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  fieldValueId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  required?: InputMaybe<BoolFieldUpdateOperationsInput>;
  showInCard?: InputMaybe<BoolFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type FieldUncheckedUpdateManyWithoutCreatedUserNestedInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<FieldCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<FieldCreateManyCreatedUserInputEnvelope>;
  delete?: InputMaybe<Array<FieldWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldUpdateWithWhereUniqueWithoutCreatedUserInput>>;
  updateMany?: InputMaybe<Array<FieldUpdateManyWithWhereWithoutCreatedUserInput>>;
  upsert?: InputMaybe<Array<FieldUpsertWithWhereUniqueWithoutCreatedUserInput>>;
};

export type FieldUncheckedUpdateManyWithoutPrimitiveInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  required?: InputMaybe<BoolFieldUpdateOperationsInput>;
  showInCard?: InputMaybe<BoolFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type FieldUncheckedUpdateManyWithoutPrimitiveNestedInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldCreateOrConnectWithoutPrimitiveInput>>;
  create?: InputMaybe<Array<FieldCreateWithoutPrimitiveInput>>;
  createMany?: InputMaybe<FieldCreateManyPrimitiveInputEnvelope>;
  delete?: InputMaybe<Array<FieldWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldUpdateWithWhereUniqueWithoutPrimitiveInput>>;
  updateMany?: InputMaybe<Array<FieldUpdateManyWithWhereWithoutPrimitiveInput>>;
  upsert?: InputMaybe<Array<FieldUpsertWithWhereUniqueWithoutPrimitiveInput>>;
};

export type FieldUncheckedUpdateManyWithoutUpdatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  fieldValueId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  required?: InputMaybe<BoolFieldUpdateOperationsInput>;
  showInCard?: InputMaybe<BoolFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type FieldUncheckedUpdateManyWithoutUpdatedUserNestedInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<FieldCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<FieldCreateManyUpdatedUserInputEnvelope>;
  delete?: InputMaybe<Array<FieldWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldUpdateWithWhereUniqueWithoutUpdatedUserInput>>;
  updateMany?: InputMaybe<Array<FieldUpdateManyWithWhereWithoutUpdatedUserInput>>;
  upsert?: InputMaybe<Array<FieldUpsertWithWhereUniqueWithoutUpdatedUserInput>>;
};

export type FieldUncheckedUpdateWithoutCreatedUserInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutFieldNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldColumn?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutFieldColumnNestedInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  fieldValueId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  required?: InputMaybe<BoolFieldUpdateOperationsInput>;
  showInCard?: InputMaybe<BoolFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type FieldUncheckedUpdateWithoutPrimitiveInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutFieldNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldColumn?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutFieldColumnNestedInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  required?: InputMaybe<BoolFieldUpdateOperationsInput>;
  showInCard?: InputMaybe<BoolFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type FieldUncheckedUpdateWithoutUpdatedUserInput = {
  FieldsValue?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutFieldNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldColumn?: InputMaybe<FieldColumnUncheckedUpdateManyWithoutFieldColumnNestedInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  fieldValueId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  order?: InputMaybe<IntFieldUpdateOperationsInput>;
  required?: InputMaybe<BoolFieldUpdateOperationsInput>;
  showInCard?: InputMaybe<BoolFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type FieldUpdateManyWithWhereWithoutCreatedUserInput = {
  data: FieldUncheckedUpdateManyWithoutCreatedUserInput;
  where: FieldScalarWhereInput;
};

export type FieldUpdateManyWithWhereWithoutPrimitiveInput = {
  data: FieldUncheckedUpdateManyWithoutPrimitiveInput;
  where: FieldScalarWhereInput;
};

export type FieldUpdateManyWithWhereWithoutUpdatedUserInput = {
  data: FieldUncheckedUpdateManyWithoutUpdatedUserInput;
  where: FieldScalarWhereInput;
};

export type FieldUpdateManyWithoutCreatedUserNestedInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<FieldCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<FieldCreateManyCreatedUserInputEnvelope>;
  delete?: InputMaybe<Array<FieldWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldUpdateWithWhereUniqueWithoutCreatedUserInput>>;
  updateMany?: InputMaybe<Array<FieldUpdateManyWithWhereWithoutCreatedUserInput>>;
  upsert?: InputMaybe<Array<FieldUpsertWithWhereUniqueWithoutCreatedUserInput>>;
};

export type FieldUpdateManyWithoutUpdatedUserNestedInput = {
  connect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<FieldCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<FieldCreateManyUpdatedUserInputEnvelope>;
  delete?: InputMaybe<Array<FieldWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldUpdateWithWhereUniqueWithoutUpdatedUserInput>>;
  updateMany?: InputMaybe<Array<FieldUpdateManyWithWhereWithoutUpdatedUserInput>>;
  upsert?: InputMaybe<Array<FieldUpsertWithWhereUniqueWithoutUpdatedUserInput>>;
};

export type FieldUpdateWithWhereUniqueWithoutCreatedUserInput = {
  data: FieldUncheckedUpdateWithoutCreatedUserInput;
  where: FieldWhereUniqueInput;
};

export type FieldUpdateWithWhereUniqueWithoutPrimitiveInput = {
  data: FieldUncheckedUpdateWithoutPrimitiveInput;
  where: FieldWhereUniqueInput;
};

export type FieldUpdateWithWhereUniqueWithoutUpdatedUserInput = {
  data: FieldUncheckedUpdateWithoutUpdatedUserInput;
  where: FieldWhereUniqueInput;
};

export type FieldUpsertWithWhereUniqueWithoutCreatedUserInput = {
  create: FieldUncheckedCreateWithoutCreatedUserInput;
  update: FieldUncheckedUpdateWithoutCreatedUserInput;
  where: FieldWhereUniqueInput;
};

export type FieldUpsertWithWhereUniqueWithoutPrimitiveInput = {
  create: FieldUncheckedCreateWithoutPrimitiveInput;
  update: FieldUncheckedUpdateWithoutPrimitiveInput;
  where: FieldWhereUniqueInput;
};

export type FieldUpsertWithWhereUniqueWithoutUpdatedUserInput = {
  create: FieldUncheckedCreateWithoutUpdatedUserInput;
  update: FieldUncheckedUpdateWithoutUpdatedUserInput;
  where: FieldWhereUniqueInput;
};

export type FieldWhereInput = {
  AND?: InputMaybe<Array<FieldWhereInput>>;
  FieldsValue?: InputMaybe<FieldsValueListRelationFilter>;
  NOT?: InputMaybe<Array<FieldWhereInput>>;
  OR?: InputMaybe<Array<FieldWhereInput>>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdUser?: InputMaybe<UserNullableRelationFilter>;
  description?: InputMaybe<StringFilter>;
  fieldColumn?: InputMaybe<FieldColumnListRelationFilter>;
  fieldType?: InputMaybe<EnumFieldTypeFilter>;
  fieldValueId?: InputMaybe<IntFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  primitive?: InputMaybe<PrimitiveFieldsRelationFilter>;
  required?: InputMaybe<BoolFilter>;
  showInCard?: InputMaybe<BoolFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedUser?: InputMaybe<UserNullableRelationFilter>;
};

export type FieldWhereUniqueInput = {
  AND?: InputMaybe<Array<FieldWhereInput>>;
  FieldsValue?: InputMaybe<FieldsValueListRelationFilter>;
  NOT?: InputMaybe<Array<FieldWhereInput>>;
  OR?: InputMaybe<Array<FieldWhereInput>>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdUser?: InputMaybe<UserNullableRelationFilter>;
  description?: InputMaybe<StringFilter>;
  fieldColumn?: InputMaybe<FieldColumnListRelationFilter>;
  fieldType?: InputMaybe<EnumFieldTypeFilter>;
  fieldValueId?: InputMaybe<IntFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<StringFilter>;
  order?: InputMaybe<IntFilter>;
  primitive?: InputMaybe<PrimitiveFieldsRelationFilter>;
  required?: InputMaybe<BoolFilter>;
  showInCard?: InputMaybe<BoolFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedUser?: InputMaybe<UserNullableRelationFilter>;
};

export type FieldsValue = {
  __typename?: 'FieldsValue';
  card: Card;
  cardId: Scalars['String']['output'];
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  field?: Maybe<Field>;
  fieldId?: Maybe<Scalars['Int']['output']>;
  fieldType: FieldType;
  id: Scalars['Int']['output'];
  user?: Maybe<User>;
};


export type FieldsValueFieldArgs = {
  where?: InputMaybe<FieldWhereInput>;
};


export type FieldsValueUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type FieldsValueAvgAggregate = {
  __typename?: 'FieldsValueAvgAggregate';
  fieldId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type FieldsValueAvgOrderByAggregateInput = {
  fieldId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type FieldsValueCountAggregate = {
  __typename?: 'FieldsValueCountAggregate';
  _all: Scalars['Int']['output'];
  cardId: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  fieldId: Scalars['Int']['output'];
  fieldType: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
};

export type FieldsValueCountOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  fieldId?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type FieldsValueCreateManyCardInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldId?: InputMaybe<Scalars['Int']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldsValueCreateManyCardInputEnvelope = {
  data: Array<FieldsValueCreateManyCardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldsValueCreateManyFieldInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldsValueCreateManyFieldInputEnvelope = {
  data: Array<FieldsValueCreateManyFieldInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldsValueCreateManyInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldId?: InputMaybe<Scalars['Int']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldsValueCreateManyUserInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fieldId?: InputMaybe<Scalars['Int']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldsValueCreateManyUserInputEnvelope = {
  data: Array<FieldsValueCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type FieldsValueCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutCardInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyCardInputEnvelope>;
};

export type FieldsValueCreateNestedManyWithoutFieldInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutFieldInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutFieldInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyFieldInputEnvelope>;
};

export type FieldsValueCreateOrConnectWithoutCardInput = {
  create: FieldsValueUncheckedCreateWithoutCardInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueCreateOrConnectWithoutFieldInput = {
  create: FieldsValueUncheckedCreateWithoutFieldInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueCreateOrConnectWithoutUserInput = {
  create: FieldsValueUncheckedCreateWithoutUserInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueCreateWithoutCardInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  field?: InputMaybe<FieldCreateNestedOneWithoutFieldsValueInput>;
  fieldType: FieldType;
  user?: InputMaybe<UserCreateNestedOneWithoutFieldValueCreatedByInput>;
};

export type FieldsValueCreateWithoutFieldInput = {
  card: CardCreateNestedOneWithoutFieldValueInput;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fieldType: FieldType;
  user?: InputMaybe<UserCreateNestedOneWithoutFieldValueCreatedByInput>;
};

export type FieldsValueCreateWithoutUserInput = {
  card: CardCreateNestedOneWithoutFieldValueInput;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  field?: InputMaybe<FieldCreateNestedOneWithoutFieldsValueInput>;
  fieldType: FieldType;
};

export type FieldsValueGroupBy = {
  __typename?: 'FieldsValueGroupBy';
  _avg?: Maybe<FieldsValueAvgAggregate>;
  _count?: Maybe<FieldsValueCountAggregate>;
  _max?: Maybe<FieldsValueMaxAggregate>;
  _min?: Maybe<FieldsValueMinAggregate>;
  _sum?: Maybe<FieldsValueSumAggregate>;
  cardId: Scalars['String']['output'];
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  fieldId?: Maybe<Scalars['Int']['output']>;
  fieldType: FieldType;
  id: Scalars['Int']['output'];
};

export type FieldsValueListRelationFilter = {
  every?: InputMaybe<FieldsValueWhereInput>;
  none?: InputMaybe<FieldsValueWhereInput>;
  some?: InputMaybe<FieldsValueWhereInput>;
};

export type FieldsValueMaxAggregate = {
  __typename?: 'FieldsValueMaxAggregate';
  cardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  fieldId?: Maybe<Scalars['Int']['output']>;
  fieldType?: Maybe<FieldType>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type FieldsValueMaxOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  fieldId?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type FieldsValueMinAggregate = {
  __typename?: 'FieldsValueMinAggregate';
  cardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  fieldId?: Maybe<Scalars['Int']['output']>;
  fieldType?: Maybe<FieldType>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type FieldsValueMinOrderByAggregateInput = {
  cardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  fieldId?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type FieldsValueOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type FieldsValueOrderByWithAggregationInput = {
  _avg?: InputMaybe<FieldsValueAvgOrderByAggregateInput>;
  _count?: InputMaybe<FieldsValueCountOrderByAggregateInput>;
  _max?: InputMaybe<FieldsValueMaxOrderByAggregateInput>;
  _min?: InputMaybe<FieldsValueMinOrderByAggregateInput>;
  _sum?: InputMaybe<FieldsValueSumOrderByAggregateInput>;
  cardId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  fieldId?: InputMaybe<SortOrderInput>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type FieldsValueOrderByWithRelationInput = {
  card?: InputMaybe<CardOrderByWithRelationInput>;
  cardId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  field?: InputMaybe<FieldOrderByWithRelationInput>;
  fieldId?: InputMaybe<SortOrderInput>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export enum FieldsValueScalarFieldEnum {
  CardId = 'cardId',
  Content = 'content',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  FieldId = 'fieldId',
  FieldType = 'fieldType',
  Id = 'id'
}

export type FieldsValueScalarWhereInput = {
  AND?: InputMaybe<Array<FieldsValueScalarWhereInput>>;
  NOT?: InputMaybe<Array<FieldsValueScalarWhereInput>>;
  OR?: InputMaybe<Array<FieldsValueScalarWhereInput>>;
  cardId?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  fieldId?: InputMaybe<IntNullableFilter>;
  fieldType?: InputMaybe<EnumFieldTypeFilter>;
  id?: InputMaybe<IntFilter>;
};

export type FieldsValueScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<FieldsValueScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<FieldsValueScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<FieldsValueScalarWhereWithAggregatesInput>>;
  cardId?: InputMaybe<StringWithAggregatesFilter>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  fieldId?: InputMaybe<IntNullableWithAggregatesFilter>;
  fieldType?: InputMaybe<EnumFieldTypeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
};

export type FieldsValueSumAggregate = {
  __typename?: 'FieldsValueSumAggregate';
  fieldId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type FieldsValueSumOrderByAggregateInput = {
  fieldId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type FieldsValueUncheckedCreateInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldId?: InputMaybe<Scalars['Int']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldsValueUncheckedCreateNestedManyWithoutCardInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutCardInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyCardInputEnvelope>;
};

export type FieldsValueUncheckedCreateNestedManyWithoutFieldInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutFieldInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutFieldInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyFieldInputEnvelope>;
};

export type FieldsValueUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutUserInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyUserInputEnvelope>;
};

export type FieldsValueUncheckedCreateWithoutCardInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldId?: InputMaybe<Scalars['Int']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldsValueUncheckedCreateWithoutFieldInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldsValueUncheckedCreateWithoutUserInput = {
  cardId: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fieldId?: InputMaybe<Scalars['Int']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type FieldsValueUncheckedUpdateInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldsValueUncheckedUpdateManyInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldsValueUncheckedUpdateManyWithoutCardInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldsValueUncheckedUpdateManyWithoutCardNestedInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutCardInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutCardInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyCardInputEnvelope>;
  delete?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldsValueScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldsValueUpdateWithWhereUniqueWithoutCardInput>>;
  updateMany?: InputMaybe<Array<FieldsValueUpdateManyWithWhereWithoutCardInput>>;
  upsert?: InputMaybe<Array<FieldsValueUpsertWithWhereUniqueWithoutCardInput>>;
};

export type FieldsValueUncheckedUpdateManyWithoutFieldInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldsValueUncheckedUpdateManyWithoutFieldNestedInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutFieldInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutFieldInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyFieldInputEnvelope>;
  delete?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldsValueScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldsValueUpdateWithWhereUniqueWithoutFieldInput>>;
  updateMany?: InputMaybe<Array<FieldsValueUpdateManyWithWhereWithoutFieldInput>>;
  upsert?: InputMaybe<Array<FieldsValueUpsertWithWhereUniqueWithoutFieldInput>>;
};

export type FieldsValueUncheckedUpdateManyWithoutUserInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fieldId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldsValueUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutUserInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldsValueScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldsValueUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<FieldsValueUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<FieldsValueUpsertWithWhereUniqueWithoutUserInput>>;
};

export type FieldsValueUncheckedUpdateWithoutCardInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldsValueUncheckedUpdateWithoutFieldInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldsValueUncheckedUpdateWithoutUserInput = {
  cardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fieldId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type FieldsValueUpdateManyWithWhereWithoutCardInput = {
  data: FieldsValueUncheckedUpdateManyWithoutCardInput;
  where: FieldsValueScalarWhereInput;
};

export type FieldsValueUpdateManyWithWhereWithoutFieldInput = {
  data: FieldsValueUncheckedUpdateManyWithoutFieldInput;
  where: FieldsValueScalarWhereInput;
};

export type FieldsValueUpdateManyWithWhereWithoutUserInput = {
  data: FieldsValueUncheckedUpdateManyWithoutUserInput;
  where: FieldsValueScalarWhereInput;
};

export type FieldsValueUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<FieldsValueCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<FieldsValueCreateWithoutUserInput>>;
  createMany?: InputMaybe<FieldsValueCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<FieldsValueScalarWhereInput>>;
  disconnect?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  set?: InputMaybe<Array<FieldsValueWhereUniqueInput>>;
  update?: InputMaybe<Array<FieldsValueUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<FieldsValueUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<FieldsValueUpsertWithWhereUniqueWithoutUserInput>>;
};

export type FieldsValueUpdateWithWhereUniqueWithoutCardInput = {
  data: FieldsValueUncheckedUpdateWithoutCardInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueUpdateWithWhereUniqueWithoutFieldInput = {
  data: FieldsValueUncheckedUpdateWithoutFieldInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueUpdateWithWhereUniqueWithoutUserInput = {
  data: FieldsValueUncheckedUpdateWithoutUserInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueUpsertWithWhereUniqueWithoutCardInput = {
  create: FieldsValueUncheckedCreateWithoutCardInput;
  update: FieldsValueUncheckedUpdateWithoutCardInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueUpsertWithWhereUniqueWithoutFieldInput = {
  create: FieldsValueUncheckedCreateWithoutFieldInput;
  update: FieldsValueUncheckedUpdateWithoutFieldInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueUpsertWithWhereUniqueWithoutUserInput = {
  create: FieldsValueUncheckedCreateWithoutUserInput;
  update: FieldsValueUncheckedUpdateWithoutUserInput;
  where: FieldsValueWhereUniqueInput;
};

export type FieldsValueWhereInput = {
  AND?: InputMaybe<Array<FieldsValueWhereInput>>;
  NOT?: InputMaybe<Array<FieldsValueWhereInput>>;
  OR?: InputMaybe<Array<FieldsValueWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  cardId?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  field?: InputMaybe<FieldNullableRelationFilter>;
  fieldId?: InputMaybe<IntNullableFilter>;
  fieldType?: InputMaybe<EnumFieldTypeFilter>;
  id?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type FieldsValueWhereUniqueInput = {
  AND?: InputMaybe<Array<FieldsValueWhereInput>>;
  NOT?: InputMaybe<Array<FieldsValueWhereInput>>;
  OR?: InputMaybe<Array<FieldsValueWhereInput>>;
  card?: InputMaybe<CardRelationFilter>;
  cardId?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  field?: InputMaybe<FieldNullableRelationFilter>;
  fieldId?: InputMaybe<IntNullableFilter>;
  fieldType?: InputMaybe<EnumFieldTypeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type FloatFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Float']['input']>;
  divide?: InputMaybe<Scalars['Float']['input']>;
  increment?: InputMaybe<Scalars['Float']['input']>;
  multiply?: InputMaybe<Scalars['Float']['input']>;
  set?: InputMaybe<Scalars['Float']['input']>;
};

export type FloatFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type FloatWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatFilter>;
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedFloatFilter>;
  _min?: InputMaybe<NestedFloatFilter>;
  _sum?: InputMaybe<NestedFloatFilter>;
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type ForgotPassword = {
  email: Scalars['String']['input'];
};

export type Group = {
  __typename?: 'Group';
  _count?: Maybe<GroupCount>;
  board?: Maybe<Board>;
  boardId?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdUser?: Maybe<User>;
  groupMenbership: Array<GroupMenbership>;
  groupUser: Array<GroupUser>;
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  permission?: Maybe<Permission>;
  updatedBy?: Maybe<Scalars['String']['output']>;
  updatedUser?: Maybe<User>;
};


export type GroupBoardArgs = {
  where?: InputMaybe<BoardWhereInput>;
};


export type GroupCreatedUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type GroupGroupMenbershipArgs = {
  cursor?: InputMaybe<GroupMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type GroupGroupUserArgs = {
  cursor?: InputMaybe<GroupUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupUserWhereInput>;
};


export type GroupPermissionArgs = {
  where?: InputMaybe<PermissionWhereInput>;
};


export type GroupUpdatedUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type GroupAvgAggregate = {
  __typename?: 'GroupAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type GroupAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type GroupCount = {
  __typename?: 'GroupCount';
  groupMenbership: Scalars['Int']['output'];
  groupUser: Scalars['Int']['output'];
};


export type GroupCountGroupMenbershipArgs = {
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type GroupCountGroupUserArgs = {
  where?: InputMaybe<GroupUserWhereInput>;
};

export type GroupCountAggregate = {
  __typename?: 'GroupCountAggregate';
  _all: Scalars['Int']['output'];
  boardId: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type GroupCountOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type GroupCreateManyBoardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type GroupCreateManyBoardInputEnvelope = {
  data: Array<GroupCreateManyBoardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupCreateManyCreatedUserInput = {
  boardId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type GroupCreateManyCreatedUserInputEnvelope = {
  data: Array<GroupCreateManyCreatedUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupCreateManyInput = {
  boardId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type GroupCreateManyUpdatedUserInput = {
  boardId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
};

export type GroupCreateManyUpdatedUserInputEnvelope = {
  data: Array<GroupCreateManyUpdatedUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutBoardInput>>;
  createMany?: InputMaybe<GroupCreateManyBoardInputEnvelope>;
};

export type GroupCreateNestedOneWithoutGroupMenbershipInput = {
  connect?: InputMaybe<GroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<GroupCreateOrConnectWithoutGroupMenbershipInput>;
  create?: InputMaybe<GroupUncheckedCreateWithoutGroupMenbershipInput>;
};

export type GroupCreateNestedOneWithoutGroupUserInput = {
  connect?: InputMaybe<GroupWhereUniqueInput>;
  connectOrCreate?: InputMaybe<GroupCreateOrConnectWithoutGroupUserInput>;
  create?: InputMaybe<GroupUncheckedCreateWithoutGroupUserInput>;
};

export type GroupCreateOrConnectWithoutBoardInput = {
  create: GroupUncheckedCreateWithoutBoardInput;
  where: GroupWhereUniqueInput;
};

export type GroupCreateOrConnectWithoutCreatedUserInput = {
  create: GroupUncheckedCreateWithoutCreatedUserInput;
  where: GroupWhereUniqueInput;
};

export type GroupCreateOrConnectWithoutGroupMenbershipInput = {
  create: GroupUncheckedCreateWithoutGroupMenbershipInput;
  where: GroupWhereUniqueInput;
};

export type GroupCreateOrConnectWithoutGroupUserInput = {
  create: GroupUncheckedCreateWithoutGroupUserInput;
  where: GroupWhereUniqueInput;
};

export type GroupCreateOrConnectWithoutUpdatedUserInput = {
  create: GroupUncheckedCreateWithoutUpdatedUserInput;
  where: GroupWhereUniqueInput;
};

export type GroupCreateWithoutBoardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdUser?: InputMaybe<UserCreateNestedOneWithoutGroupCreatedByInput>;
  groupMenbership?: InputMaybe<GroupMenbershipCreateNestedManyWithoutGroupInput>;
  groupUser?: InputMaybe<GroupUserCreateNestedManyWithoutGroupInput>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionCreateNestedOneWithoutGroupInput>;
  updatedUser?: InputMaybe<UserCreateNestedOneWithoutGroupUpdatedByInput>;
};

export type GroupCreateWithoutCreatedUserInput = {
  board?: InputMaybe<BoardCreateNestedOneWithoutGroupInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  groupMenbership?: InputMaybe<GroupMenbershipCreateNestedManyWithoutGroupInput>;
  groupUser?: InputMaybe<GroupUserCreateNestedManyWithoutGroupInput>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionCreateNestedOneWithoutGroupInput>;
  updatedUser?: InputMaybe<UserCreateNestedOneWithoutGroupUpdatedByInput>;
};

export type GroupCreateWithoutUpdatedUserInput = {
  board?: InputMaybe<BoardCreateNestedOneWithoutGroupInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdUser?: InputMaybe<UserCreateNestedOneWithoutGroupCreatedByInput>;
  groupMenbership?: InputMaybe<GroupMenbershipCreateNestedManyWithoutGroupInput>;
  groupUser?: InputMaybe<GroupUserCreateNestedManyWithoutGroupInput>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionCreateNestedOneWithoutGroupInput>;
};

export type GroupGroupBy = {
  __typename?: 'GroupGroupBy';
  _avg?: Maybe<GroupAvgAggregate>;
  _count?: Maybe<GroupCountAggregate>;
  _max?: Maybe<GroupMaxAggregate>;
  _min?: Maybe<GroupMinAggregate>;
  _sum?: Maybe<GroupSumAggregate>;
  boardId?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type GroupListRelationFilter = {
  every?: InputMaybe<GroupWhereInput>;
  none?: InputMaybe<GroupWhereInput>;
  some?: InputMaybe<GroupWhereInput>;
};

export type GroupMaxAggregate = {
  __typename?: 'GroupMaxAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type GroupMaxOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type GroupMenbership = {
  __typename?: 'GroupMenbership';
  board: Board;
  boardId: Scalars['String']['output'];
  group: Group;
  groupId: Scalars['Int']['output'];
};

export type GroupMenbershipAvgAggregate = {
  __typename?: 'GroupMenbershipAvgAggregate';
  groupId?: Maybe<Scalars['Float']['output']>;
};

export type GroupMenbershipAvgOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
};

export type GroupMenbershipCountAggregate = {
  __typename?: 'GroupMenbershipCountAggregate';
  _all: Scalars['Int']['output'];
  boardId: Scalars['Int']['output'];
  groupId: Scalars['Int']['output'];
};

export type GroupMenbershipCountOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  groupId?: InputMaybe<SortOrder>;
};

export type GroupMenbershipCreateManyBoardInput = {
  groupId: Scalars['Int']['input'];
};

export type GroupMenbershipCreateManyBoardInputEnvelope = {
  data: Array<GroupMenbershipCreateManyBoardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupMenbershipCreateManyGroupInput = {
  boardId: Scalars['String']['input'];
};

export type GroupMenbershipCreateManyGroupInputEnvelope = {
  data: Array<GroupMenbershipCreateManyGroupInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupMenbershipCreateManyInput = {
  boardId: Scalars['String']['input'];
  groupId: Scalars['Int']['input'];
};

export type GroupMenbershipCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupMenbershipCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<GroupMenbershipCreateWithoutBoardInput>>;
  createMany?: InputMaybe<GroupMenbershipCreateManyBoardInputEnvelope>;
};

export type GroupMenbershipCreateNestedManyWithoutGroupInput = {
  connect?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupMenbershipCreateOrConnectWithoutGroupInput>>;
  create?: InputMaybe<Array<GroupMenbershipCreateWithoutGroupInput>>;
  createMany?: InputMaybe<GroupMenbershipCreateManyGroupInputEnvelope>;
};

export type GroupMenbershipCreateOrConnectWithoutBoardInput = {
  create: GroupMenbershipUncheckedCreateWithoutBoardInput;
  where: GroupMenbershipWhereUniqueInput;
};

export type GroupMenbershipCreateOrConnectWithoutGroupInput = {
  create: GroupMenbershipUncheckedCreateWithoutGroupInput;
  where: GroupMenbershipWhereUniqueInput;
};

export type GroupMenbershipCreateWithoutBoardInput = {
  group: GroupCreateNestedOneWithoutGroupMenbershipInput;
};

export type GroupMenbershipCreateWithoutGroupInput = {
  board: BoardCreateNestedOneWithoutGroupMenbershipInput;
};

export type GroupMenbershipGroupBy = {
  __typename?: 'GroupMenbershipGroupBy';
  _avg?: Maybe<GroupMenbershipAvgAggregate>;
  _count?: Maybe<GroupMenbershipCountAggregate>;
  _max?: Maybe<GroupMenbershipMaxAggregate>;
  _min?: Maybe<GroupMenbershipMinAggregate>;
  _sum?: Maybe<GroupMenbershipSumAggregate>;
  boardId: Scalars['String']['output'];
  groupId: Scalars['Int']['output'];
};

export type GroupMenbershipGroupIdBoardIdCompoundUniqueInput = {
  boardId: Scalars['String']['input'];
  groupId: Scalars['Int']['input'];
};

export type GroupMenbershipListRelationFilter = {
  every?: InputMaybe<GroupMenbershipWhereInput>;
  none?: InputMaybe<GroupMenbershipWhereInput>;
  some?: InputMaybe<GroupMenbershipWhereInput>;
};

export type GroupMenbershipMaxAggregate = {
  __typename?: 'GroupMenbershipMaxAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  groupId?: Maybe<Scalars['Int']['output']>;
};

export type GroupMenbershipMaxOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  groupId?: InputMaybe<SortOrder>;
};

export type GroupMenbershipMinAggregate = {
  __typename?: 'GroupMenbershipMinAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  groupId?: Maybe<Scalars['Int']['output']>;
};

export type GroupMenbershipMinOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  groupId?: InputMaybe<SortOrder>;
};

export type GroupMenbershipOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type GroupMenbershipOrderByWithAggregationInput = {
  _avg?: InputMaybe<GroupMenbershipAvgOrderByAggregateInput>;
  _count?: InputMaybe<GroupMenbershipCountOrderByAggregateInput>;
  _max?: InputMaybe<GroupMenbershipMaxOrderByAggregateInput>;
  _min?: InputMaybe<GroupMenbershipMinOrderByAggregateInput>;
  _sum?: InputMaybe<GroupMenbershipSumOrderByAggregateInput>;
  boardId?: InputMaybe<SortOrder>;
  groupId?: InputMaybe<SortOrder>;
};

export type GroupMenbershipOrderByWithRelationInput = {
  board?: InputMaybe<BoardOrderByWithRelationInput>;
  boardId?: InputMaybe<SortOrder>;
  group?: InputMaybe<GroupOrderByWithRelationInput>;
  groupId?: InputMaybe<SortOrder>;
};

export enum GroupMenbershipScalarFieldEnum {
  BoardId = 'boardId',
  GroupId = 'groupId'
}

export type GroupMenbershipScalarWhereInput = {
  AND?: InputMaybe<Array<GroupMenbershipScalarWhereInput>>;
  NOT?: InputMaybe<Array<GroupMenbershipScalarWhereInput>>;
  OR?: InputMaybe<Array<GroupMenbershipScalarWhereInput>>;
  boardId?: InputMaybe<StringFilter>;
  groupId?: InputMaybe<IntFilter>;
};

export type GroupMenbershipScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<GroupMenbershipScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<GroupMenbershipScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<GroupMenbershipScalarWhereWithAggregatesInput>>;
  boardId?: InputMaybe<StringWithAggregatesFilter>;
  groupId?: InputMaybe<IntWithAggregatesFilter>;
};

export type GroupMenbershipSumAggregate = {
  __typename?: 'GroupMenbershipSumAggregate';
  groupId?: Maybe<Scalars['Int']['output']>;
};

export type GroupMenbershipSumOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
};

export type GroupMenbershipUncheckedCreateInput = {
  boardId: Scalars['String']['input'];
  groupId: Scalars['Int']['input'];
};

export type GroupMenbershipUncheckedCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupMenbershipCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<GroupMenbershipCreateWithoutBoardInput>>;
  createMany?: InputMaybe<GroupMenbershipCreateManyBoardInputEnvelope>;
};

export type GroupMenbershipUncheckedCreateNestedManyWithoutGroupInput = {
  connect?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupMenbershipCreateOrConnectWithoutGroupInput>>;
  create?: InputMaybe<Array<GroupMenbershipCreateWithoutGroupInput>>;
  createMany?: InputMaybe<GroupMenbershipCreateManyGroupInputEnvelope>;
};

export type GroupMenbershipUncheckedCreateWithoutBoardInput = {
  groupId: Scalars['Int']['input'];
};

export type GroupMenbershipUncheckedCreateWithoutGroupInput = {
  boardId: Scalars['String']['input'];
};

export type GroupMenbershipUncheckedUpdateInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type GroupMenbershipUncheckedUpdateManyInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type GroupMenbershipUncheckedUpdateManyWithoutBoardInput = {
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type GroupMenbershipUncheckedUpdateManyWithoutBoardNestedInput = {
  connect?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupMenbershipCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<GroupMenbershipCreateWithoutBoardInput>>;
  createMany?: InputMaybe<GroupMenbershipCreateManyBoardInputEnvelope>;
  delete?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupMenbershipScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupMenbershipUpdateWithWhereUniqueWithoutBoardInput>>;
  updateMany?: InputMaybe<Array<GroupMenbershipUpdateManyWithWhereWithoutBoardInput>>;
  upsert?: InputMaybe<Array<GroupMenbershipUpsertWithWhereUniqueWithoutBoardInput>>;
};

export type GroupMenbershipUncheckedUpdateManyWithoutGroupInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type GroupMenbershipUncheckedUpdateManyWithoutGroupNestedInput = {
  connect?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupMenbershipCreateOrConnectWithoutGroupInput>>;
  create?: InputMaybe<Array<GroupMenbershipCreateWithoutGroupInput>>;
  createMany?: InputMaybe<GroupMenbershipCreateManyGroupInputEnvelope>;
  delete?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupMenbershipScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupMenbershipWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupMenbershipUpdateWithWhereUniqueWithoutGroupInput>>;
  updateMany?: InputMaybe<Array<GroupMenbershipUpdateManyWithWhereWithoutGroupInput>>;
  upsert?: InputMaybe<Array<GroupMenbershipUpsertWithWhereUniqueWithoutGroupInput>>;
};

export type GroupMenbershipUncheckedUpdateWithoutBoardInput = {
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type GroupMenbershipUncheckedUpdateWithoutGroupInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type GroupMenbershipUpdateManyWithWhereWithoutBoardInput = {
  data: GroupMenbershipUncheckedUpdateManyWithoutBoardInput;
  where: GroupMenbershipScalarWhereInput;
};

export type GroupMenbershipUpdateManyWithWhereWithoutGroupInput = {
  data: GroupMenbershipUncheckedUpdateManyWithoutGroupInput;
  where: GroupMenbershipScalarWhereInput;
};

export type GroupMenbershipUpdateWithWhereUniqueWithoutBoardInput = {
  data: GroupMenbershipUncheckedUpdateWithoutBoardInput;
  where: GroupMenbershipWhereUniqueInput;
};

export type GroupMenbershipUpdateWithWhereUniqueWithoutGroupInput = {
  data: GroupMenbershipUncheckedUpdateWithoutGroupInput;
  where: GroupMenbershipWhereUniqueInput;
};

export type GroupMenbershipUpsertWithWhereUniqueWithoutBoardInput = {
  create: GroupMenbershipUncheckedCreateWithoutBoardInput;
  update: GroupMenbershipUncheckedUpdateWithoutBoardInput;
  where: GroupMenbershipWhereUniqueInput;
};

export type GroupMenbershipUpsertWithWhereUniqueWithoutGroupInput = {
  create: GroupMenbershipUncheckedCreateWithoutGroupInput;
  update: GroupMenbershipUncheckedUpdateWithoutGroupInput;
  where: GroupMenbershipWhereUniqueInput;
};

export type GroupMenbershipWhereInput = {
  AND?: InputMaybe<Array<GroupMenbershipWhereInput>>;
  NOT?: InputMaybe<Array<GroupMenbershipWhereInput>>;
  OR?: InputMaybe<Array<GroupMenbershipWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  group?: InputMaybe<GroupRelationFilter>;
  groupId?: InputMaybe<IntFilter>;
};

export type GroupMenbershipWhereUniqueInput = {
  AND?: InputMaybe<Array<GroupMenbershipWhereInput>>;
  NOT?: InputMaybe<Array<GroupMenbershipWhereInput>>;
  OR?: InputMaybe<Array<GroupMenbershipWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  group?: InputMaybe<GroupRelationFilter>;
  groupId?: InputMaybe<IntFilter>;
  groupId_boardId?: InputMaybe<GroupMenbershipGroupIdBoardIdCompoundUniqueInput>;
};

export type GroupMinAggregate = {
  __typename?: 'GroupMinAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type GroupMinOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type GroupOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type GroupOrderByWithAggregationInput = {
  _avg?: InputMaybe<GroupAvgOrderByAggregateInput>;
  _count?: InputMaybe<GroupCountOrderByAggregateInput>;
  _max?: InputMaybe<GroupMaxOrderByAggregateInput>;
  _min?: InputMaybe<GroupMinOrderByAggregateInput>;
  _sum?: InputMaybe<GroupSumOrderByAggregateInput>;
  boardId?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
};

export type GroupOrderByWithRelationInput = {
  board?: InputMaybe<BoardOrderByWithRelationInput>;
  boardId?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdUser?: InputMaybe<UserOrderByWithRelationInput>;
  groupMenbership?: InputMaybe<GroupMenbershipOrderByRelationAggregateInput>;
  groupUser?: InputMaybe<GroupUserOrderByRelationAggregateInput>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  permission?: InputMaybe<PermissionOrderByWithRelationInput>;
  updatedBy?: InputMaybe<SortOrderInput>;
  updatedUser?: InputMaybe<UserOrderByWithRelationInput>;
};

export type GroupRelationFilter = {
  is?: InputMaybe<GroupWhereInput>;
  isNot?: InputMaybe<GroupWhereInput>;
};

export enum GroupScalarFieldEnum {
  BoardId = 'boardId',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Id = 'id',
  Name = 'name',
  UpdatedBy = 'updatedBy'
}

export type GroupScalarWhereInput = {
  AND?: InputMaybe<Array<GroupScalarWhereInput>>;
  NOT?: InputMaybe<Array<GroupScalarWhereInput>>;
  OR?: InputMaybe<Array<GroupScalarWhereInput>>;
  boardId?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
};

export type GroupScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<GroupScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<GroupScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<GroupScalarWhereWithAggregatesInput>>;
  boardId?: InputMaybe<StringNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export type GroupSumAggregate = {
  __typename?: 'GroupSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type GroupSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type GroupUncheckedCreateInput = {
  boardId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutGroupInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutGroupInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionUncheckedCreateNestedOneWithoutGroupInput>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type GroupUncheckedCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutBoardInput>>;
  createMany?: InputMaybe<GroupCreateManyBoardInputEnvelope>;
};

export type GroupUncheckedCreateNestedManyWithoutCreatedUserInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<GroupCreateManyCreatedUserInputEnvelope>;
};

export type GroupUncheckedCreateNestedManyWithoutUpdatedUserInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<GroupCreateManyUpdatedUserInputEnvelope>;
};

export type GroupUncheckedCreateWithoutBoardInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutGroupInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutGroupInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionUncheckedCreateNestedOneWithoutGroupInput>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type GroupUncheckedCreateWithoutCreatedUserInput = {
  boardId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutGroupInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutGroupInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionUncheckedCreateNestedOneWithoutGroupInput>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type GroupUncheckedCreateWithoutGroupMenbershipInput = {
  boardId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutGroupInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionUncheckedCreateNestedOneWithoutGroupInput>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type GroupUncheckedCreateWithoutGroupUserInput = {
  boardId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutGroupInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionUncheckedCreateNestedOneWithoutGroupInput>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type GroupUncheckedCreateWithoutUpdatedUserInput = {
  boardId?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedCreateNestedManyWithoutGroupInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutGroupInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  permission?: InputMaybe<PermissionUncheckedCreateNestedOneWithoutGroupInput>;
};

export type GroupUncheckedUpdateInput = {
  boardId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedUpdateManyWithoutGroupNestedInput>;
  groupUser?: InputMaybe<GroupUserUncheckedUpdateManyWithoutGroupNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  permission?: InputMaybe<PermissionUncheckedUpdateOneWithoutGroupNestedInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type GroupUncheckedUpdateManyInput = {
  boardId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type GroupUncheckedUpdateManyWithoutBoardInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type GroupUncheckedUpdateManyWithoutBoardNestedInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutBoardInput>>;
  createMany?: InputMaybe<GroupCreateManyBoardInputEnvelope>;
  delete?: InputMaybe<Array<GroupWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupUpdateWithWhereUniqueWithoutBoardInput>>;
  updateMany?: InputMaybe<Array<GroupUpdateManyWithWhereWithoutBoardInput>>;
  upsert?: InputMaybe<Array<GroupUpsertWithWhereUniqueWithoutBoardInput>>;
};

export type GroupUncheckedUpdateManyWithoutCreatedUserInput = {
  boardId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type GroupUncheckedUpdateManyWithoutCreatedUserNestedInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<GroupCreateManyCreatedUserInputEnvelope>;
  delete?: InputMaybe<Array<GroupWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupUpdateWithWhereUniqueWithoutCreatedUserInput>>;
  updateMany?: InputMaybe<Array<GroupUpdateManyWithWhereWithoutCreatedUserInput>>;
  upsert?: InputMaybe<Array<GroupUpsertWithWhereUniqueWithoutCreatedUserInput>>;
};

export type GroupUncheckedUpdateManyWithoutUpdatedUserInput = {
  boardId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type GroupUncheckedUpdateManyWithoutUpdatedUserNestedInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<GroupCreateManyUpdatedUserInputEnvelope>;
  delete?: InputMaybe<Array<GroupWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupUpdateWithWhereUniqueWithoutUpdatedUserInput>>;
  updateMany?: InputMaybe<Array<GroupUpdateManyWithWhereWithoutUpdatedUserInput>>;
  upsert?: InputMaybe<Array<GroupUpsertWithWhereUniqueWithoutUpdatedUserInput>>;
};

export type GroupUncheckedUpdateWithoutBoardInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedUpdateManyWithoutGroupNestedInput>;
  groupUser?: InputMaybe<GroupUserUncheckedUpdateManyWithoutGroupNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  permission?: InputMaybe<PermissionUncheckedUpdateOneWithoutGroupNestedInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type GroupUncheckedUpdateWithoutCreatedUserInput = {
  boardId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedUpdateManyWithoutGroupNestedInput>;
  groupUser?: InputMaybe<GroupUserUncheckedUpdateManyWithoutGroupNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  permission?: InputMaybe<PermissionUncheckedUpdateOneWithoutGroupNestedInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type GroupUncheckedUpdateWithoutUpdatedUserInput = {
  boardId?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  groupMenbership?: InputMaybe<GroupMenbershipUncheckedUpdateManyWithoutGroupNestedInput>;
  groupUser?: InputMaybe<GroupUserUncheckedUpdateManyWithoutGroupNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  permission?: InputMaybe<PermissionUncheckedUpdateOneWithoutGroupNestedInput>;
};

export type GroupUpdateManyWithWhereWithoutBoardInput = {
  data: GroupUncheckedUpdateManyWithoutBoardInput;
  where: GroupScalarWhereInput;
};

export type GroupUpdateManyWithWhereWithoutCreatedUserInput = {
  data: GroupUncheckedUpdateManyWithoutCreatedUserInput;
  where: GroupScalarWhereInput;
};

export type GroupUpdateManyWithWhereWithoutUpdatedUserInput = {
  data: GroupUncheckedUpdateManyWithoutUpdatedUserInput;
  where: GroupScalarWhereInput;
};

export type GroupUpdateManyWithoutCreatedUserNestedInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<GroupCreateManyCreatedUserInputEnvelope>;
  delete?: InputMaybe<Array<GroupWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupUpdateWithWhereUniqueWithoutCreatedUserInput>>;
  updateMany?: InputMaybe<Array<GroupUpdateManyWithWhereWithoutCreatedUserInput>>;
  upsert?: InputMaybe<Array<GroupUpsertWithWhereUniqueWithoutCreatedUserInput>>;
};

export type GroupUpdateManyWithoutUpdatedUserNestedInput = {
  connect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<GroupCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<GroupCreateManyUpdatedUserInputEnvelope>;
  delete?: InputMaybe<Array<GroupWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupUpdateWithWhereUniqueWithoutUpdatedUserInput>>;
  updateMany?: InputMaybe<Array<GroupUpdateManyWithWhereWithoutUpdatedUserInput>>;
  upsert?: InputMaybe<Array<GroupUpsertWithWhereUniqueWithoutUpdatedUserInput>>;
};

export type GroupUpdateWithWhereUniqueWithoutBoardInput = {
  data: GroupUncheckedUpdateWithoutBoardInput;
  where: GroupWhereUniqueInput;
};

export type GroupUpdateWithWhereUniqueWithoutCreatedUserInput = {
  data: GroupUncheckedUpdateWithoutCreatedUserInput;
  where: GroupWhereUniqueInput;
};

export type GroupUpdateWithWhereUniqueWithoutUpdatedUserInput = {
  data: GroupUncheckedUpdateWithoutUpdatedUserInput;
  where: GroupWhereUniqueInput;
};

export type GroupUpsertWithWhereUniqueWithoutBoardInput = {
  create: GroupUncheckedCreateWithoutBoardInput;
  update: GroupUncheckedUpdateWithoutBoardInput;
  where: GroupWhereUniqueInput;
};

export type GroupUpsertWithWhereUniqueWithoutCreatedUserInput = {
  create: GroupUncheckedCreateWithoutCreatedUserInput;
  update: GroupUncheckedUpdateWithoutCreatedUserInput;
  where: GroupWhereUniqueInput;
};

export type GroupUpsertWithWhereUniqueWithoutUpdatedUserInput = {
  create: GroupUncheckedCreateWithoutUpdatedUserInput;
  update: GroupUncheckedUpdateWithoutUpdatedUserInput;
  where: GroupWhereUniqueInput;
};

export type GroupUser = {
  __typename?: 'GroupUser';
  group: Group;
  groupId: Scalars['Int']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type GroupUserAvgAggregate = {
  __typename?: 'GroupUserAvgAggregate';
  groupId?: Maybe<Scalars['Float']['output']>;
};

export type GroupUserAvgOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
};

export type GroupUserCountAggregate = {
  __typename?: 'GroupUserCountAggregate';
  _all: Scalars['Int']['output'];
  groupId: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type GroupUserCountOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type GroupUserCreateManyGroupInput = {
  userUuid: Scalars['String']['input'];
};

export type GroupUserCreateManyGroupInputEnvelope = {
  data: Array<GroupUserCreateManyGroupInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupUserCreateManyInput = {
  groupId?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type GroupUserCreateManyUserInput = {
  groupId?: InputMaybe<Scalars['Int']['input']>;
};

export type GroupUserCreateManyUserInputEnvelope = {
  data: Array<GroupUserCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type GroupUserCreateNestedManyWithoutGroupInput = {
  connect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupUserCreateOrConnectWithoutGroupInput>>;
  create?: InputMaybe<Array<GroupUserCreateWithoutGroupInput>>;
  createMany?: InputMaybe<GroupUserCreateManyGroupInputEnvelope>;
};

export type GroupUserCreateOrConnectWithoutGroupInput = {
  create: GroupUserUncheckedCreateWithoutGroupInput;
  where: GroupUserWhereUniqueInput;
};

export type GroupUserCreateOrConnectWithoutUserInput = {
  create: GroupUserUncheckedCreateWithoutUserInput;
  where: GroupUserWhereUniqueInput;
};

export type GroupUserCreateWithoutGroupInput = {
  user: UserCreateNestedOneWithoutGroupUserInput;
};

export type GroupUserCreateWithoutUserInput = {
  group?: InputMaybe<GroupCreateNestedOneWithoutGroupUserInput>;
};

export type GroupUserGroupBy = {
  __typename?: 'GroupUserGroupBy';
  _avg?: Maybe<GroupUserAvgAggregate>;
  _count?: Maybe<GroupUserCountAggregate>;
  _max?: Maybe<GroupUserMaxAggregate>;
  _min?: Maybe<GroupUserMinAggregate>;
  _sum?: Maybe<GroupUserSumAggregate>;
  groupId: Scalars['Int']['output'];
  userUuid: Scalars['String']['output'];
};

export type GroupUserGroupIdUserUuidCompoundUniqueInput = {
  groupId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type GroupUserListRelationFilter = {
  every?: InputMaybe<GroupUserWhereInput>;
  none?: InputMaybe<GroupUserWhereInput>;
  some?: InputMaybe<GroupUserWhereInput>;
};

export type GroupUserMaxAggregate = {
  __typename?: 'GroupUserMaxAggregate';
  groupId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type GroupUserMaxOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type GroupUserMinAggregate = {
  __typename?: 'GroupUserMinAggregate';
  groupId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type GroupUserMinOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type GroupUserOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type GroupUserOrderByWithAggregationInput = {
  _avg?: InputMaybe<GroupUserAvgOrderByAggregateInput>;
  _count?: InputMaybe<GroupUserCountOrderByAggregateInput>;
  _max?: InputMaybe<GroupUserMaxOrderByAggregateInput>;
  _min?: InputMaybe<GroupUserMinOrderByAggregateInput>;
  _sum?: InputMaybe<GroupUserSumOrderByAggregateInput>;
  groupId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type GroupUserOrderByWithRelationInput = {
  group?: InputMaybe<GroupOrderByWithRelationInput>;
  groupId?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum GroupUserScalarFieldEnum {
  GroupId = 'groupId',
  UserUuid = 'userUuid'
}

export type GroupUserScalarWhereInput = {
  AND?: InputMaybe<Array<GroupUserScalarWhereInput>>;
  NOT?: InputMaybe<Array<GroupUserScalarWhereInput>>;
  OR?: InputMaybe<Array<GroupUserScalarWhereInput>>;
  groupId?: InputMaybe<IntFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type GroupUserScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<GroupUserScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<GroupUserScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<GroupUserScalarWhereWithAggregatesInput>>;
  groupId?: InputMaybe<IntWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type GroupUserSumAggregate = {
  __typename?: 'GroupUserSumAggregate';
  groupId?: Maybe<Scalars['Int']['output']>;
};

export type GroupUserSumOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
};

export type GroupUserUncheckedCreateInput = {
  groupId?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type GroupUserUncheckedCreateNestedManyWithoutGroupInput = {
  connect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupUserCreateOrConnectWithoutGroupInput>>;
  create?: InputMaybe<Array<GroupUserCreateWithoutGroupInput>>;
  createMany?: InputMaybe<GroupUserCreateManyGroupInputEnvelope>;
};

export type GroupUserUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupUserCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<GroupUserCreateWithoutUserInput>>;
  createMany?: InputMaybe<GroupUserCreateManyUserInputEnvelope>;
};

export type GroupUserUncheckedCreateWithoutGroupInput = {
  userUuid: Scalars['String']['input'];
};

export type GroupUserUncheckedCreateWithoutUserInput = {
  groupId?: InputMaybe<Scalars['Int']['input']>;
};

export type GroupUserUncheckedUpdateInput = {
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type GroupUserUncheckedUpdateManyInput = {
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type GroupUserUncheckedUpdateManyWithoutGroupInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type GroupUserUncheckedUpdateManyWithoutGroupNestedInput = {
  connect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupUserCreateOrConnectWithoutGroupInput>>;
  create?: InputMaybe<Array<GroupUserCreateWithoutGroupInput>>;
  createMany?: InputMaybe<GroupUserCreateManyGroupInputEnvelope>;
  delete?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupUserScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupUserUpdateWithWhereUniqueWithoutGroupInput>>;
  updateMany?: InputMaybe<Array<GroupUserUpdateManyWithWhereWithoutGroupInput>>;
  upsert?: InputMaybe<Array<GroupUserUpsertWithWhereUniqueWithoutGroupInput>>;
};

export type GroupUserUncheckedUpdateManyWithoutUserInput = {
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type GroupUserUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupUserCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<GroupUserCreateWithoutUserInput>>;
  createMany?: InputMaybe<GroupUserCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupUserScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupUserUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<GroupUserUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<GroupUserUpsertWithWhereUniqueWithoutUserInput>>;
};

export type GroupUserUncheckedUpdateWithoutGroupInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type GroupUserUncheckedUpdateWithoutUserInput = {
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type GroupUserUpdateManyWithWhereWithoutGroupInput = {
  data: GroupUserUncheckedUpdateManyWithoutGroupInput;
  where: GroupUserScalarWhereInput;
};

export type GroupUserUpdateManyWithWhereWithoutUserInput = {
  data: GroupUserUncheckedUpdateManyWithoutUserInput;
  where: GroupUserScalarWhereInput;
};

export type GroupUserUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<GroupUserCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<GroupUserCreateWithoutUserInput>>;
  createMany?: InputMaybe<GroupUserCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<GroupUserScalarWhereInput>>;
  disconnect?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  set?: InputMaybe<Array<GroupUserWhereUniqueInput>>;
  update?: InputMaybe<Array<GroupUserUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<GroupUserUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<GroupUserUpsertWithWhereUniqueWithoutUserInput>>;
};

export type GroupUserUpdateWithWhereUniqueWithoutGroupInput = {
  data: GroupUserUncheckedUpdateWithoutGroupInput;
  where: GroupUserWhereUniqueInput;
};

export type GroupUserUpdateWithWhereUniqueWithoutUserInput = {
  data: GroupUserUncheckedUpdateWithoutUserInput;
  where: GroupUserWhereUniqueInput;
};

export type GroupUserUpsertWithWhereUniqueWithoutGroupInput = {
  create: GroupUserUncheckedCreateWithoutGroupInput;
  update: GroupUserUncheckedUpdateWithoutGroupInput;
  where: GroupUserWhereUniqueInput;
};

export type GroupUserUpsertWithWhereUniqueWithoutUserInput = {
  create: GroupUserUncheckedCreateWithoutUserInput;
  update: GroupUserUncheckedUpdateWithoutUserInput;
  where: GroupUserWhereUniqueInput;
};

export type GroupUserWhereInput = {
  AND?: InputMaybe<Array<GroupUserWhereInput>>;
  NOT?: InputMaybe<Array<GroupUserWhereInput>>;
  OR?: InputMaybe<Array<GroupUserWhereInput>>;
  group?: InputMaybe<GroupRelationFilter>;
  groupId?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type GroupUserWhereUniqueInput = {
  AND?: InputMaybe<Array<GroupUserWhereInput>>;
  NOT?: InputMaybe<Array<GroupUserWhereInput>>;
  OR?: InputMaybe<Array<GroupUserWhereInput>>;
  group?: InputMaybe<GroupRelationFilter>;
  groupId?: InputMaybe<IntFilter>;
  groupId_userUuid?: InputMaybe<GroupUserGroupIdUserUuidCompoundUniqueInput>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type GroupWhereInput = {
  AND?: InputMaybe<Array<GroupWhereInput>>;
  NOT?: InputMaybe<Array<GroupWhereInput>>;
  OR?: InputMaybe<Array<GroupWhereInput>>;
  board?: InputMaybe<BoardNullableRelationFilter>;
  boardId?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdUser?: InputMaybe<UserNullableRelationFilter>;
  groupMenbership?: InputMaybe<GroupMenbershipListRelationFilter>;
  groupUser?: InputMaybe<GroupUserListRelationFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  permission?: InputMaybe<PermissionNullableRelationFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedUser?: InputMaybe<UserNullableRelationFilter>;
};

export type GroupWhereUniqueInput = {
  AND?: InputMaybe<Array<GroupWhereInput>>;
  NOT?: InputMaybe<Array<GroupWhereInput>>;
  OR?: InputMaybe<Array<GroupWhereInput>>;
  board?: InputMaybe<BoardNullableRelationFilter>;
  boardId?: InputMaybe<StringNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdUser?: InputMaybe<UserNullableRelationFilter>;
  groupMenbership?: InputMaybe<GroupMenbershipListRelationFilter>;
  groupUser?: InputMaybe<GroupUserListRelationFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<StringFilter>;
  permission?: InputMaybe<PermissionNullableRelationFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedUser?: InputMaybe<UserNullableRelationFilter>;
};

export type HistoryFlag = {
  __typename?: 'HistoryFlag';
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdByUser?: Maybe<User>;
  flag: FieldFlags;
  id: Scalars['Int']['output'];
  project: Project;
  projectId: Scalars['Int']['output'];
  transitionAt: Scalars['DateTimeISO']['output'];
};


export type HistoryFlagCreatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type HistoryFlagAvgAggregate = {
  __typename?: 'HistoryFlagAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type HistoryFlagAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type HistoryFlagCountAggregate = {
  __typename?: 'HistoryFlagCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  flag: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  transitionAt: Scalars['Int']['output'];
};

export type HistoryFlagCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryFlagCreateManyCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  flag?: InputMaybe<FieldFlags>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryFlagCreateManyCreatedByUserInputEnvelope = {
  data: Array<HistoryFlagCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HistoryFlagCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  flag?: InputMaybe<FieldFlags>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryFlagCreateManyProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  flag?: InputMaybe<FieldFlags>;
  id?: InputMaybe<Scalars['Int']['input']>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryFlagCreateManyProjectInputEnvelope = {
  data: Array<HistoryFlagCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HistoryFlagCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryFlagCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryFlagCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryFlagCreateManyProjectInputEnvelope>;
};

export type HistoryFlagCreateOrConnectWithoutCreatedByUserInput = {
  create: HistoryFlagUncheckedCreateWithoutCreatedByUserInput;
  where: HistoryFlagWhereUniqueInput;
};

export type HistoryFlagCreateOrConnectWithoutProjectInput = {
  create: HistoryFlagUncheckedCreateWithoutProjectInput;
  where: HistoryFlagWhereUniqueInput;
};

export type HistoryFlagCreateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  flag?: InputMaybe<FieldFlags>;
  project: ProjectCreateNestedOneWithoutHistoryFlagInput;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryFlagCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutHistoryFlagCreatedByInput>;
  flag?: InputMaybe<FieldFlags>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryFlagGroupBy = {
  __typename?: 'HistoryFlagGroupBy';
  _avg?: Maybe<HistoryFlagAvgAggregate>;
  _count?: Maybe<HistoryFlagCountAggregate>;
  _max?: Maybe<HistoryFlagMaxAggregate>;
  _min?: Maybe<HistoryFlagMinAggregate>;
  _sum?: Maybe<HistoryFlagSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  flag: FieldFlags;
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  transitionAt: Scalars['DateTimeISO']['output'];
};

export type HistoryFlagListRelationFilter = {
  every?: InputMaybe<HistoryFlagWhereInput>;
  none?: InputMaybe<HistoryFlagWhereInput>;
  some?: InputMaybe<HistoryFlagWhereInput>;
};

export type HistoryFlagMaxAggregate = {
  __typename?: 'HistoryFlagMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  flag?: Maybe<FieldFlags>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  transitionAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type HistoryFlagMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryFlagMinAggregate = {
  __typename?: 'HistoryFlagMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  flag?: Maybe<FieldFlags>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  transitionAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type HistoryFlagMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryFlagOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HistoryFlagOrderByWithAggregationInput = {
  _avg?: InputMaybe<HistoryFlagAvgOrderByAggregateInput>;
  _count?: InputMaybe<HistoryFlagCountOrderByAggregateInput>;
  _max?: InputMaybe<HistoryFlagMaxOrderByAggregateInput>;
  _min?: InputMaybe<HistoryFlagMinOrderByAggregateInput>;
  _sum?: InputMaybe<HistoryFlagSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryFlagOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  flag?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export enum HistoryFlagScalarFieldEnum {
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Flag = 'flag',
  Id = 'id',
  ProjectId = 'projectId',
  TransitionAt = 'transitionAt'
}

export type HistoryFlagScalarWhereInput = {
  AND?: InputMaybe<Array<HistoryFlagScalarWhereInput>>;
  NOT?: InputMaybe<Array<HistoryFlagScalarWhereInput>>;
  OR?: InputMaybe<Array<HistoryFlagScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  flag?: InputMaybe<EnumFieldFlagsFilter>;
  id?: InputMaybe<IntFilter>;
  projectId?: InputMaybe<IntFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type HistoryFlagScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<HistoryFlagScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<HistoryFlagScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<HistoryFlagScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  flag?: InputMaybe<EnumFieldFlagsWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
  transitionAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type HistoryFlagSumAggregate = {
  __typename?: 'HistoryFlagSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type HistoryFlagSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type HistoryFlagUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  flag?: InputMaybe<FieldFlags>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryFlagCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryFlagCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryFlagCreateManyCreatedByUserInputEnvelope>;
};

export type HistoryFlagUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryFlagCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryFlagCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryFlagCreateManyProjectInputEnvelope>;
};

export type HistoryFlagUncheckedCreateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  flag?: InputMaybe<FieldFlags>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryFlagUncheckedCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  flag?: InputMaybe<FieldFlags>;
  id?: InputMaybe<Scalars['Int']['input']>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryFlagUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumFieldFlagsFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryFlagUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumFieldFlagsFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryFlagUncheckedUpdateManyWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumFieldFlagsFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryFlagUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryFlagCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryFlagCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryFlagCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryFlagScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryFlagUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<HistoryFlagUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<HistoryFlagUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type HistoryFlagUncheckedUpdateManyWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumFieldFlagsFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryFlagUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryFlagCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryFlagCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryFlagCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryFlagScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryFlagUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<HistoryFlagUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<HistoryFlagUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type HistoryFlagUncheckedUpdateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumFieldFlagsFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryFlagUncheckedUpdateWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  flag?: InputMaybe<EnumFieldFlagsFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryFlagUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: HistoryFlagUncheckedUpdateManyWithoutCreatedByUserInput;
  where: HistoryFlagScalarWhereInput;
};

export type HistoryFlagUpdateManyWithWhereWithoutProjectInput = {
  data: HistoryFlagUncheckedUpdateManyWithoutProjectInput;
  where: HistoryFlagScalarWhereInput;
};

export type HistoryFlagUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryFlagCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryFlagCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryFlagCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryFlagScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryFlagWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryFlagUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<HistoryFlagUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<HistoryFlagUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type HistoryFlagUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: HistoryFlagUncheckedUpdateWithoutCreatedByUserInput;
  where: HistoryFlagWhereUniqueInput;
};

export type HistoryFlagUpdateWithWhereUniqueWithoutProjectInput = {
  data: HistoryFlagUncheckedUpdateWithoutProjectInput;
  where: HistoryFlagWhereUniqueInput;
};

export type HistoryFlagUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: HistoryFlagUncheckedCreateWithoutCreatedByUserInput;
  update: HistoryFlagUncheckedUpdateWithoutCreatedByUserInput;
  where: HistoryFlagWhereUniqueInput;
};

export type HistoryFlagUpsertWithWhereUniqueWithoutProjectInput = {
  create: HistoryFlagUncheckedCreateWithoutProjectInput;
  update: HistoryFlagUncheckedUpdateWithoutProjectInput;
  where: HistoryFlagWhereUniqueInput;
};

export type HistoryFlagWhereInput = {
  AND?: InputMaybe<Array<HistoryFlagWhereInput>>;
  NOT?: InputMaybe<Array<HistoryFlagWhereInput>>;
  OR?: InputMaybe<Array<HistoryFlagWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  flag?: InputMaybe<EnumFieldFlagsFilter>;
  id?: InputMaybe<IntFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type HistoryFlagWhereUniqueInput = {
  AND?: InputMaybe<Array<HistoryFlagWhereInput>>;
  NOT?: InputMaybe<Array<HistoryFlagWhereInput>>;
  OR?: InputMaybe<Array<HistoryFlagWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  flag?: InputMaybe<EnumFieldFlagsFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type HistoryMonthlyRecurringRevenue = {
  __typename?: 'HistoryMonthlyRecurringRevenue';
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdByUser?: Maybe<User>;
  id: Scalars['Int']['output'];
  project: Project;
  projectId: Scalars['Int']['output'];
  revenue: Scalars['Float']['output'];
  transitionAt: Scalars['DateTimeISO']['output'];
};


export type HistoryMonthlyRecurringRevenueCreatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type HistoryMonthlyRecurringRevenueAvgAggregate = {
  __typename?: 'HistoryMonthlyRecurringRevenueAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
  revenue?: Maybe<Scalars['Float']['output']>;
};

export type HistoryMonthlyRecurringRevenueAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  revenue?: InputMaybe<SortOrder>;
};

export type HistoryMonthlyRecurringRevenueCountAggregate = {
  __typename?: 'HistoryMonthlyRecurringRevenueCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  revenue: Scalars['Int']['output'];
  transitionAt: Scalars['Int']['output'];
};

export type HistoryMonthlyRecurringRevenueCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  revenue?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryMonthlyRecurringRevenueCreateManyCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  revenue: Scalars['Float']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryMonthlyRecurringRevenueCreateManyCreatedByUserInputEnvelope = {
  data: Array<HistoryMonthlyRecurringRevenueCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HistoryMonthlyRecurringRevenueCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  revenue: Scalars['Float']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryMonthlyRecurringRevenueCreateManyProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  revenue: Scalars['Float']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryMonthlyRecurringRevenueCreateManyProjectInputEnvelope = {
  data: Array<HistoryMonthlyRecurringRevenueCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HistoryMonthlyRecurringRevenueCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryMonthlyRecurringRevenueCreateManyProjectInputEnvelope>;
};

export type HistoryMonthlyRecurringRevenueCreateOrConnectWithoutCreatedByUserInput = {
  create: HistoryMonthlyRecurringRevenueUncheckedCreateWithoutCreatedByUserInput;
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};

export type HistoryMonthlyRecurringRevenueCreateOrConnectWithoutProjectInput = {
  create: HistoryMonthlyRecurringRevenueUncheckedCreateWithoutProjectInput;
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};

export type HistoryMonthlyRecurringRevenueCreateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  project: ProjectCreateNestedOneWithoutHistoryMonthlyRecurringRevenueInput;
  revenue: Scalars['Float']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryMonthlyRecurringRevenueCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutHistoryMonthlyRecurringRevenueInput>;
  revenue: Scalars['Float']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryMonthlyRecurringRevenueGroupBy = {
  __typename?: 'HistoryMonthlyRecurringRevenueGroupBy';
  _avg?: Maybe<HistoryMonthlyRecurringRevenueAvgAggregate>;
  _count?: Maybe<HistoryMonthlyRecurringRevenueCountAggregate>;
  _max?: Maybe<HistoryMonthlyRecurringRevenueMaxAggregate>;
  _min?: Maybe<HistoryMonthlyRecurringRevenueMinAggregate>;
  _sum?: Maybe<HistoryMonthlyRecurringRevenueSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  revenue: Scalars['Float']['output'];
  transitionAt: Scalars['DateTimeISO']['output'];
};

export type HistoryMonthlyRecurringRevenueListRelationFilter = {
  every?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
  none?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
  some?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};

export type HistoryMonthlyRecurringRevenueMaxAggregate = {
  __typename?: 'HistoryMonthlyRecurringRevenueMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  revenue?: Maybe<Scalars['Float']['output']>;
  transitionAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type HistoryMonthlyRecurringRevenueMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  revenue?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryMonthlyRecurringRevenueMinAggregate = {
  __typename?: 'HistoryMonthlyRecurringRevenueMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  revenue?: Maybe<Scalars['Float']['output']>;
  transitionAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type HistoryMonthlyRecurringRevenueMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  revenue?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryMonthlyRecurringRevenueOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HistoryMonthlyRecurringRevenueOrderByWithAggregationInput = {
  _avg?: InputMaybe<HistoryMonthlyRecurringRevenueAvgOrderByAggregateInput>;
  _count?: InputMaybe<HistoryMonthlyRecurringRevenueCountOrderByAggregateInput>;
  _max?: InputMaybe<HistoryMonthlyRecurringRevenueMaxOrderByAggregateInput>;
  _min?: InputMaybe<HistoryMonthlyRecurringRevenueMinOrderByAggregateInput>;
  _sum?: InputMaybe<HistoryMonthlyRecurringRevenueSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  revenue?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryMonthlyRecurringRevenueOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
  revenue?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export enum HistoryMonthlyRecurringRevenueScalarFieldEnum {
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Id = 'id',
  ProjectId = 'projectId',
  Revenue = 'revenue',
  TransitionAt = 'transitionAt'
}

export type HistoryMonthlyRecurringRevenueScalarWhereInput = {
  AND?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereInput>>;
  NOT?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereInput>>;
  OR?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<IntFilter>;
  projectId?: InputMaybe<IntFilter>;
  revenue?: InputMaybe<FloatFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type HistoryMonthlyRecurringRevenueScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
  revenue?: InputMaybe<FloatWithAggregatesFilter>;
  transitionAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type HistoryMonthlyRecurringRevenueSumAggregate = {
  __typename?: 'HistoryMonthlyRecurringRevenueSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  revenue?: Maybe<Scalars['Float']['output']>;
};

export type HistoryMonthlyRecurringRevenueSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  revenue?: InputMaybe<SortOrder>;
};

export type HistoryMonthlyRecurringRevenueUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  revenue: Scalars['Float']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryMonthlyRecurringRevenueCreateManyCreatedByUserInputEnvelope>;
};

export type HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryMonthlyRecurringRevenueCreateManyProjectInputEnvelope>;
};

export type HistoryMonthlyRecurringRevenueUncheckedCreateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  revenue: Scalars['Float']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryMonthlyRecurringRevenueUncheckedCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  revenue: Scalars['Float']['input'];
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryMonthlyRecurringRevenueUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  revenue?: InputMaybe<FloatFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryMonthlyRecurringRevenueUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  revenue?: InputMaybe<FloatFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  revenue?: InputMaybe<FloatFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryMonthlyRecurringRevenueCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  revenue?: InputMaybe<FloatFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryMonthlyRecurringRevenueCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type HistoryMonthlyRecurringRevenueUncheckedUpdateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  revenue?: InputMaybe<FloatFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryMonthlyRecurringRevenueUncheckedUpdateWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  revenue?: InputMaybe<FloatFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryMonthlyRecurringRevenueUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutCreatedByUserInput;
  where: HistoryMonthlyRecurringRevenueScalarWhereInput;
};

export type HistoryMonthlyRecurringRevenueUpdateManyWithWhereWithoutProjectInput = {
  data: HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutProjectInput;
  where: HistoryMonthlyRecurringRevenueScalarWhereInput;
};

export type HistoryMonthlyRecurringRevenueUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryMonthlyRecurringRevenueCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryMonthlyRecurringRevenueCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<HistoryMonthlyRecurringRevenueUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type HistoryMonthlyRecurringRevenueUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: HistoryMonthlyRecurringRevenueUncheckedUpdateWithoutCreatedByUserInput;
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};

export type HistoryMonthlyRecurringRevenueUpdateWithWhereUniqueWithoutProjectInput = {
  data: HistoryMonthlyRecurringRevenueUncheckedUpdateWithoutProjectInput;
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};

export type HistoryMonthlyRecurringRevenueUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: HistoryMonthlyRecurringRevenueUncheckedCreateWithoutCreatedByUserInput;
  update: HistoryMonthlyRecurringRevenueUncheckedUpdateWithoutCreatedByUserInput;
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};

export type HistoryMonthlyRecurringRevenueUpsertWithWhereUniqueWithoutProjectInput = {
  create: HistoryMonthlyRecurringRevenueUncheckedCreateWithoutProjectInput;
  update: HistoryMonthlyRecurringRevenueUncheckedUpdateWithoutProjectInput;
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};

export type HistoryMonthlyRecurringRevenueWhereInput = {
  AND?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereInput>>;
  NOT?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereInput>>;
  OR?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  id?: InputMaybe<IntFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  revenue?: InputMaybe<FloatFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type HistoryMonthlyRecurringRevenueWhereUniqueInput = {
  AND?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereInput>>;
  NOT?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereInput>>;
  OR?: InputMaybe<Array<HistoryMonthlyRecurringRevenueWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  revenue?: InputMaybe<FloatFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type HistoryStep = {
  __typename?: 'HistoryStep';
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdByUser?: Maybe<User>;
  id: Scalars['Int']['output'];
  project: Project;
  projectId: Scalars['Int']['output'];
  step: FieldSteps;
  transitionAt: Scalars['DateTimeISO']['output'];
};


export type HistoryStepCreatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type HistoryStepAvgAggregate = {
  __typename?: 'HistoryStepAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type HistoryStepAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type HistoryStepCountAggregate = {
  __typename?: 'HistoryStepCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  step: Scalars['Int']['output'];
  transitionAt: Scalars['Int']['output'];
};

export type HistoryStepCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  step?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryStepCreateManyCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  step?: InputMaybe<FieldSteps>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryStepCreateManyCreatedByUserInputEnvelope = {
  data: Array<HistoryStepCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HistoryStepCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  step?: InputMaybe<FieldSteps>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryStepCreateManyProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  step?: InputMaybe<FieldSteps>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryStepCreateManyProjectInputEnvelope = {
  data: Array<HistoryStepCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type HistoryStepCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryStepCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryStepCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryStepCreateManyProjectInputEnvelope>;
};

export type HistoryStepCreateOrConnectWithoutCreatedByUserInput = {
  create: HistoryStepUncheckedCreateWithoutCreatedByUserInput;
  where: HistoryStepWhereUniqueInput;
};

export type HistoryStepCreateOrConnectWithoutProjectInput = {
  create: HistoryStepUncheckedCreateWithoutProjectInput;
  where: HistoryStepWhereUniqueInput;
};

export type HistoryStepCreateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  project: ProjectCreateNestedOneWithoutHistoryStepInput;
  step?: InputMaybe<FieldSteps>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryStepCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutHistoryStepCreatedByInput>;
  step?: InputMaybe<FieldSteps>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryStepGroupBy = {
  __typename?: 'HistoryStepGroupBy';
  _avg?: Maybe<HistoryStepAvgAggregate>;
  _count?: Maybe<HistoryStepCountAggregate>;
  _max?: Maybe<HistoryStepMaxAggregate>;
  _min?: Maybe<HistoryStepMinAggregate>;
  _sum?: Maybe<HistoryStepSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  step: FieldSteps;
  transitionAt: Scalars['DateTimeISO']['output'];
};

export type HistoryStepListRelationFilter = {
  every?: InputMaybe<HistoryStepWhereInput>;
  none?: InputMaybe<HistoryStepWhereInput>;
  some?: InputMaybe<HistoryStepWhereInput>;
};

export type HistoryStepMaxAggregate = {
  __typename?: 'HistoryStepMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  step?: Maybe<FieldSteps>;
  transitionAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type HistoryStepMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  step?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryStepMinAggregate = {
  __typename?: 'HistoryStepMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  step?: Maybe<FieldSteps>;
  transitionAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type HistoryStepMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  step?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryStepOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type HistoryStepOrderByWithAggregationInput = {
  _avg?: InputMaybe<HistoryStepAvgOrderByAggregateInput>;
  _count?: InputMaybe<HistoryStepCountOrderByAggregateInput>;
  _max?: InputMaybe<HistoryStepMaxOrderByAggregateInput>;
  _min?: InputMaybe<HistoryStepMinOrderByAggregateInput>;
  _sum?: InputMaybe<HistoryStepSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  step?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export type HistoryStepOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
  step?: InputMaybe<SortOrder>;
  transitionAt?: InputMaybe<SortOrder>;
};

export enum HistoryStepScalarFieldEnum {
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Id = 'id',
  ProjectId = 'projectId',
  Step = 'step',
  TransitionAt = 'transitionAt'
}

export type HistoryStepScalarWhereInput = {
  AND?: InputMaybe<Array<HistoryStepScalarWhereInput>>;
  NOT?: InputMaybe<Array<HistoryStepScalarWhereInput>>;
  OR?: InputMaybe<Array<HistoryStepScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<IntFilter>;
  projectId?: InputMaybe<IntFilter>;
  step?: InputMaybe<EnumFieldStepsFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type HistoryStepScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<HistoryStepScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<HistoryStepScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<HistoryStepScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
  step?: InputMaybe<EnumFieldStepsWithAggregatesFilter>;
  transitionAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type HistoryStepSumAggregate = {
  __typename?: 'HistoryStepSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type HistoryStepSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type HistoryStepUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  step?: InputMaybe<FieldSteps>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryStepCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryStepCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryStepCreateManyCreatedByUserInputEnvelope>;
};

export type HistoryStepUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryStepCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryStepCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryStepCreateManyProjectInputEnvelope>;
};

export type HistoryStepUncheckedCreateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  step?: InputMaybe<FieldSteps>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryStepUncheckedCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  step?: InputMaybe<FieldSteps>;
  transitionAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type HistoryStepUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  step?: InputMaybe<EnumFieldStepsFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryStepUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  step?: InputMaybe<EnumFieldStepsFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryStepUncheckedUpdateManyWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  step?: InputMaybe<EnumFieldStepsFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryStepUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryStepCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryStepCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryStepCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryStepScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryStepUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<HistoryStepUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<HistoryStepUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type HistoryStepUncheckedUpdateManyWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  step?: InputMaybe<EnumFieldStepsFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryStepUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryStepCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<HistoryStepCreateWithoutProjectInput>>;
  createMany?: InputMaybe<HistoryStepCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryStepScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryStepUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<HistoryStepUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<HistoryStepUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type HistoryStepUncheckedUpdateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  step?: InputMaybe<EnumFieldStepsFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryStepUncheckedUpdateWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  step?: InputMaybe<EnumFieldStepsFieldUpdateOperationsInput>;
  transitionAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type HistoryStepUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: HistoryStepUncheckedUpdateManyWithoutCreatedByUserInput;
  where: HistoryStepScalarWhereInput;
};

export type HistoryStepUpdateManyWithWhereWithoutProjectInput = {
  data: HistoryStepUncheckedUpdateManyWithoutProjectInput;
  where: HistoryStepScalarWhereInput;
};

export type HistoryStepUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<HistoryStepCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<HistoryStepCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<HistoryStepCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<HistoryStepScalarWhereInput>>;
  disconnect?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  set?: InputMaybe<Array<HistoryStepWhereUniqueInput>>;
  update?: InputMaybe<Array<HistoryStepUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<HistoryStepUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<HistoryStepUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type HistoryStepUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: HistoryStepUncheckedUpdateWithoutCreatedByUserInput;
  where: HistoryStepWhereUniqueInput;
};

export type HistoryStepUpdateWithWhereUniqueWithoutProjectInput = {
  data: HistoryStepUncheckedUpdateWithoutProjectInput;
  where: HistoryStepWhereUniqueInput;
};

export type HistoryStepUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: HistoryStepUncheckedCreateWithoutCreatedByUserInput;
  update: HistoryStepUncheckedUpdateWithoutCreatedByUserInput;
  where: HistoryStepWhereUniqueInput;
};

export type HistoryStepUpsertWithWhereUniqueWithoutProjectInput = {
  create: HistoryStepUncheckedCreateWithoutProjectInput;
  update: HistoryStepUncheckedUpdateWithoutProjectInput;
  where: HistoryStepWhereUniqueInput;
};

export type HistoryStepWhereInput = {
  AND?: InputMaybe<Array<HistoryStepWhereInput>>;
  NOT?: InputMaybe<Array<HistoryStepWhereInput>>;
  OR?: InputMaybe<Array<HistoryStepWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  id?: InputMaybe<IntFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  step?: InputMaybe<EnumFieldStepsFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type HistoryStepWhereUniqueInput = {
  AND?: InputMaybe<Array<HistoryStepWhereInput>>;
  NOT?: InputMaybe<Array<HistoryStepWhereInput>>;
  OR?: InputMaybe<Array<HistoryStepWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  step?: InputMaybe<EnumFieldStepsFilter>;
  transitionAt?: InputMaybe<DateTimeFilter>;
};

export type IClient = {
  cnpj: Scalars['String']['input'];
  email: Scalars['String']['input'];
  name: Scalars['String']['input'];
  password: Scalars['String']['input'];
  sendEmail?: InputMaybe<Scalars['Boolean']['input']>;
  type: Scalars['String']['input'];
};

export type IGeneratedTokenClient = {
  uuid: Scalars['String']['input'];
};

export type ILaunchError = {
  json: Scalars['JSON']['input'];
};

export type ILoginClient = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
};

export type InputCard = {
  id: Scalars['ID']['input'];
  order: Scalars['Float']['input'];
};

export type InputColumn = {
  boardId: Scalars['ID']['input'];
  card: Array<InputCard>;
  id: Scalars['ID']['input'];
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type InputHome = {
  content?: InputMaybe<Scalars['JSON']['input']>;
};

export type IntFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Int']['input']>;
  divide?: InputMaybe<Scalars['Int']['input']>;
  increment?: InputMaybe<Scalars['Int']['input']>;
  multiply?: InputMaybe<Scalars['Int']['input']>;
  set?: InputMaybe<Scalars['Int']['input']>;
};

export type IntFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type IntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type IntNullableWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatNullableFilter>;
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedIntNullableFilter>;
  _min?: InputMaybe<NestedIntNullableFilter>;
  _sum?: InputMaybe<NestedIntNullableFilter>;
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type IntWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatFilter>;
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedIntFilter>;
  _min?: InputMaybe<NestedIntFilter>;
  _sum?: InputMaybe<NestedIntFilter>;
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type Invest = {
  __typename?: 'Invest';
  id: Scalars['Int']['output'];
  project?: Maybe<Project>;
  projectId?: Maybe<Scalars['Int']['output']>;
  user: User;
  userUuid: Scalars['String']['output'];
};


export type InvestProjectArgs = {
  where?: InputMaybe<ProjectWhereInput>;
};

export type InvestAvgAggregate = {
  __typename?: 'InvestAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type InvestAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type InvestCountAggregate = {
  __typename?: 'InvestCountAggregate';
  _all: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type InvestCountOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type InvestCreateManyInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type InvestCreateManyProjectInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type InvestCreateManyProjectInputEnvelope = {
  data: Array<InvestCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type InvestCreateManyUserInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['Int']['input']>;
};

export type InvestCreateManyUserInputEnvelope = {
  data: Array<InvestCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type InvestCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<InvestCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<InvestCreateWithoutProjectInput>>;
  createMany?: InputMaybe<InvestCreateManyProjectInputEnvelope>;
};

export type InvestCreateOrConnectWithoutProjectInput = {
  create: InvestUncheckedCreateWithoutProjectInput;
  where: InvestWhereUniqueInput;
};

export type InvestCreateOrConnectWithoutUserInput = {
  create: InvestUncheckedCreateWithoutUserInput;
  where: InvestWhereUniqueInput;
};

export type InvestCreateWithoutProjectInput = {
  user: UserCreateNestedOneWithoutInvestInput;
};

export type InvestCreateWithoutUserInput = {
  project?: InputMaybe<ProjectCreateNestedOneWithoutInvestInput>;
};

export type InvestGroupBy = {
  __typename?: 'InvestGroupBy';
  _avg?: Maybe<InvestAvgAggregate>;
  _count?: Maybe<InvestCountAggregate>;
  _max?: Maybe<InvestMaxAggregate>;
  _min?: Maybe<InvestMinAggregate>;
  _sum?: Maybe<InvestSumAggregate>;
  id: Scalars['Int']['output'];
  projectId?: Maybe<Scalars['Int']['output']>;
  userUuid: Scalars['String']['output'];
};

export type InvestListRelationFilter = {
  every?: InputMaybe<InvestWhereInput>;
  none?: InputMaybe<InvestWhereInput>;
  some?: InputMaybe<InvestWhereInput>;
};

export type InvestMaxAggregate = {
  __typename?: 'InvestMaxAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type InvestMaxOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type InvestMinAggregate = {
  __typename?: 'InvestMinAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type InvestMinOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type InvestOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type InvestOrderByWithAggregationInput = {
  _avg?: InputMaybe<InvestAvgOrderByAggregateInput>;
  _count?: InputMaybe<InvestCountOrderByAggregateInput>;
  _max?: InputMaybe<InvestMaxOrderByAggregateInput>;
  _min?: InputMaybe<InvestMinOrderByAggregateInput>;
  _sum?: InputMaybe<InvestSumOrderByAggregateInput>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrderInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export type InvestOrderByWithRelationInput = {
  id?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrderInput>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum InvestScalarFieldEnum {
  Id = 'id',
  ProjectId = 'projectId',
  UserUuid = 'userUuid'
}

export type InvestScalarWhereInput = {
  AND?: InputMaybe<Array<InvestScalarWhereInput>>;
  NOT?: InputMaybe<Array<InvestScalarWhereInput>>;
  OR?: InputMaybe<Array<InvestScalarWhereInput>>;
  id?: InputMaybe<IntFilter>;
  projectId?: InputMaybe<IntNullableFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type InvestScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<InvestScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<InvestScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<InvestScalarWhereWithAggregatesInput>>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  projectId?: InputMaybe<IntNullableWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type InvestSumAggregate = {
  __typename?: 'InvestSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type InvestSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type InvestUncheckedCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type InvestUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<InvestCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<InvestCreateWithoutProjectInput>>;
  createMany?: InputMaybe<InvestCreateManyProjectInputEnvelope>;
};

export type InvestUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<InvestCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<InvestCreateWithoutUserInput>>;
  createMany?: InputMaybe<InvestCreateManyUserInputEnvelope>;
};

export type InvestUncheckedCreateWithoutProjectInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type InvestUncheckedCreateWithoutUserInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['Int']['input']>;
};

export type InvestUncheckedUpdateInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type InvestUncheckedUpdateManyInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type InvestUncheckedUpdateManyWithoutProjectInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type InvestUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<InvestCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<InvestCreateWithoutProjectInput>>;
  createMany?: InputMaybe<InvestCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<InvestWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<InvestScalarWhereInput>>;
  disconnect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  set?: InputMaybe<Array<InvestWhereUniqueInput>>;
  update?: InputMaybe<Array<InvestUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<InvestUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<InvestUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type InvestUncheckedUpdateManyWithoutUserInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
};

export type InvestUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<InvestCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<InvestCreateWithoutUserInput>>;
  createMany?: InputMaybe<InvestCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<InvestWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<InvestScalarWhereInput>>;
  disconnect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  set?: InputMaybe<Array<InvestWhereUniqueInput>>;
  update?: InputMaybe<Array<InvestUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<InvestUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<InvestUpsertWithWhereUniqueWithoutUserInput>>;
};

export type InvestUncheckedUpdateWithoutProjectInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type InvestUncheckedUpdateWithoutUserInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
};

export type InvestUpdateManyWithWhereWithoutProjectInput = {
  data: InvestUncheckedUpdateManyWithoutProjectInput;
  where: InvestScalarWhereInput;
};

export type InvestUpdateManyWithWhereWithoutUserInput = {
  data: InvestUncheckedUpdateManyWithoutUserInput;
  where: InvestScalarWhereInput;
};

export type InvestUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<InvestCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<InvestCreateWithoutUserInput>>;
  createMany?: InputMaybe<InvestCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<InvestWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<InvestScalarWhereInput>>;
  disconnect?: InputMaybe<Array<InvestWhereUniqueInput>>;
  set?: InputMaybe<Array<InvestWhereUniqueInput>>;
  update?: InputMaybe<Array<InvestUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<InvestUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<InvestUpsertWithWhereUniqueWithoutUserInput>>;
};

export type InvestUpdateWithWhereUniqueWithoutProjectInput = {
  data: InvestUncheckedUpdateWithoutProjectInput;
  where: InvestWhereUniqueInput;
};

export type InvestUpdateWithWhereUniqueWithoutUserInput = {
  data: InvestUncheckedUpdateWithoutUserInput;
  where: InvestWhereUniqueInput;
};

export type InvestUpsertWithWhereUniqueWithoutProjectInput = {
  create: InvestUncheckedCreateWithoutProjectInput;
  update: InvestUncheckedUpdateWithoutProjectInput;
  where: InvestWhereUniqueInput;
};

export type InvestUpsertWithWhereUniqueWithoutUserInput = {
  create: InvestUncheckedCreateWithoutUserInput;
  update: InvestUncheckedUpdateWithoutUserInput;
  where: InvestWhereUniqueInput;
};

export type InvestWhereInput = {
  AND?: InputMaybe<Array<InvestWhereInput>>;
  NOT?: InputMaybe<Array<InvestWhereInput>>;
  OR?: InputMaybe<Array<InvestWhereInput>>;
  id?: InputMaybe<IntFilter>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  projectId?: InputMaybe<IntNullableFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type InvestWhereUniqueInput = {
  AND?: InputMaybe<Array<InvestWhereInput>>;
  NOT?: InputMaybe<Array<InvestWhereInput>>;
  OR?: InputMaybe<Array<InvestWhereInput>>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  projectId?: InputMaybe<IntNullableFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type JobFunction = {
  __typename?: 'JobFunction';
  _count?: Maybe<JobFunctionCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  deliverys: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  primitiveStrength: Array<PrimitiveStreenght>;
  updatedAt: Scalars['DateTimeISO']['output'];
  userJobFunction: Array<UserJobFunction>;
};


export type JobFunctionPrimitiveStrengthArgs = {
  cursor?: InputMaybe<PrimitiveStreenghtWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveStreenghtScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveStreenghtOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type JobFunctionUserJobFunctionArgs = {
  cursor?: InputMaybe<UserJobFunctionWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserJobFunctionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserJobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserJobFunctionWhereInput>;
};

export type JobFunctionAvgAggregate = {
  __typename?: 'JobFunctionAvgAggregate';
  deliverys?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type JobFunctionAvgOrderByAggregateInput = {
  deliverys?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type JobFunctionCount = {
  __typename?: 'JobFunctionCount';
  primitiveStrength: Scalars['Int']['output'];
  userJobFunction: Scalars['Int']['output'];
};


export type JobFunctionCountPrimitiveStrengthArgs = {
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type JobFunctionCountUserJobFunctionArgs = {
  where?: InputMaybe<UserJobFunctionWhereInput>;
};

export type JobFunctionCountAggregate = {
  __typename?: 'JobFunctionCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  deliverys: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type JobFunctionCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  deliverys?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type JobFunctionCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  deliverys?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type JobFunctionCreateNestedOneWithoutPrimitiveStrengthInput = {
  connect?: InputMaybe<JobFunctionWhereUniqueInput>;
  connectOrCreate?: InputMaybe<JobFunctionCreateOrConnectWithoutPrimitiveStrengthInput>;
  create?: InputMaybe<JobFunctionUncheckedCreateWithoutPrimitiveStrengthInput>;
};

export type JobFunctionCreateNestedOneWithoutUserJobFunctionInput = {
  connect?: InputMaybe<JobFunctionWhereUniqueInput>;
  connectOrCreate?: InputMaybe<JobFunctionCreateOrConnectWithoutUserJobFunctionInput>;
  create?: InputMaybe<JobFunctionUncheckedCreateWithoutUserJobFunctionInput>;
};

export type JobFunctionCreateOrConnectWithoutPrimitiveStrengthInput = {
  create: JobFunctionUncheckedCreateWithoutPrimitiveStrengthInput;
  where: JobFunctionWhereUniqueInput;
};

export type JobFunctionCreateOrConnectWithoutUserJobFunctionInput = {
  create: JobFunctionUncheckedCreateWithoutUserJobFunctionInput;
  where: JobFunctionWhereUniqueInput;
};

export type JobFunctionGroupBy = {
  __typename?: 'JobFunctionGroupBy';
  _avg?: Maybe<JobFunctionAvgAggregate>;
  _count?: Maybe<JobFunctionCountAggregate>;
  _max?: Maybe<JobFunctionMaxAggregate>;
  _min?: Maybe<JobFunctionMinAggregate>;
  _sum?: Maybe<JobFunctionSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  deliverys: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type JobFunctionMaxAggregate = {
  __typename?: 'JobFunctionMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  deliverys?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type JobFunctionMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  deliverys?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type JobFunctionMinAggregate = {
  __typename?: 'JobFunctionMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  deliverys?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type JobFunctionMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  deliverys?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type JobFunctionOrderByWithAggregationInput = {
  _avg?: InputMaybe<JobFunctionAvgOrderByAggregateInput>;
  _count?: InputMaybe<JobFunctionCountOrderByAggregateInput>;
  _max?: InputMaybe<JobFunctionMaxOrderByAggregateInput>;
  _min?: InputMaybe<JobFunctionMinOrderByAggregateInput>;
  _sum?: InputMaybe<JobFunctionSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  deliverys?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type JobFunctionOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  deliverys?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  primitiveStrength?: InputMaybe<PrimitiveStreenghtOrderByRelationAggregateInput>;
  updatedAt?: InputMaybe<SortOrder>;
  userJobFunction?: InputMaybe<UserJobFunctionOrderByRelationAggregateInput>;
};

export type JobFunctionRelationFilter = {
  is?: InputMaybe<JobFunctionWhereInput>;
  isNot?: InputMaybe<JobFunctionWhereInput>;
};

export enum JobFunctionScalarFieldEnum {
  CreatedAt = 'createdAt',
  Deliverys = 'deliverys',
  Id = 'id',
  Name = 'name',
  UpdatedAt = 'updatedAt'
}

export type JobFunctionScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<JobFunctionScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<JobFunctionScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<JobFunctionScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  deliverys?: InputMaybe<IntWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type JobFunctionSumAggregate = {
  __typename?: 'JobFunctionSumAggregate';
  deliverys?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type JobFunctionSumOrderByAggregateInput = {
  deliverys?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type JobFunctionUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  deliverys?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  primitiveStrength?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutJobFunctionInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutJobFunctionInput>;
};

export type JobFunctionUncheckedCreateWithoutPrimitiveStrengthInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  deliverys?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutJobFunctionInput>;
};

export type JobFunctionUncheckedCreateWithoutUserJobFunctionInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  deliverys?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  primitiveStrength?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutJobFunctionInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type JobFunctionUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  deliverys?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  primitiveStrength?: InputMaybe<PrimitiveStreenghtUncheckedUpdateManyWithoutJobFunctionNestedInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedUpdateManyWithoutJobFunctionNestedInput>;
};

export type JobFunctionUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  deliverys?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type JobFunctionWhereInput = {
  AND?: InputMaybe<Array<JobFunctionWhereInput>>;
  NOT?: InputMaybe<Array<JobFunctionWhereInput>>;
  OR?: InputMaybe<Array<JobFunctionWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  deliverys?: InputMaybe<IntFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  primitiveStrength?: InputMaybe<PrimitiveStreenghtListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userJobFunction?: InputMaybe<UserJobFunctionListRelationFilter>;
};

export type JobFunctionWhereUniqueInput = {
  AND?: InputMaybe<Array<JobFunctionWhereInput>>;
  NOT?: InputMaybe<Array<JobFunctionWhereInput>>;
  OR?: InputMaybe<Array<JobFunctionWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  deliverys?: InputMaybe<IntFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  primitiveStrength?: InputMaybe<PrimitiveStreenghtListRelationFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userJobFunction?: InputMaybe<UserJobFunctionListRelationFilter>;
};

export type JsonFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type JsonNullableFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type JsonNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedJsonNullableFilter>;
  _min?: InputMaybe<NestedJsonNullableFilter>;
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type JsonWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedJsonFilter>;
  _min?: InputMaybe<NestedJsonFilter>;
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type Kr = {
  __typename?: 'Kr';
  cratedBy: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdByUser: User;
  id: Scalars['Int']['output'];
  objective: Objective;
  objectiveId: Scalars['Int']['output'];
  progress: Scalars['Float']['output'];
  target: Scalars['Float']['output'];
  title: Scalars['String']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type KrAvgAggregate = {
  __typename?: 'KrAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  objectiveId?: Maybe<Scalars['Float']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type KrAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type KrCommentProject = {
  __typename?: 'KrCommentProject';
  comments: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  krId: Scalars['Int']['output'];
  krProject: OkrProject;
  user: User;
};

export type KrCommentProjectAvgAggregate = {
  __typename?: 'KrCommentProjectAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  krId?: Maybe<Scalars['Float']['output']>;
};

export type KrCommentProjectAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
};

export type KrCommentProjectCountAggregate = {
  __typename?: 'KrCommentProjectCountAggregate';
  _all: Scalars['Int']['output'];
  comments: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  krId: Scalars['Int']['output'];
};

export type KrCommentProjectCountOrderByAggregateInput = {
  comments?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
};

export type KrCommentProjectCreateManyInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  krId: Scalars['Int']['input'];
};

export type KrCommentProjectCreateManyKrProjectInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type KrCommentProjectCreateManyKrProjectInputEnvelope = {
  data: Array<KrCommentProjectCreateManyKrProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KrCommentProjectCreateManyUserInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krId: Scalars['Int']['input'];
};

export type KrCommentProjectCreateManyUserInputEnvelope = {
  data: Array<KrCommentProjectCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KrCommentProjectCreateNestedManyWithoutKrProjectInput = {
  connect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCommentProjectCreateOrConnectWithoutKrProjectInput>>;
  create?: InputMaybe<Array<KrCommentProjectCreateWithoutKrProjectInput>>;
  createMany?: InputMaybe<KrCommentProjectCreateManyKrProjectInputEnvelope>;
};

export type KrCommentProjectCreateOrConnectWithoutKrProjectInput = {
  create: KrCommentProjectUncheckedCreateWithoutKrProjectInput;
  where: KrCommentProjectWhereUniqueInput;
};

export type KrCommentProjectCreateOrConnectWithoutUserInput = {
  create: KrCommentProjectUncheckedCreateWithoutUserInput;
  where: KrCommentProjectWhereUniqueInput;
};

export type KrCommentProjectCreateWithoutKrProjectInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user: UserCreateNestedOneWithoutKrCommentProjectInput;
};

export type KrCommentProjectCreateWithoutUserInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  krProject: OkrProjectCreateNestedOneWithoutKrCommentsInput;
};

export type KrCommentProjectGroupBy = {
  __typename?: 'KrCommentProjectGroupBy';
  _avg?: Maybe<KrCommentProjectAvgAggregate>;
  _count?: Maybe<KrCommentProjectCountAggregate>;
  _max?: Maybe<KrCommentProjectMaxAggregate>;
  _min?: Maybe<KrCommentProjectMinAggregate>;
  _sum?: Maybe<KrCommentProjectSumAggregate>;
  comments: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  krId: Scalars['Int']['output'];
};

export type KrCommentProjectListRelationFilter = {
  every?: InputMaybe<KrCommentProjectWhereInput>;
  none?: InputMaybe<KrCommentProjectWhereInput>;
  some?: InputMaybe<KrCommentProjectWhereInput>;
};

export type KrCommentProjectMaxAggregate = {
  __typename?: 'KrCommentProjectMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  krId?: Maybe<Scalars['Int']['output']>;
};

export type KrCommentProjectMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
};

export type KrCommentProjectMinAggregate = {
  __typename?: 'KrCommentProjectMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  krId?: Maybe<Scalars['Int']['output']>;
};

export type KrCommentProjectMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
};

export type KrCommentProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type KrCommentProjectOrderByWithAggregationInput = {
  _avg?: InputMaybe<KrCommentProjectAvgOrderByAggregateInput>;
  _count?: InputMaybe<KrCommentProjectCountOrderByAggregateInput>;
  _max?: InputMaybe<KrCommentProjectMaxOrderByAggregateInput>;
  _min?: InputMaybe<KrCommentProjectMinOrderByAggregateInput>;
  _sum?: InputMaybe<KrCommentProjectSumOrderByAggregateInput>;
  comments?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
};

export type KrCommentProjectOrderByWithRelationInput = {
  comments?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
  krProject?: InputMaybe<OkrProjectOrderByWithRelationInput>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export enum KrCommentProjectScalarFieldEnum {
  Comments = 'comments',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Id = 'id',
  KrId = 'krId'
}

export type KrCommentProjectScalarWhereInput = {
  AND?: InputMaybe<Array<KrCommentProjectScalarWhereInput>>;
  NOT?: InputMaybe<Array<KrCommentProjectScalarWhereInput>>;
  OR?: InputMaybe<Array<KrCommentProjectScalarWhereInput>>;
  comments?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  krId?: InputMaybe<IntFilter>;
};

export type KrCommentProjectScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<KrCommentProjectScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<KrCommentProjectScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<KrCommentProjectScalarWhereWithAggregatesInput>>;
  comments?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  krId?: InputMaybe<IntWithAggregatesFilter>;
};

export type KrCommentProjectSumAggregate = {
  __typename?: 'KrCommentProjectSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  krId?: Maybe<Scalars['Int']['output']>;
};

export type KrCommentProjectSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
};

export type KrCommentProjectUncheckedCreateInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  krId: Scalars['Int']['input'];
};

export type KrCommentProjectUncheckedCreateNestedManyWithoutKrProjectInput = {
  connect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCommentProjectCreateOrConnectWithoutKrProjectInput>>;
  create?: InputMaybe<Array<KrCommentProjectCreateWithoutKrProjectInput>>;
  createMany?: InputMaybe<KrCommentProjectCreateManyKrProjectInputEnvelope>;
};

export type KrCommentProjectUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<KrCommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<KrCommentProjectCreateManyUserInputEnvelope>;
};

export type KrCommentProjectUncheckedCreateWithoutKrProjectInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type KrCommentProjectUncheckedCreateWithoutUserInput = {
  comments: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krId: Scalars['Int']['input'];
};

export type KrCommentProjectUncheckedUpdateInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  krId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type KrCommentProjectUncheckedUpdateManyInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  krId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type KrCommentProjectUncheckedUpdateManyWithoutKrProjectInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type KrCommentProjectUncheckedUpdateManyWithoutKrProjectNestedInput = {
  connect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCommentProjectCreateOrConnectWithoutKrProjectInput>>;
  create?: InputMaybe<Array<KrCommentProjectCreateWithoutKrProjectInput>>;
  createMany?: InputMaybe<KrCommentProjectCreateManyKrProjectInputEnvelope>;
  delete?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<KrCommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<KrCommentProjectUpdateWithWhereUniqueWithoutKrProjectInput>>;
  updateMany?: InputMaybe<Array<KrCommentProjectUpdateManyWithWhereWithoutKrProjectInput>>;
  upsert?: InputMaybe<Array<KrCommentProjectUpsertWithWhereUniqueWithoutKrProjectInput>>;
};

export type KrCommentProjectUncheckedUpdateManyWithoutUserInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  krId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type KrCommentProjectUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<KrCommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<KrCommentProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<KrCommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<KrCommentProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<KrCommentProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<KrCommentProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type KrCommentProjectUncheckedUpdateWithoutKrProjectInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type KrCommentProjectUncheckedUpdateWithoutUserInput = {
  comments?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  krId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type KrCommentProjectUpdateManyWithWhereWithoutKrProjectInput = {
  data: KrCommentProjectUncheckedUpdateManyWithoutKrProjectInput;
  where: KrCommentProjectScalarWhereInput;
};

export type KrCommentProjectUpdateManyWithWhereWithoutUserInput = {
  data: KrCommentProjectUncheckedUpdateManyWithoutUserInput;
  where: KrCommentProjectScalarWhereInput;
};

export type KrCommentProjectUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<KrCommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<KrCommentProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<KrCommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<KrCommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<KrCommentProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<KrCommentProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<KrCommentProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type KrCommentProjectUpdateWithWhereUniqueWithoutKrProjectInput = {
  data: KrCommentProjectUncheckedUpdateWithoutKrProjectInput;
  where: KrCommentProjectWhereUniqueInput;
};

export type KrCommentProjectUpdateWithWhereUniqueWithoutUserInput = {
  data: KrCommentProjectUncheckedUpdateWithoutUserInput;
  where: KrCommentProjectWhereUniqueInput;
};

export type KrCommentProjectUpsertWithWhereUniqueWithoutKrProjectInput = {
  create: KrCommentProjectUncheckedCreateWithoutKrProjectInput;
  update: KrCommentProjectUncheckedUpdateWithoutKrProjectInput;
  where: KrCommentProjectWhereUniqueInput;
};

export type KrCommentProjectUpsertWithWhereUniqueWithoutUserInput = {
  create: KrCommentProjectUncheckedCreateWithoutUserInput;
  update: KrCommentProjectUncheckedUpdateWithoutUserInput;
  where: KrCommentProjectWhereUniqueInput;
};

export type KrCommentProjectWhereInput = {
  AND?: InputMaybe<Array<KrCommentProjectWhereInput>>;
  NOT?: InputMaybe<Array<KrCommentProjectWhereInput>>;
  OR?: InputMaybe<Array<KrCommentProjectWhereInput>>;
  comments?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  id?: InputMaybe<IntFilter>;
  krId?: InputMaybe<IntFilter>;
  krProject?: InputMaybe<OkrProjectRelationFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type KrCommentProjectWhereUniqueInput = {
  AND?: InputMaybe<Array<KrCommentProjectWhereInput>>;
  NOT?: InputMaybe<Array<KrCommentProjectWhereInput>>;
  OR?: InputMaybe<Array<KrCommentProjectWhereInput>>;
  comments?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krId?: InputMaybe<IntFilter>;
  krProject?: InputMaybe<OkrProjectRelationFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type KrCountAggregate = {
  __typename?: 'KrCountAggregate';
  _all: Scalars['Int']['output'];
  cratedBy: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  objectiveId: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  target: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type KrCountOrderByAggregateInput = {
  cratedBy?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type KrCreateManyCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objectiveId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
  userUuid: Scalars['String']['input'];
};

export type KrCreateManyCreatedByUserInputEnvelope = {
  data: Array<KrCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KrCreateManyInput = {
  cratedBy: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objectiveId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
  userUuid: Scalars['String']['input'];
};

export type KrCreateManyObjectiveInput = {
  cratedBy: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
  userUuid: Scalars['String']['input'];
};

export type KrCreateManyObjectiveInputEnvelope = {
  data: Array<KrCreateManyObjectiveInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KrCreateManyUserInput = {
  cratedBy: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objectiveId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
};

export type KrCreateManyUserInputEnvelope = {
  data: Array<KrCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type KrCreateNestedManyWithoutObjectiveInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutObjectiveInput>>;
  create?: InputMaybe<Array<KrCreateWithoutObjectiveInput>>;
  createMany?: InputMaybe<KrCreateManyObjectiveInputEnvelope>;
};

export type KrCreateOrConnectWithoutCreatedByUserInput = {
  create: KrUncheckedCreateWithoutCreatedByUserInput;
  where: KrWhereUniqueInput;
};

export type KrCreateOrConnectWithoutObjectiveInput = {
  create: KrUncheckedCreateWithoutObjectiveInput;
  where: KrWhereUniqueInput;
};

export type KrCreateOrConnectWithoutUserInput = {
  create: KrUncheckedCreateWithoutUserInput;
  where: KrWhereUniqueInput;
};

export type KrCreateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  objective: ObjectiveCreateNestedOneWithoutKrInput;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
  user: UserCreateNestedOneWithoutKrInput;
};

export type KrCreateWithoutObjectiveInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser: UserCreateNestedOneWithoutKrCreatedByInput;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
  user: UserCreateNestedOneWithoutKrInput;
};

export type KrCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser: UserCreateNestedOneWithoutKrCreatedByInput;
  objective: ObjectiveCreateNestedOneWithoutKrInput;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
};

export type KrGroupBy = {
  __typename?: 'KrGroupBy';
  _avg?: Maybe<KrAvgAggregate>;
  _count?: Maybe<KrCountAggregate>;
  _max?: Maybe<KrMaxAggregate>;
  _min?: Maybe<KrMinAggregate>;
  _sum?: Maybe<KrSumAggregate>;
  cratedBy: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  objectiveId: Scalars['Int']['output'];
  progress: Scalars['Float']['output'];
  target: Scalars['Float']['output'];
  title: Scalars['String']['output'];
  userUuid: Scalars['String']['output'];
};

export type KrListRelationFilter = {
  every?: InputMaybe<KrWhereInput>;
  none?: InputMaybe<KrWhereInput>;
  some?: InputMaybe<KrWhereInput>;
};

export type KrMaxAggregate = {
  __typename?: 'KrMaxAggregate';
  cratedBy?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  objectiveId?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type KrMaxOrderByAggregateInput = {
  cratedBy?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type KrMinAggregate = {
  __typename?: 'KrMinAggregate';
  cratedBy?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  objectiveId?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type KrMinOrderByAggregateInput = {
  cratedBy?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type KrOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type KrOrderByWithAggregationInput = {
  _avg?: InputMaybe<KrAvgOrderByAggregateInput>;
  _count?: InputMaybe<KrCountOrderByAggregateInput>;
  _max?: InputMaybe<KrMaxOrderByAggregateInput>;
  _min?: InputMaybe<KrMinOrderByAggregateInput>;
  _sum?: InputMaybe<KrSumOrderByAggregateInput>;
  cratedBy?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type KrOrderByWithRelationInput = {
  cratedBy?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  objective?: InputMaybe<ObjectiveOrderByWithRelationInput>;
  objectiveId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum KrScalarFieldEnum {
  CratedBy = 'cratedBy',
  CreatedAt = 'createdAt',
  Id = 'id',
  ObjectiveId = 'objectiveId',
  Progress = 'progress',
  Target = 'target',
  Title = 'title',
  UserUuid = 'userUuid'
}

export type KrScalarWhereInput = {
  AND?: InputMaybe<Array<KrScalarWhereInput>>;
  NOT?: InputMaybe<Array<KrScalarWhereInput>>;
  OR?: InputMaybe<Array<KrScalarWhereInput>>;
  cratedBy?: InputMaybe<UuidFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  objectiveId?: InputMaybe<IntFilter>;
  progress?: InputMaybe<FloatFilter>;
  target?: InputMaybe<FloatFilter>;
  title?: InputMaybe<StringFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type KrScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<KrScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<KrScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<KrScalarWhereWithAggregatesInput>>;
  cratedBy?: InputMaybe<UuidWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  objectiveId?: InputMaybe<IntWithAggregatesFilter>;
  progress?: InputMaybe<FloatWithAggregatesFilter>;
  target?: InputMaybe<FloatWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type KrSumAggregate = {
  __typename?: 'KrSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  objectiveId?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type KrSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type KrUncheckedCreateInput = {
  cratedBy: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objectiveId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
  userUuid: Scalars['String']['input'];
};

export type KrUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<KrCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<KrCreateManyCreatedByUserInputEnvelope>;
};

export type KrUncheckedCreateNestedManyWithoutObjectiveInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutObjectiveInput>>;
  create?: InputMaybe<Array<KrCreateWithoutObjectiveInput>>;
  createMany?: InputMaybe<KrCreateManyObjectiveInputEnvelope>;
};

export type KrUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<KrCreateWithoutUserInput>>;
  createMany?: InputMaybe<KrCreateManyUserInputEnvelope>;
};

export type KrUncheckedCreateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objectiveId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
  userUuid: Scalars['String']['input'];
};

export type KrUncheckedCreateWithoutObjectiveInput = {
  cratedBy: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
  userUuid: Scalars['String']['input'];
};

export type KrUncheckedCreateWithoutUserInput = {
  cratedBy: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objectiveId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  title: Scalars['String']['input'];
};

export type KrUncheckedUpdateInput = {
  cratedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type KrUncheckedUpdateManyInput = {
  cratedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type KrUncheckedUpdateManyWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type KrUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<KrCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<KrCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<KrWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<KrScalarWhereInput>>;
  disconnect?: InputMaybe<Array<KrWhereUniqueInput>>;
  set?: InputMaybe<Array<KrWhereUniqueInput>>;
  update?: InputMaybe<Array<KrUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<KrUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<KrUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type KrUncheckedUpdateManyWithoutObjectiveInput = {
  cratedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type KrUncheckedUpdateManyWithoutObjectiveNestedInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutObjectiveInput>>;
  create?: InputMaybe<Array<KrCreateWithoutObjectiveInput>>;
  createMany?: InputMaybe<KrCreateManyObjectiveInputEnvelope>;
  delete?: InputMaybe<Array<KrWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<KrScalarWhereInput>>;
  disconnect?: InputMaybe<Array<KrWhereUniqueInput>>;
  set?: InputMaybe<Array<KrWhereUniqueInput>>;
  update?: InputMaybe<Array<KrUpdateWithWhereUniqueWithoutObjectiveInput>>;
  updateMany?: InputMaybe<Array<KrUpdateManyWithWhereWithoutObjectiveInput>>;
  upsert?: InputMaybe<Array<KrUpsertWithWhereUniqueWithoutObjectiveInput>>;
};

export type KrUncheckedUpdateManyWithoutUserInput = {
  cratedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type KrUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<KrCreateWithoutUserInput>>;
  createMany?: InputMaybe<KrCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<KrWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<KrScalarWhereInput>>;
  disconnect?: InputMaybe<Array<KrWhereUniqueInput>>;
  set?: InputMaybe<Array<KrWhereUniqueInput>>;
  update?: InputMaybe<Array<KrUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<KrUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<KrUpsertWithWhereUniqueWithoutUserInput>>;
};

export type KrUncheckedUpdateWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type KrUncheckedUpdateWithoutObjectiveInput = {
  cratedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type KrUncheckedUpdateWithoutUserInput = {
  cratedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type KrUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: KrUncheckedUpdateManyWithoutCreatedByUserInput;
  where: KrScalarWhereInput;
};

export type KrUpdateManyWithWhereWithoutObjectiveInput = {
  data: KrUncheckedUpdateManyWithoutObjectiveInput;
  where: KrScalarWhereInput;
};

export type KrUpdateManyWithWhereWithoutUserInput = {
  data: KrUncheckedUpdateManyWithoutUserInput;
  where: KrScalarWhereInput;
};

export type KrUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<KrCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<KrCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<KrWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<KrScalarWhereInput>>;
  disconnect?: InputMaybe<Array<KrWhereUniqueInput>>;
  set?: InputMaybe<Array<KrWhereUniqueInput>>;
  update?: InputMaybe<Array<KrUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<KrUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<KrUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type KrUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<KrWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<KrCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<KrCreateWithoutUserInput>>;
  createMany?: InputMaybe<KrCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<KrWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<KrScalarWhereInput>>;
  disconnect?: InputMaybe<Array<KrWhereUniqueInput>>;
  set?: InputMaybe<Array<KrWhereUniqueInput>>;
  update?: InputMaybe<Array<KrUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<KrUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<KrUpsertWithWhereUniqueWithoutUserInput>>;
};

export type KrUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: KrUncheckedUpdateWithoutCreatedByUserInput;
  where: KrWhereUniqueInput;
};

export type KrUpdateWithWhereUniqueWithoutObjectiveInput = {
  data: KrUncheckedUpdateWithoutObjectiveInput;
  where: KrWhereUniqueInput;
};

export type KrUpdateWithWhereUniqueWithoutUserInput = {
  data: KrUncheckedUpdateWithoutUserInput;
  where: KrWhereUniqueInput;
};

export type KrUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: KrUncheckedCreateWithoutCreatedByUserInput;
  update: KrUncheckedUpdateWithoutCreatedByUserInput;
  where: KrWhereUniqueInput;
};

export type KrUpsertWithWhereUniqueWithoutObjectiveInput = {
  create: KrUncheckedCreateWithoutObjectiveInput;
  update: KrUncheckedUpdateWithoutObjectiveInput;
  where: KrWhereUniqueInput;
};

export type KrUpsertWithWhereUniqueWithoutUserInput = {
  create: KrUncheckedCreateWithoutUserInput;
  update: KrUncheckedUpdateWithoutUserInput;
  where: KrWhereUniqueInput;
};

export type KrWhereInput = {
  AND?: InputMaybe<Array<KrWhereInput>>;
  NOT?: InputMaybe<Array<KrWhereInput>>;
  OR?: InputMaybe<Array<KrWhereInput>>;
  cratedBy?: InputMaybe<UuidFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdByUser?: InputMaybe<UserRelationFilter>;
  id?: InputMaybe<IntFilter>;
  objective?: InputMaybe<ObjectiveRelationFilter>;
  objectiveId?: InputMaybe<IntFilter>;
  progress?: InputMaybe<FloatFilter>;
  target?: InputMaybe<FloatFilter>;
  title?: InputMaybe<StringFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type KrWhereUniqueInput = {
  AND?: InputMaybe<Array<KrWhereInput>>;
  NOT?: InputMaybe<Array<KrWhereInput>>;
  OR?: InputMaybe<Array<KrWhereInput>>;
  cratedBy?: InputMaybe<UuidFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdByUser?: InputMaybe<UserRelationFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objective?: InputMaybe<ObjectiveRelationFilter>;
  objectiveId?: InputMaybe<IntFilter>;
  progress?: InputMaybe<FloatFilter>;
  target?: InputMaybe<FloatFilter>;
  title?: InputMaybe<StringFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type LoginInput = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  userName?: InputMaybe<Scalars['String']['input']>;
};

export type LoginInputMindforge = {
  email: Scalars['String']['input'];
  password: Scalars['String']['input'];
  userName?: InputMaybe<Scalars['String']['input']>;
};

export type Mutation = {
  __typename?: 'Mutation';
  createManyAcessHistoryUser: AffectedRowsOutput;
  createManyArchives: AffectedRowsOutput;
  createManyBoard: AffectedRowsOutput;
  createManyBoardMenbership: AffectedRowsOutput;
  createManyCard: AffectedRowsOutput;
  createManyCardAssignment: AffectedRowsOutput;
  createManyCardComment: AffectedRowsOutput;
  createManyCardMovement: AffectedRowsOutput;
  createManyCardTags: AffectedRowsOutput;
  createManyClient: AffectedRowsOutput;
  createManyColumn: AffectedRowsOutput;
  createManyCommentProject: AffectedRowsOutput;
  createManyCsat: AffectedRowsOutput;
  createManyField: AffectedRowsOutput;
  createManyFieldColumn: AffectedRowsOutput;
  createManyFieldsValue: AffectedRowsOutput;
  createManyGroup: AffectedRowsOutput;
  createManyGroupMenbership: AffectedRowsOutput;
  createManyGroupUser: AffectedRowsOutput;
  createManyHistoryFlag: AffectedRowsOutput;
  createManyHistoryMonthlyRecurringRevenue: AffectedRowsOutput;
  createManyHistoryStep: AffectedRowsOutput;
  createManyInvest: AffectedRowsOutput;
  createManyJobFunction: AffectedRowsOutput;
  createManyKr: AffectedRowsOutput;
  createManyKrCommentProject: AffectedRowsOutput;
  createManyNotfy: AffectedRowsOutput;
  createManyObjective: AffectedRowsOutput;
  createManyOkrObjectiveProject: AffectedRowsOutput;
  createManyOkrProject: AffectedRowsOutput;
  createManyOkrProjectHistory: AffectedRowsOutput;
  createManyOrganization: AffectedRowsOutput;
  createManyPermission: AffectedRowsOutput;
  createManyPipefyProject: AffectedRowsOutput;
  createManyPrimitiveFields: AffectedRowsOutput;
  createManyPrimitiveStreenght: AffectedRowsOutput;
  createManyProject: AffectedRowsOutput;
  createManyProjectManager: AffectedRowsOutput;
  createManyProjectsBoards: AffectedRowsOutput;
  createManyQnp: AffectedRowsOutput;
  createManyReceivedClient: AffectedRowsOutput;
  createManySelfStructure: AffectedRowsOutput;
  createManyServiceLevelAgreement: AffectedRowsOutput;
  createManyStep: AffectedRowsOutput;
  createManyTag: AffectedRowsOutput;
  createManyTask: AffectedRowsOutput;
  createManyTeam: AffectedRowsOutput;
  createManyThrowErrorFront: AffectedRowsOutput;
  createManyTokenFirebase: AffectedRowsOutput;
  createManyUser: AffectedRowsOutput;
  createManyUserJobFunction: AffectedRowsOutput;
  createManyUserNotfy: AffectedRowsOutput;
  createManyUserOrganization: AffectedRowsOutput;
  createManyUserStep: AffectedRowsOutput;
  createManyUserTeam: AffectedRowsOutput;
  createManyViewedCommentProject: AffectedRowsOutput;
  createOneAcessHistoryUser: AcessHistoryUser;
  createOneArchives: Archives;
  createOneBoard: Board;
  createOneBoardMenbership: BoardMenbership;
  createOneCard: Card;
  createOneCardAssignment: CardAssignment;
  createOneCardComment: CardComment;
  createOneCardMovement: CardMovement;
  createOneCardTags: CardTags;
  createOneClient: Client;
  createOneColumn: Column;
  createOneCommentProject: CommentProject;
  createOneCsat: Csat;
  createOneField: Field;
  createOneFieldColumn: FieldColumn;
  createOneFieldsValue: FieldsValue;
  createOneGroup: Group;
  createOneGroupMenbership: GroupMenbership;
  createOneGroupUser: GroupUser;
  createOneHistoryFlag: HistoryFlag;
  createOneHistoryMonthlyRecurringRevenue: HistoryMonthlyRecurringRevenue;
  createOneHistoryStep: HistoryStep;
  createOneInvest: Invest;
  createOneJobFunction: JobFunction;
  createOneKr: Kr;
  createOneKrCommentProject: KrCommentProject;
  createOneNotfy: Notfy;
  createOneObjective: Objective;
  createOneOkrObjectiveProject: OkrObjectiveProject;
  createOneOkrProject: OkrProject;
  createOneOkrProjectHistory: OkrProjectHistory;
  createOneOrganization: Organization;
  createOnePermission: Permission;
  createOnePipefyProject: PipefyProject;
  createOnePrimitiveFields: PrimitiveFields;
  createOnePrimitiveStreenght: PrimitiveStreenght;
  createOneProject: Project;
  createOneProjectManager: ProjectManager;
  createOneProjectsBoards: ProjectsBoards;
  createOneQnp: Qnp;
  createOneReceivedClient: ReceivedClient;
  createOneSelfStructure: SelfStructure;
  createOneServiceLevelAgreement: ServiceLevelAgreement;
  createOneStep: Step;
  createOneTag: Tag;
  createOneTask: Task;
  createOneTeam: Team;
  createOneThrowErrorFront: ThrowErrorFront;
  createOneTokenFirebase: TokenFirebase;
  createOneUser: User;
  createOneUserJobFunction: UserJobFunction;
  createOneUserNotfy: UserNotfy;
  createOneUserOrganization: UserOrganization;
  createOneUserStep: UserStep;
  createOneUserTeam: UserTeam;
  createOneViewedCommentProject: ViewedCommentProject;
  deleteManyAcessHistoryUser: AffectedRowsOutput;
  deleteManyArchives: AffectedRowsOutput;
  deleteManyBoard: AffectedRowsOutput;
  deleteManyBoardMenbership: AffectedRowsOutput;
  deleteManyCard: AffectedRowsOutput;
  deleteManyCardAssignment: AffectedRowsOutput;
  deleteManyCardComment: AffectedRowsOutput;
  deleteManyCardMovement: AffectedRowsOutput;
  deleteManyCardTags: AffectedRowsOutput;
  deleteManyClient: AffectedRowsOutput;
  deleteManyColumn: AffectedRowsOutput;
  deleteManyCommentProject: AffectedRowsOutput;
  deleteManyCsat: AffectedRowsOutput;
  deleteManyField: AffectedRowsOutput;
  deleteManyFieldColumn: AffectedRowsOutput;
  deleteManyFieldsValue: AffectedRowsOutput;
  deleteManyGroup: AffectedRowsOutput;
  deleteManyGroupMenbership: AffectedRowsOutput;
  deleteManyGroupUser: AffectedRowsOutput;
  deleteManyHistoryFlag: AffectedRowsOutput;
  deleteManyHistoryMonthlyRecurringRevenue: AffectedRowsOutput;
  deleteManyHistoryStep: AffectedRowsOutput;
  deleteManyInvest: AffectedRowsOutput;
  deleteManyJobFunction: AffectedRowsOutput;
  deleteManyKr: AffectedRowsOutput;
  deleteManyKrCommentProject: AffectedRowsOutput;
  deleteManyNotfy: AffectedRowsOutput;
  deleteManyObjective: AffectedRowsOutput;
  deleteManyOkrObjectiveProject: AffectedRowsOutput;
  deleteManyOkrProject: AffectedRowsOutput;
  deleteManyOkrProjectHistory: AffectedRowsOutput;
  deleteManyOrganization: AffectedRowsOutput;
  deleteManyPermission: AffectedRowsOutput;
  deleteManyPipefyProject: AffectedRowsOutput;
  deleteManyPrimitiveFields: AffectedRowsOutput;
  deleteManyPrimitiveStreenght: AffectedRowsOutput;
  deleteManyProject: AffectedRowsOutput;
  deleteManyProjectManager: AffectedRowsOutput;
  deleteManyProjectsBoards: AffectedRowsOutput;
  deleteManyQnp: AffectedRowsOutput;
  deleteManyReceivedClient: AffectedRowsOutput;
  deleteManySelfStructure: AffectedRowsOutput;
  deleteManyServiceLevelAgreement: AffectedRowsOutput;
  deleteManyStep: AffectedRowsOutput;
  deleteManyTag: AffectedRowsOutput;
  deleteManyTask: AffectedRowsOutput;
  deleteManyTeam: AffectedRowsOutput;
  deleteManyThrowErrorFront: AffectedRowsOutput;
  deleteManyTokenFirebase: AffectedRowsOutput;
  deleteManyUser: AffectedRowsOutput;
  deleteManyUserJobFunction: AffectedRowsOutput;
  deleteManyUserNotfy: AffectedRowsOutput;
  deleteManyUserOrganization: AffectedRowsOutput;
  deleteManyUserStep: AffectedRowsOutput;
  deleteManyUserTeam: AffectedRowsOutput;
  deleteManyViewedCommentProject: AffectedRowsOutput;
  deleteOneAcessHistoryUser?: Maybe<AcessHistoryUser>;
  deleteOneArchives?: Maybe<Archives>;
  deleteOneBoard?: Maybe<Board>;
  deleteOneBoardMenbership?: Maybe<BoardMenbership>;
  deleteOneCard?: Maybe<Card>;
  deleteOneCardAssignment?: Maybe<CardAssignment>;
  deleteOneCardComment?: Maybe<CardComment>;
  deleteOneCardMovement?: Maybe<CardMovement>;
  deleteOneCardTags?: Maybe<CardTags>;
  deleteOneClient?: Maybe<Client>;
  deleteOneColumn?: Maybe<Column>;
  deleteOneCommentProject?: Maybe<CommentProject>;
  deleteOneCsat?: Maybe<Csat>;
  deleteOneField?: Maybe<Field>;
  deleteOneFieldColumn?: Maybe<FieldColumn>;
  deleteOneFieldsValue?: Maybe<FieldsValue>;
  deleteOneGroup?: Maybe<Group>;
  deleteOneGroupMenbership?: Maybe<GroupMenbership>;
  deleteOneGroupUser?: Maybe<GroupUser>;
  deleteOneHistoryFlag?: Maybe<HistoryFlag>;
  deleteOneHistoryMonthlyRecurringRevenue?: Maybe<HistoryMonthlyRecurringRevenue>;
  deleteOneHistoryStep?: Maybe<HistoryStep>;
  deleteOneInvest?: Maybe<Invest>;
  deleteOneJobFunction?: Maybe<JobFunction>;
  deleteOneKr?: Maybe<Kr>;
  deleteOneKrCommentProject?: Maybe<KrCommentProject>;
  deleteOneNotfy?: Maybe<Notfy>;
  deleteOneObjective?: Maybe<Objective>;
  deleteOneOkrObjectiveProject?: Maybe<OkrObjectiveProject>;
  deleteOneOkrProject?: Maybe<OkrProject>;
  deleteOneOkrProjectHistory?: Maybe<OkrProjectHistory>;
  deleteOneOrganization?: Maybe<Organization>;
  deleteOnePermission?: Maybe<Permission>;
  deleteOnePipefyProject?: Maybe<PipefyProject>;
  deleteOnePrimitiveFields?: Maybe<PrimitiveFields>;
  deleteOnePrimitiveStreenght?: Maybe<PrimitiveStreenght>;
  deleteOneProject?: Maybe<Project>;
  deleteOneProjectManager?: Maybe<ProjectManager>;
  deleteOneProjectsBoards?: Maybe<ProjectsBoards>;
  deleteOneQnp?: Maybe<Qnp>;
  deleteOneReceivedClient?: Maybe<ReceivedClient>;
  deleteOneSelfStructure?: Maybe<SelfStructure>;
  deleteOneServiceLevelAgreement?: Maybe<ServiceLevelAgreement>;
  deleteOneStep?: Maybe<Step>;
  deleteOneTag?: Maybe<Tag>;
  deleteOneTask?: Maybe<Task>;
  deleteOneTeam?: Maybe<Team>;
  deleteOneThrowErrorFront?: Maybe<ThrowErrorFront>;
  deleteOneTokenFirebase?: Maybe<TokenFirebase>;
  deleteOneUser?: Maybe<User>;
  deleteOneUserJobFunction?: Maybe<UserJobFunction>;
  deleteOneUserNotfy?: Maybe<UserNotfy>;
  deleteOneUserOrganization?: Maybe<UserOrganization>;
  deleteOneUserStep?: Maybe<UserStep>;
  deleteOneUserTeam?: Maybe<UserTeam>;
  deleteOneViewedCommentProject?: Maybe<ViewedCommentProject>;
  forgotPasswordCustom: UserTokenLogin;
  generatedTokenForClientCustom: OGeneratedTokenClient;
  login: UserTokenLogin;
  loginClientCustom: OLoginClient;
  loginMindforge: UserToken;
  register: UserTokenLogin;
  registerClientCustom: OutputClient;
  selfHome: OutputHome;
  sendStatusMovementCardCustom: Scalars['Boolean']['output'];
  throwNewErrorCustom: Scalars['Boolean']['output'];
  updateKanban: OutputCard;
  updateManyAcessHistoryUser: AffectedRowsOutput;
  updateManyArchives: AffectedRowsOutput;
  updateManyBoard: AffectedRowsOutput;
  updateManyBoardMenbership: AffectedRowsOutput;
  updateManyCard: AffectedRowsOutput;
  updateManyCardAssignment: AffectedRowsOutput;
  updateManyCardComment: AffectedRowsOutput;
  updateManyCardMovement: AffectedRowsOutput;
  updateManyCardTags: AffectedRowsOutput;
  updateManyClient: AffectedRowsOutput;
  updateManyColumn: AffectedRowsOutput;
  updateManyCommentProject: AffectedRowsOutput;
  updateManyCsat: AffectedRowsOutput;
  updateManyField: AffectedRowsOutput;
  updateManyFieldColumn: AffectedRowsOutput;
  updateManyFieldsValue: AffectedRowsOutput;
  updateManyGroup: AffectedRowsOutput;
  updateManyGroupMenbership: AffectedRowsOutput;
  updateManyGroupUser: AffectedRowsOutput;
  updateManyHistoryFlag: AffectedRowsOutput;
  updateManyHistoryMonthlyRecurringRevenue: AffectedRowsOutput;
  updateManyHistoryStep: AffectedRowsOutput;
  updateManyInvest: AffectedRowsOutput;
  updateManyJobFunction: AffectedRowsOutput;
  updateManyKr: AffectedRowsOutput;
  updateManyKrCommentProject: AffectedRowsOutput;
  updateManyNotfy: AffectedRowsOutput;
  updateManyObjective: AffectedRowsOutput;
  updateManyOkrObjectiveProject: AffectedRowsOutput;
  updateManyOkrProject: AffectedRowsOutput;
  updateManyOkrProjectHistory: AffectedRowsOutput;
  updateManyOrganization: AffectedRowsOutput;
  updateManyPermission: AffectedRowsOutput;
  updateManyPipefyProject: AffectedRowsOutput;
  updateManyPrimitiveFields: AffectedRowsOutput;
  updateManyPrimitiveStreenght: AffectedRowsOutput;
  updateManyProject: AffectedRowsOutput;
  updateManyProjectManager: AffectedRowsOutput;
  updateManyProjectsBoards: AffectedRowsOutput;
  updateManyQnp: AffectedRowsOutput;
  updateManyReceivedClient: AffectedRowsOutput;
  updateManySelfStructure: AffectedRowsOutput;
  updateManyServiceLevelAgreement: AffectedRowsOutput;
  updateManyStep: AffectedRowsOutput;
  updateManyTag: AffectedRowsOutput;
  updateManyTask: AffectedRowsOutput;
  updateManyTeam: AffectedRowsOutput;
  updateManyThrowErrorFront: AffectedRowsOutput;
  updateManyTokenFirebase: AffectedRowsOutput;
  updateManyUser: AffectedRowsOutput;
  updateManyUserJobFunction: AffectedRowsOutput;
  updateManyUserNotfy: AffectedRowsOutput;
  updateManyUserOrganization: AffectedRowsOutput;
  updateManyUserStep: AffectedRowsOutput;
  updateManyUserTeam: AffectedRowsOutput;
  updateManyViewedCommentProject: AffectedRowsOutput;
  updateOneAcessHistoryUser?: Maybe<AcessHistoryUser>;
  updateOneArchives?: Maybe<Archives>;
  updateOneBoard?: Maybe<Board>;
  updateOneBoardMenbership?: Maybe<BoardMenbership>;
  updateOneCard?: Maybe<Card>;
  updateOneCardAssignment?: Maybe<CardAssignment>;
  updateOneCardComment?: Maybe<CardComment>;
  updateOneCardMovement?: Maybe<CardMovement>;
  updateOneCardTags?: Maybe<CardTags>;
  updateOneClient?: Maybe<Client>;
  updateOneColumn?: Maybe<Column>;
  updateOneCommentProject?: Maybe<CommentProject>;
  updateOneCsat?: Maybe<Csat>;
  updateOneField?: Maybe<Field>;
  updateOneFieldColumn?: Maybe<FieldColumn>;
  updateOneFieldsValue?: Maybe<FieldsValue>;
  updateOneGroup?: Maybe<Group>;
  updateOneGroupMenbership?: Maybe<GroupMenbership>;
  updateOneGroupUser?: Maybe<GroupUser>;
  updateOneHistoryCard: Scalars['Boolean']['output'];
  updateOneHistoryFlag?: Maybe<HistoryFlag>;
  updateOneHistoryMonthlyRecurringRevenue?: Maybe<HistoryMonthlyRecurringRevenue>;
  updateOneHistoryStep?: Maybe<HistoryStep>;
  updateOneInvest?: Maybe<Invest>;
  updateOneJobFunction?: Maybe<JobFunction>;
  updateOneKr?: Maybe<Kr>;
  updateOneKrCommentProject?: Maybe<KrCommentProject>;
  updateOneNotfy?: Maybe<Notfy>;
  updateOneObjective?: Maybe<Objective>;
  updateOneOkrObjectiveProject?: Maybe<OkrObjectiveProject>;
  updateOneOkrProject?: Maybe<OkrProject>;
  updateOneOkrProjectHistory?: Maybe<OkrProjectHistory>;
  updateOneOrganization?: Maybe<Organization>;
  updateOnePermission?: Maybe<Permission>;
  updateOnePipefyProject?: Maybe<PipefyProject>;
  updateOnePrimitiveFields?: Maybe<PrimitiveFields>;
  updateOnePrimitiveStreenght?: Maybe<PrimitiveStreenght>;
  updateOneProject?: Maybe<Project>;
  updateOneProjectManager?: Maybe<ProjectManager>;
  updateOneProjectsBoards?: Maybe<ProjectsBoards>;
  updateOneQnp?: Maybe<Qnp>;
  updateOneReceivedClient?: Maybe<ReceivedClient>;
  updateOneSelfStructure?: Maybe<SelfStructure>;
  updateOneServiceLevelAgreement?: Maybe<ServiceLevelAgreement>;
  updateOneStep?: Maybe<Step>;
  updateOneTag?: Maybe<Tag>;
  updateOneTask?: Maybe<Task>;
  updateOneTeam?: Maybe<Team>;
  updateOneThrowErrorFront?: Maybe<ThrowErrorFront>;
  updateOneTokenFirebase?: Maybe<TokenFirebase>;
  updateOneUser?: Maybe<User>;
  updateOneUserJobFunction?: Maybe<UserJobFunction>;
  updateOneUserNotfy?: Maybe<UserNotfy>;
  updateOneUserOrganization?: Maybe<UserOrganization>;
  updateOneUserStep?: Maybe<UserStep>;
  updateOneUserTeam?: Maybe<UserTeam>;
  updateOneViewedCommentProject?: Maybe<ViewedCommentProject>;
  updateUserCustom: User;
  updateUserPasswordCustom: UserTokenLogin;
  upsertOneAcessHistoryUser: AcessHistoryUser;
  upsertOneArchives: Archives;
  upsertOneBoard: Board;
  upsertOneBoardMenbership: BoardMenbership;
  upsertOneCard: Card;
  upsertOneCardAssignment: CardAssignment;
  upsertOneCardComment: CardComment;
  upsertOneCardMovement: CardMovement;
  upsertOneCardTags: CardTags;
  upsertOneClient: Client;
  upsertOneColumn: Column;
  upsertOneCommentProject: CommentProject;
  upsertOneCsat: Csat;
  upsertOneField: Field;
  upsertOneFieldColumn: FieldColumn;
  upsertOneFieldsValue: FieldsValue;
  upsertOneGroup: Group;
  upsertOneGroupMenbership: GroupMenbership;
  upsertOneGroupUser: GroupUser;
  upsertOneHistoryFlag: HistoryFlag;
  upsertOneHistoryMonthlyRecurringRevenue: HistoryMonthlyRecurringRevenue;
  upsertOneHistoryStep: HistoryStep;
  upsertOneInvest: Invest;
  upsertOneJobFunction: JobFunction;
  upsertOneKr: Kr;
  upsertOneKrCommentProject: KrCommentProject;
  upsertOneNotfy: Notfy;
  upsertOneObjective: Objective;
  upsertOneOkrObjectiveProject: OkrObjectiveProject;
  upsertOneOkrProject: OkrProject;
  upsertOneOkrProjectHistory: OkrProjectHistory;
  upsertOneOrganization: Organization;
  upsertOnePermission: Permission;
  upsertOnePipefyProject: PipefyProject;
  upsertOnePrimitiveFields: PrimitiveFields;
  upsertOnePrimitiveStreenght: PrimitiveStreenght;
  upsertOneProject: Project;
  upsertOneProjectManager: ProjectManager;
  upsertOneProjectsBoards: ProjectsBoards;
  upsertOneQnp: Qnp;
  upsertOneReceivedClient: ReceivedClient;
  upsertOneSelfStructure: SelfStructure;
  upsertOneServiceLevelAgreement: ServiceLevelAgreement;
  upsertOneStep: Step;
  upsertOneTag: Tag;
  upsertOneTask: Task;
  upsertOneTeam: Team;
  upsertOneThrowErrorFront: ThrowErrorFront;
  upsertOneTokenFirebase: TokenFirebase;
  upsertOneUser: User;
  upsertOneUserJobFunction: UserJobFunction;
  upsertOneUserNotfy: UserNotfy;
  upsertOneUserOrganization: UserOrganization;
  upsertOneUserStep: UserStep;
  upsertOneUserTeam: UserTeam;
  upsertOneViewedCommentProject: ViewedCommentProject;
};


export type MutationCreateManyAcessHistoryUserArgs = {
  data: Array<AcessHistoryUserCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyArchivesArgs = {
  data: Array<ArchivesCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyBoardArgs = {
  data: Array<BoardCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyBoardMenbershipArgs = {
  data: Array<BoardMenbershipCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCardArgs = {
  data: Array<CardCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCardAssignmentArgs = {
  data: Array<CardAssignmentCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCardCommentArgs = {
  data: Array<CardCommentCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCardMovementArgs = {
  data: Array<CardMovementCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCardTagsArgs = {
  data: Array<CardTagsCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyClientArgs = {
  data: Array<ClientCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyColumnArgs = {
  data: Array<ColumnCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCommentProjectArgs = {
  data: Array<CommentProjectCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyCsatArgs = {
  data: Array<CsatCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyFieldArgs = {
  data: Array<FieldCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyFieldColumnArgs = {
  data: Array<FieldColumnCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyFieldsValueArgs = {
  data: Array<FieldsValueCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyGroupArgs = {
  data: Array<GroupCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyGroupMenbershipArgs = {
  data: Array<GroupMenbershipCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyGroupUserArgs = {
  data: Array<GroupUserCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyHistoryFlagArgs = {
  data: Array<HistoryFlagCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyHistoryMonthlyRecurringRevenueArgs = {
  data: Array<HistoryMonthlyRecurringRevenueCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyHistoryStepArgs = {
  data: Array<HistoryStepCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyInvestArgs = {
  data: Array<InvestCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyJobFunctionArgs = {
  data: Array<JobFunctionCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyKrArgs = {
  data: Array<KrCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyKrCommentProjectArgs = {
  data: Array<KrCommentProjectCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyNotfyArgs = {
  data: Array<NotfyCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyObjectiveArgs = {
  data: Array<ObjectiveCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyOkrObjectiveProjectArgs = {
  data: Array<OkrObjectiveProjectCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyOkrProjectArgs = {
  data: Array<OkrProjectCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyOkrProjectHistoryArgs = {
  data: Array<OkrProjectHistoryCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyOrganizationArgs = {
  data: Array<OrganizationCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyPermissionArgs = {
  data: Array<PermissionCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyPipefyProjectArgs = {
  data: Array<PipefyProjectCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyPrimitiveFieldsArgs = {
  data: Array<PrimitiveFieldsCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyPrimitiveStreenghtArgs = {
  data: Array<PrimitiveStreenghtCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyProjectArgs = {
  data: Array<ProjectCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyProjectManagerArgs = {
  data: Array<ProjectManagerCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyProjectsBoardsArgs = {
  data: Array<ProjectsBoardsCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyQnpArgs = {
  data: Array<QnpCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyReceivedClientArgs = {
  data: Array<ReceivedClientCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManySelfStructureArgs = {
  data: Array<SelfStructureCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyServiceLevelAgreementArgs = {
  data: Array<ServiceLevelAgreementCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyStepArgs = {
  data: Array<StepCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyTagArgs = {
  data: Array<TagCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyTaskArgs = {
  data: Array<TaskCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyTeamArgs = {
  data: Array<TeamCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyThrowErrorFrontArgs = {
  data: Array<ThrowErrorFrontCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyTokenFirebaseArgs = {
  data: Array<TokenFirebaseCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUserArgs = {
  data: Array<UserCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUserJobFunctionArgs = {
  data: Array<UserJobFunctionCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUserNotfyArgs = {
  data: Array<UserNotfyCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUserOrganizationArgs = {
  data: Array<UserOrganizationCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUserStepArgs = {
  data: Array<UserStepCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyUserTeamArgs = {
  data: Array<UserTeamCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateManyViewedCommentProjectArgs = {
  data: Array<ViewedCommentProjectCreateManyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};


export type MutationCreateOneAcessHistoryUserArgs = {
  data: AcessHistoryUserUncheckedCreateInput;
};


export type MutationCreateOneArchivesArgs = {
  data: ArchivesUncheckedCreateInput;
};


export type MutationCreateOneBoardArgs = {
  data: BoardUncheckedCreateInput;
};


export type MutationCreateOneBoardMenbershipArgs = {
  data: BoardMenbershipUncheckedCreateInput;
};


export type MutationCreateOneCardArgs = {
  data: CardUncheckedCreateInput;
};


export type MutationCreateOneCardAssignmentArgs = {
  data: CardAssignmentUncheckedCreateInput;
};


export type MutationCreateOneCardCommentArgs = {
  data: CardCommentUncheckedCreateInput;
};


export type MutationCreateOneCardMovementArgs = {
  data: CardMovementUncheckedCreateInput;
};


export type MutationCreateOneCardTagsArgs = {
  data: CardTagsUncheckedCreateInput;
};


export type MutationCreateOneClientArgs = {
  data: ClientUncheckedCreateInput;
};


export type MutationCreateOneColumnArgs = {
  data: ColumnUncheckedCreateInput;
};


export type MutationCreateOneCommentProjectArgs = {
  data: CommentProjectUncheckedCreateInput;
};


export type MutationCreateOneCsatArgs = {
  data: CsatUncheckedCreateInput;
};


export type MutationCreateOneFieldArgs = {
  data: FieldUncheckedCreateInput;
};


export type MutationCreateOneFieldColumnArgs = {
  data: FieldColumnUncheckedCreateInput;
};


export type MutationCreateOneFieldsValueArgs = {
  data: FieldsValueUncheckedCreateInput;
};


export type MutationCreateOneGroupArgs = {
  data: GroupUncheckedCreateInput;
};


export type MutationCreateOneGroupMenbershipArgs = {
  data: GroupMenbershipUncheckedCreateInput;
};


export type MutationCreateOneGroupUserArgs = {
  data: GroupUserUncheckedCreateInput;
};


export type MutationCreateOneHistoryFlagArgs = {
  data: HistoryFlagUncheckedCreateInput;
};


export type MutationCreateOneHistoryMonthlyRecurringRevenueArgs = {
  data: HistoryMonthlyRecurringRevenueUncheckedCreateInput;
};


export type MutationCreateOneHistoryStepArgs = {
  data: HistoryStepUncheckedCreateInput;
};


export type MutationCreateOneInvestArgs = {
  data: InvestUncheckedCreateInput;
};


export type MutationCreateOneJobFunctionArgs = {
  data: JobFunctionUncheckedCreateInput;
};


export type MutationCreateOneKrArgs = {
  data: KrUncheckedCreateInput;
};


export type MutationCreateOneKrCommentProjectArgs = {
  data: KrCommentProjectUncheckedCreateInput;
};


export type MutationCreateOneNotfyArgs = {
  data: NotfyUncheckedCreateInput;
};


export type MutationCreateOneObjectiveArgs = {
  data: ObjectiveUncheckedCreateInput;
};


export type MutationCreateOneOkrObjectiveProjectArgs = {
  data: OkrObjectiveProjectUncheckedCreateInput;
};


export type MutationCreateOneOkrProjectArgs = {
  data: OkrProjectUncheckedCreateInput;
};


export type MutationCreateOneOkrProjectHistoryArgs = {
  data: OkrProjectHistoryUncheckedCreateInput;
};


export type MutationCreateOneOrganizationArgs = {
  data: OrganizationUncheckedCreateInput;
};


export type MutationCreateOnePermissionArgs = {
  data: PermissionUncheckedCreateInput;
};


export type MutationCreateOnePipefyProjectArgs = {
  data: PipefyProjectUncheckedCreateInput;
};


export type MutationCreateOnePrimitiveFieldsArgs = {
  data: PrimitiveFieldsUncheckedCreateInput;
};


export type MutationCreateOnePrimitiveStreenghtArgs = {
  data: PrimitiveStreenghtUncheckedCreateInput;
};


export type MutationCreateOneProjectArgs = {
  data: ProjectUncheckedCreateInput;
};


export type MutationCreateOneProjectManagerArgs = {
  data: ProjectManagerUncheckedCreateInput;
};


export type MutationCreateOneProjectsBoardsArgs = {
  data: ProjectsBoardsUncheckedCreateInput;
};


export type MutationCreateOneQnpArgs = {
  data: QnpUncheckedCreateInput;
};


export type MutationCreateOneReceivedClientArgs = {
  data: ReceivedClientUncheckedCreateInput;
};


export type MutationCreateOneSelfStructureArgs = {
  data: SelfStructureUncheckedCreateInput;
};


export type MutationCreateOneServiceLevelAgreementArgs = {
  data: ServiceLevelAgreementUncheckedCreateInput;
};


export type MutationCreateOneStepArgs = {
  data: StepUncheckedCreateInput;
};


export type MutationCreateOneTagArgs = {
  data: TagUncheckedCreateInput;
};


export type MutationCreateOneTaskArgs = {
  data: TaskUncheckedCreateInput;
};


export type MutationCreateOneTeamArgs = {
  data: TeamUncheckedCreateInput;
};


export type MutationCreateOneThrowErrorFrontArgs = {
  data: ThrowErrorFrontUncheckedCreateInput;
};


export type MutationCreateOneTokenFirebaseArgs = {
  data: TokenFirebaseUncheckedCreateInput;
};


export type MutationCreateOneUserArgs = {
  data: UserUncheckedCreateInput;
};


export type MutationCreateOneUserJobFunctionArgs = {
  data: UserJobFunctionUncheckedCreateInput;
};


export type MutationCreateOneUserNotfyArgs = {
  data: UserNotfyUncheckedCreateInput;
};


export type MutationCreateOneUserOrganizationArgs = {
  data: UserOrganizationUncheckedCreateInput;
};


export type MutationCreateOneUserStepArgs = {
  data: UserStepUncheckedCreateInput;
};


export type MutationCreateOneUserTeamArgs = {
  data: UserTeamUncheckedCreateInput;
};


export type MutationCreateOneViewedCommentProjectArgs = {
  data: ViewedCommentProjectUncheckedCreateInput;
};


export type MutationDeleteManyAcessHistoryUserArgs = {
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type MutationDeleteManyArchivesArgs = {
  where?: InputMaybe<ArchivesWhereInput>;
};


export type MutationDeleteManyBoardArgs = {
  where?: InputMaybe<BoardWhereInput>;
};


export type MutationDeleteManyBoardMenbershipArgs = {
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type MutationDeleteManyCardArgs = {
  where?: InputMaybe<CardWhereInput>;
};


export type MutationDeleteManyCardAssignmentArgs = {
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type MutationDeleteManyCardCommentArgs = {
  where?: InputMaybe<CardCommentWhereInput>;
};


export type MutationDeleteManyCardMovementArgs = {
  where?: InputMaybe<CardMovementWhereInput>;
};


export type MutationDeleteManyCardTagsArgs = {
  where?: InputMaybe<CardTagsWhereInput>;
};


export type MutationDeleteManyClientArgs = {
  where?: InputMaybe<ClientWhereInput>;
};


export type MutationDeleteManyColumnArgs = {
  where?: InputMaybe<ColumnWhereInput>;
};


export type MutationDeleteManyCommentProjectArgs = {
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type MutationDeleteManyCsatArgs = {
  where?: InputMaybe<CsatWhereInput>;
};


export type MutationDeleteManyFieldArgs = {
  where?: InputMaybe<FieldWhereInput>;
};


export type MutationDeleteManyFieldColumnArgs = {
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type MutationDeleteManyFieldsValueArgs = {
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type MutationDeleteManyGroupArgs = {
  where?: InputMaybe<GroupWhereInput>;
};


export type MutationDeleteManyGroupMenbershipArgs = {
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type MutationDeleteManyGroupUserArgs = {
  where?: InputMaybe<GroupUserWhereInput>;
};


export type MutationDeleteManyHistoryFlagArgs = {
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type MutationDeleteManyHistoryMonthlyRecurringRevenueArgs = {
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type MutationDeleteManyHistoryStepArgs = {
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type MutationDeleteManyInvestArgs = {
  where?: InputMaybe<InvestWhereInput>;
};


export type MutationDeleteManyJobFunctionArgs = {
  where?: InputMaybe<JobFunctionWhereInput>;
};


export type MutationDeleteManyKrArgs = {
  where?: InputMaybe<KrWhereInput>;
};


export type MutationDeleteManyKrCommentProjectArgs = {
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type MutationDeleteManyNotfyArgs = {
  where?: InputMaybe<NotfyWhereInput>;
};


export type MutationDeleteManyObjectiveArgs = {
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type MutationDeleteManyOkrObjectiveProjectArgs = {
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type MutationDeleteManyOkrProjectArgs = {
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type MutationDeleteManyOkrProjectHistoryArgs = {
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type MutationDeleteManyOrganizationArgs = {
  where?: InputMaybe<OrganizationWhereInput>;
};


export type MutationDeleteManyPermissionArgs = {
  where?: InputMaybe<PermissionWhereInput>;
};


export type MutationDeleteManyPipefyProjectArgs = {
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type MutationDeleteManyPrimitiveFieldsArgs = {
  where?: InputMaybe<PrimitiveFieldsWhereInput>;
};


export type MutationDeleteManyPrimitiveStreenghtArgs = {
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type MutationDeleteManyProjectArgs = {
  where?: InputMaybe<ProjectWhereInput>;
};


export type MutationDeleteManyProjectManagerArgs = {
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type MutationDeleteManyProjectsBoardsArgs = {
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type MutationDeleteManyQnpArgs = {
  where?: InputMaybe<QnpWhereInput>;
};


export type MutationDeleteManyReceivedClientArgs = {
  where?: InputMaybe<ReceivedClientWhereInput>;
};


export type MutationDeleteManySelfStructureArgs = {
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type MutationDeleteManyServiceLevelAgreementArgs = {
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type MutationDeleteManyStepArgs = {
  where?: InputMaybe<StepWhereInput>;
};


export type MutationDeleteManyTagArgs = {
  where?: InputMaybe<TagWhereInput>;
};


export type MutationDeleteManyTaskArgs = {
  where?: InputMaybe<TaskWhereInput>;
};


export type MutationDeleteManyTeamArgs = {
  where?: InputMaybe<TeamWhereInput>;
};


export type MutationDeleteManyThrowErrorFrontArgs = {
  where?: InputMaybe<ThrowErrorFrontWhereInput>;
};


export type MutationDeleteManyTokenFirebaseArgs = {
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type MutationDeleteManyUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type MutationDeleteManyUserJobFunctionArgs = {
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type MutationDeleteManyUserNotfyArgs = {
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type MutationDeleteManyUserOrganizationArgs = {
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type MutationDeleteManyUserStepArgs = {
  where?: InputMaybe<UserStepWhereInput>;
};


export type MutationDeleteManyUserTeamArgs = {
  where?: InputMaybe<UserTeamWhereInput>;
};


export type MutationDeleteManyViewedCommentProjectArgs = {
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};


export type MutationDeleteOneAcessHistoryUserArgs = {
  where: AcessHistoryUserWhereUniqueInput;
};


export type MutationDeleteOneArchivesArgs = {
  where: ArchivesWhereUniqueInput;
};


export type MutationDeleteOneBoardArgs = {
  where: BoardWhereUniqueInput;
};


export type MutationDeleteOneBoardMenbershipArgs = {
  where: BoardMenbershipWhereUniqueInput;
};


export type MutationDeleteOneCardArgs = {
  where: CardWhereUniqueInput;
};


export type MutationDeleteOneCardAssignmentArgs = {
  where: CardAssignmentWhereUniqueInput;
};


export type MutationDeleteOneCardCommentArgs = {
  where: CardCommentWhereUniqueInput;
};


export type MutationDeleteOneCardMovementArgs = {
  where: CardMovementWhereUniqueInput;
};


export type MutationDeleteOneCardTagsArgs = {
  where: CardTagsWhereUniqueInput;
};


export type MutationDeleteOneClientArgs = {
  where: ClientWhereUniqueInput;
};


export type MutationDeleteOneColumnArgs = {
  where: ColumnWhereUniqueInput;
};


export type MutationDeleteOneCommentProjectArgs = {
  where: CommentProjectWhereUniqueInput;
};


export type MutationDeleteOneCsatArgs = {
  where: CsatWhereUniqueInput;
};


export type MutationDeleteOneFieldArgs = {
  where: FieldWhereUniqueInput;
};


export type MutationDeleteOneFieldColumnArgs = {
  where: FieldColumnWhereUniqueInput;
};


export type MutationDeleteOneFieldsValueArgs = {
  where: FieldsValueWhereUniqueInput;
};


export type MutationDeleteOneGroupArgs = {
  where: GroupWhereUniqueInput;
};


export type MutationDeleteOneGroupMenbershipArgs = {
  where: GroupMenbershipWhereUniqueInput;
};


export type MutationDeleteOneGroupUserArgs = {
  where: GroupUserWhereUniqueInput;
};


export type MutationDeleteOneHistoryFlagArgs = {
  where: HistoryFlagWhereUniqueInput;
};


export type MutationDeleteOneHistoryMonthlyRecurringRevenueArgs = {
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};


export type MutationDeleteOneHistoryStepArgs = {
  where: HistoryStepWhereUniqueInput;
};


export type MutationDeleteOneInvestArgs = {
  where: InvestWhereUniqueInput;
};


export type MutationDeleteOneJobFunctionArgs = {
  where: JobFunctionWhereUniqueInput;
};


export type MutationDeleteOneKrArgs = {
  where: KrWhereUniqueInput;
};


export type MutationDeleteOneKrCommentProjectArgs = {
  where: KrCommentProjectWhereUniqueInput;
};


export type MutationDeleteOneNotfyArgs = {
  where: NotfyWhereUniqueInput;
};


export type MutationDeleteOneObjectiveArgs = {
  where: ObjectiveWhereUniqueInput;
};


export type MutationDeleteOneOkrObjectiveProjectArgs = {
  where: OkrObjectiveProjectWhereUniqueInput;
};


export type MutationDeleteOneOkrProjectArgs = {
  where: OkrProjectWhereUniqueInput;
};


export type MutationDeleteOneOkrProjectHistoryArgs = {
  where: OkrProjectHistoryWhereUniqueInput;
};


export type MutationDeleteOneOrganizationArgs = {
  where: OrganizationWhereUniqueInput;
};


export type MutationDeleteOnePermissionArgs = {
  where: PermissionWhereUniqueInput;
};


export type MutationDeleteOnePipefyProjectArgs = {
  where: PipefyProjectWhereUniqueInput;
};


export type MutationDeleteOnePrimitiveFieldsArgs = {
  where: PrimitiveFieldsWhereUniqueInput;
};


export type MutationDeleteOnePrimitiveStreenghtArgs = {
  where: PrimitiveStreenghtWhereUniqueInput;
};


export type MutationDeleteOneProjectArgs = {
  where: ProjectWhereUniqueInput;
};


export type MutationDeleteOneProjectManagerArgs = {
  where: ProjectManagerWhereUniqueInput;
};


export type MutationDeleteOneProjectsBoardsArgs = {
  where: ProjectsBoardsWhereUniqueInput;
};


export type MutationDeleteOneQnpArgs = {
  where: QnpWhereUniqueInput;
};


export type MutationDeleteOneReceivedClientArgs = {
  where: ReceivedClientWhereUniqueInput;
};


export type MutationDeleteOneSelfStructureArgs = {
  where: SelfStructureWhereUniqueInput;
};


export type MutationDeleteOneServiceLevelAgreementArgs = {
  where: ServiceLevelAgreementWhereUniqueInput;
};


export type MutationDeleteOneStepArgs = {
  where: StepWhereUniqueInput;
};


export type MutationDeleteOneTagArgs = {
  where: TagWhereUniqueInput;
};


export type MutationDeleteOneTaskArgs = {
  where: TaskWhereUniqueInput;
};


export type MutationDeleteOneTeamArgs = {
  where: TeamWhereUniqueInput;
};


export type MutationDeleteOneThrowErrorFrontArgs = {
  where: ThrowErrorFrontWhereUniqueInput;
};


export type MutationDeleteOneTokenFirebaseArgs = {
  where: TokenFirebaseWhereUniqueInput;
};


export type MutationDeleteOneUserArgs = {
  where: UserWhereUniqueInput;
};


export type MutationDeleteOneUserJobFunctionArgs = {
  where: UserJobFunctionWhereUniqueInput;
};


export type MutationDeleteOneUserNotfyArgs = {
  where: UserNotfyWhereUniqueInput;
};


export type MutationDeleteOneUserOrganizationArgs = {
  where: UserOrganizationWhereUniqueInput;
};


export type MutationDeleteOneUserStepArgs = {
  where: UserStepWhereUniqueInput;
};


export type MutationDeleteOneUserTeamArgs = {
  where: UserTeamWhereUniqueInput;
};


export type MutationDeleteOneViewedCommentProjectArgs = {
  where: ViewedCommentProjectWhereUniqueInput;
};


export type MutationForgotPasswordCustomArgs = {
  data: ForgotPassword;
};


export type MutationGeneratedTokenForClientCustomArgs = {
  data: IGeneratedTokenClient;
};


export type MutationLoginArgs = {
  data: LoginInput;
};


export type MutationLoginClientCustomArgs = {
  data: ILoginClient;
};


export type MutationLoginMindforgeArgs = {
  data: LoginInputMindforge;
};


export type MutationRegisterArgs = {
  data: RegisterInputManual;
};


export type MutationRegisterClientCustomArgs = {
  data: IClient;
};


export type MutationSelfHomeArgs = {
  data: InputHome;
};


export type MutationSendStatusMovementCardCustomArgs = {
  data: CardProps;
};


export type MutationThrowNewErrorCustomArgs = {
  data: ILaunchError;
};


export type MutationUpdateKanbanArgs = {
  data: InputColumn;
};


export type MutationUpdateManyAcessHistoryUserArgs = {
  data: AcessHistoryUserUncheckedUpdateManyInput;
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type MutationUpdateManyArchivesArgs = {
  data: ArchivesUncheckedUpdateManyInput;
  where?: InputMaybe<ArchivesWhereInput>;
};


export type MutationUpdateManyBoardArgs = {
  data: BoardUncheckedUpdateManyInput;
  where?: InputMaybe<BoardWhereInput>;
};


export type MutationUpdateManyBoardMenbershipArgs = {
  data: BoardMenbershipUncheckedUpdateManyInput;
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type MutationUpdateManyCardArgs = {
  data: CardUncheckedUpdateManyInput;
  where?: InputMaybe<CardWhereInput>;
};


export type MutationUpdateManyCardAssignmentArgs = {
  data: CardAssignmentUncheckedUpdateManyInput;
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type MutationUpdateManyCardCommentArgs = {
  data: CardCommentUncheckedUpdateManyInput;
  where?: InputMaybe<CardCommentWhereInput>;
};


export type MutationUpdateManyCardMovementArgs = {
  data: CardMovementUncheckedUpdateManyInput;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type MutationUpdateManyCardTagsArgs = {
  data: CardTagsUncheckedUpdateManyInput;
  where?: InputMaybe<CardTagsWhereInput>;
};


export type MutationUpdateManyClientArgs = {
  data: ClientUncheckedUpdateManyInput;
  where?: InputMaybe<ClientWhereInput>;
};


export type MutationUpdateManyColumnArgs = {
  data: ColumnUncheckedUpdateManyInput;
  where?: InputMaybe<ColumnWhereInput>;
};


export type MutationUpdateManyCommentProjectArgs = {
  data: CommentProjectUncheckedUpdateManyInput;
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type MutationUpdateManyCsatArgs = {
  data: CsatUncheckedUpdateManyInput;
  where?: InputMaybe<CsatWhereInput>;
};


export type MutationUpdateManyFieldArgs = {
  data: FieldUncheckedUpdateManyInput;
  where?: InputMaybe<FieldWhereInput>;
};


export type MutationUpdateManyFieldColumnArgs = {
  data: FieldColumnUncheckedUpdateManyInput;
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type MutationUpdateManyFieldsValueArgs = {
  data: FieldsValueUncheckedUpdateManyInput;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type MutationUpdateManyGroupArgs = {
  data: GroupUncheckedUpdateManyInput;
  where?: InputMaybe<GroupWhereInput>;
};


export type MutationUpdateManyGroupMenbershipArgs = {
  data: GroupMenbershipUncheckedUpdateManyInput;
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type MutationUpdateManyGroupUserArgs = {
  data: GroupUserUncheckedUpdateManyInput;
  where?: InputMaybe<GroupUserWhereInput>;
};


export type MutationUpdateManyHistoryFlagArgs = {
  data: HistoryFlagUncheckedUpdateManyInput;
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type MutationUpdateManyHistoryMonthlyRecurringRevenueArgs = {
  data: HistoryMonthlyRecurringRevenueUncheckedUpdateManyInput;
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type MutationUpdateManyHistoryStepArgs = {
  data: HistoryStepUncheckedUpdateManyInput;
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type MutationUpdateManyInvestArgs = {
  data: InvestUncheckedUpdateManyInput;
  where?: InputMaybe<InvestWhereInput>;
};


export type MutationUpdateManyJobFunctionArgs = {
  data: JobFunctionUncheckedUpdateManyInput;
  where?: InputMaybe<JobFunctionWhereInput>;
};


export type MutationUpdateManyKrArgs = {
  data: KrUncheckedUpdateManyInput;
  where?: InputMaybe<KrWhereInput>;
};


export type MutationUpdateManyKrCommentProjectArgs = {
  data: KrCommentProjectUncheckedUpdateManyInput;
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type MutationUpdateManyNotfyArgs = {
  data: NotfyUncheckedUpdateManyInput;
  where?: InputMaybe<NotfyWhereInput>;
};


export type MutationUpdateManyObjectiveArgs = {
  data: ObjectiveUncheckedUpdateManyInput;
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type MutationUpdateManyOkrObjectiveProjectArgs = {
  data: OkrObjectiveProjectUncheckedUpdateManyInput;
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type MutationUpdateManyOkrProjectArgs = {
  data: OkrProjectUncheckedUpdateManyInput;
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type MutationUpdateManyOkrProjectHistoryArgs = {
  data: OkrProjectHistoryUncheckedUpdateManyInput;
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type MutationUpdateManyOrganizationArgs = {
  data: OrganizationUncheckedUpdateManyInput;
  where?: InputMaybe<OrganizationWhereInput>;
};


export type MutationUpdateManyPermissionArgs = {
  data: PermissionUncheckedUpdateManyInput;
  where?: InputMaybe<PermissionWhereInput>;
};


export type MutationUpdateManyPipefyProjectArgs = {
  data: PipefyProjectUncheckedUpdateManyInput;
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type MutationUpdateManyPrimitiveFieldsArgs = {
  data: PrimitiveFieldsUncheckedUpdateManyInput;
  where?: InputMaybe<PrimitiveFieldsWhereInput>;
};


export type MutationUpdateManyPrimitiveStreenghtArgs = {
  data: PrimitiveStreenghtUncheckedUpdateManyInput;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type MutationUpdateManyProjectArgs = {
  data: ProjectUncheckedUpdateManyInput;
  where?: InputMaybe<ProjectWhereInput>;
};


export type MutationUpdateManyProjectManagerArgs = {
  data: ProjectManagerUncheckedUpdateManyInput;
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type MutationUpdateManyProjectsBoardsArgs = {
  data: ProjectsBoardsUncheckedUpdateManyInput;
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type MutationUpdateManyQnpArgs = {
  data: QnpUncheckedUpdateManyInput;
  where?: InputMaybe<QnpWhereInput>;
};


export type MutationUpdateManyReceivedClientArgs = {
  data: ReceivedClientUncheckedUpdateManyInput;
  where?: InputMaybe<ReceivedClientWhereInput>;
};


export type MutationUpdateManySelfStructureArgs = {
  data: SelfStructureUncheckedUpdateManyInput;
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type MutationUpdateManyServiceLevelAgreementArgs = {
  data: ServiceLevelAgreementUncheckedUpdateManyInput;
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type MutationUpdateManyStepArgs = {
  data: StepUncheckedUpdateManyInput;
  where?: InputMaybe<StepWhereInput>;
};


export type MutationUpdateManyTagArgs = {
  data: TagUncheckedUpdateManyInput;
  where?: InputMaybe<TagWhereInput>;
};


export type MutationUpdateManyTaskArgs = {
  data: TaskUncheckedUpdateManyInput;
  where?: InputMaybe<TaskWhereInput>;
};


export type MutationUpdateManyTeamArgs = {
  data: TeamUncheckedUpdateManyInput;
  where?: InputMaybe<TeamWhereInput>;
};


export type MutationUpdateManyThrowErrorFrontArgs = {
  data: ThrowErrorFrontUncheckedUpdateManyInput;
  where?: InputMaybe<ThrowErrorFrontWhereInput>;
};


export type MutationUpdateManyTokenFirebaseArgs = {
  data: TokenFirebaseUncheckedUpdateManyInput;
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type MutationUpdateManyUserArgs = {
  data: UserUncheckedUpdateManyInput;
  where?: InputMaybe<UserWhereInput>;
};


export type MutationUpdateManyUserJobFunctionArgs = {
  data: UserJobFunctionUncheckedUpdateManyInput;
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type MutationUpdateManyUserNotfyArgs = {
  data: UserNotfyUncheckedUpdateManyInput;
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type MutationUpdateManyUserOrganizationArgs = {
  data: UserOrganizationUncheckedUpdateManyInput;
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type MutationUpdateManyUserStepArgs = {
  data: UserStepUncheckedUpdateManyInput;
  where?: InputMaybe<UserStepWhereInput>;
};


export type MutationUpdateManyUserTeamArgs = {
  data: UserTeamUncheckedUpdateManyInput;
  where?: InputMaybe<UserTeamWhereInput>;
};


export type MutationUpdateManyViewedCommentProjectArgs = {
  data: ViewedCommentProjectUncheckedUpdateManyInput;
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};


export type MutationUpdateOneAcessHistoryUserArgs = {
  data: AcessHistoryUserUncheckedUpdateInput;
  where: AcessHistoryUserWhereUniqueInput;
};


export type MutationUpdateOneArchivesArgs = {
  data: ArchivesUncheckedUpdateInput;
  where: ArchivesWhereUniqueInput;
};


export type MutationUpdateOneBoardArgs = {
  data: BoardUncheckedUpdateInput;
  where: BoardWhereUniqueInput;
};


export type MutationUpdateOneBoardMenbershipArgs = {
  data: BoardMenbershipUncheckedUpdateInput;
  where: BoardMenbershipWhereUniqueInput;
};


export type MutationUpdateOneCardArgs = {
  data: CardUncheckedUpdateInput;
  where: CardWhereUniqueInput;
};


export type MutationUpdateOneCardAssignmentArgs = {
  data: CardAssignmentUncheckedUpdateInput;
  where: CardAssignmentWhereUniqueInput;
};


export type MutationUpdateOneCardCommentArgs = {
  data: CardCommentUncheckedUpdateInput;
  where: CardCommentWhereUniqueInput;
};


export type MutationUpdateOneCardMovementArgs = {
  data: CardMovementUncheckedUpdateInput;
  where: CardMovementWhereUniqueInput;
};


export type MutationUpdateOneCardTagsArgs = {
  data: CardTagsUncheckedUpdateInput;
  where: CardTagsWhereUniqueInput;
};


export type MutationUpdateOneClientArgs = {
  data: ClientUncheckedUpdateInput;
  where: ClientWhereUniqueInput;
};


export type MutationUpdateOneColumnArgs = {
  data: ColumnUncheckedUpdateInput;
  where: ColumnWhereUniqueInput;
};


export type MutationUpdateOneCommentProjectArgs = {
  data: CommentProjectUncheckedUpdateInput;
  where: CommentProjectWhereUniqueInput;
};


export type MutationUpdateOneCsatArgs = {
  data: CsatUncheckedUpdateInput;
  where: CsatWhereUniqueInput;
};


export type MutationUpdateOneFieldArgs = {
  data: FieldUncheckedUpdateInput;
  where: FieldWhereUniqueInput;
};


export type MutationUpdateOneFieldColumnArgs = {
  data: FieldColumnUncheckedUpdateInput;
  where: FieldColumnWhereUniqueInput;
};


export type MutationUpdateOneFieldsValueArgs = {
  data: FieldsValueUncheckedUpdateInput;
  where: FieldsValueWhereUniqueInput;
};


export type MutationUpdateOneGroupArgs = {
  data: GroupUncheckedUpdateInput;
  where: GroupWhereUniqueInput;
};


export type MutationUpdateOneGroupMenbershipArgs = {
  data: GroupMenbershipUncheckedUpdateInput;
  where: GroupMenbershipWhereUniqueInput;
};


export type MutationUpdateOneGroupUserArgs = {
  data: GroupUserUncheckedUpdateInput;
  where: GroupUserWhereUniqueInput;
};


export type MutationUpdateOneHistoryFlagArgs = {
  data: HistoryFlagUncheckedUpdateInput;
  where: HistoryFlagWhereUniqueInput;
};


export type MutationUpdateOneHistoryMonthlyRecurringRevenueArgs = {
  data: HistoryMonthlyRecurringRevenueUncheckedUpdateInput;
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};


export type MutationUpdateOneHistoryStepArgs = {
  data: HistoryStepUncheckedUpdateInput;
  where: HistoryStepWhereUniqueInput;
};


export type MutationUpdateOneInvestArgs = {
  data: InvestUncheckedUpdateInput;
  where: InvestWhereUniqueInput;
};


export type MutationUpdateOneJobFunctionArgs = {
  data: JobFunctionUncheckedUpdateInput;
  where: JobFunctionWhereUniqueInput;
};


export type MutationUpdateOneKrArgs = {
  data: KrUncheckedUpdateInput;
  where: KrWhereUniqueInput;
};


export type MutationUpdateOneKrCommentProjectArgs = {
  data: KrCommentProjectUncheckedUpdateInput;
  where: KrCommentProjectWhereUniqueInput;
};


export type MutationUpdateOneNotfyArgs = {
  data: NotfyUncheckedUpdateInput;
  where: NotfyWhereUniqueInput;
};


export type MutationUpdateOneObjectiveArgs = {
  data: ObjectiveUncheckedUpdateInput;
  where: ObjectiveWhereUniqueInput;
};


export type MutationUpdateOneOkrObjectiveProjectArgs = {
  data: OkrObjectiveProjectUncheckedUpdateInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};


export type MutationUpdateOneOkrProjectArgs = {
  data: OkrProjectUncheckedUpdateInput;
  where: OkrProjectWhereUniqueInput;
};


export type MutationUpdateOneOkrProjectHistoryArgs = {
  data: OkrProjectHistoryUncheckedUpdateInput;
  where: OkrProjectHistoryWhereUniqueInput;
};


export type MutationUpdateOneOrganizationArgs = {
  data: OrganizationUncheckedUpdateInput;
  where: OrganizationWhereUniqueInput;
};


export type MutationUpdateOnePermissionArgs = {
  data: PermissionUncheckedUpdateInput;
  where: PermissionWhereUniqueInput;
};


export type MutationUpdateOnePipefyProjectArgs = {
  data: PipefyProjectUncheckedUpdateInput;
  where: PipefyProjectWhereUniqueInput;
};


export type MutationUpdateOnePrimitiveFieldsArgs = {
  data: PrimitiveFieldsUncheckedUpdateInput;
  where: PrimitiveFieldsWhereUniqueInput;
};


export type MutationUpdateOnePrimitiveStreenghtArgs = {
  data: PrimitiveStreenghtUncheckedUpdateInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};


export type MutationUpdateOneProjectArgs = {
  data: ProjectUncheckedUpdateInput;
  where: ProjectWhereUniqueInput;
};


export type MutationUpdateOneProjectManagerArgs = {
  data: ProjectManagerUncheckedUpdateInput;
  where: ProjectManagerWhereUniqueInput;
};


export type MutationUpdateOneProjectsBoardsArgs = {
  data: ProjectsBoardsUncheckedUpdateInput;
  where: ProjectsBoardsWhereUniqueInput;
};


export type MutationUpdateOneQnpArgs = {
  data: QnpUncheckedUpdateInput;
  where: QnpWhereUniqueInput;
};


export type MutationUpdateOneReceivedClientArgs = {
  data: ReceivedClientUncheckedUpdateInput;
  where: ReceivedClientWhereUniqueInput;
};


export type MutationUpdateOneSelfStructureArgs = {
  data: SelfStructureUncheckedUpdateInput;
  where: SelfStructureWhereUniqueInput;
};


export type MutationUpdateOneServiceLevelAgreementArgs = {
  data: ServiceLevelAgreementUncheckedUpdateInput;
  where: ServiceLevelAgreementWhereUniqueInput;
};


export type MutationUpdateOneStepArgs = {
  data: StepUncheckedUpdateInput;
  where: StepWhereUniqueInput;
};


export type MutationUpdateOneTagArgs = {
  data: TagUncheckedUpdateInput;
  where: TagWhereUniqueInput;
};


export type MutationUpdateOneTaskArgs = {
  data: TaskUncheckedUpdateInput;
  where: TaskWhereUniqueInput;
};


export type MutationUpdateOneTeamArgs = {
  data: TeamUncheckedUpdateInput;
  where: TeamWhereUniqueInput;
};


export type MutationUpdateOneThrowErrorFrontArgs = {
  data: ThrowErrorFrontUncheckedUpdateInput;
  where: ThrowErrorFrontWhereUniqueInput;
};


export type MutationUpdateOneTokenFirebaseArgs = {
  data: TokenFirebaseUncheckedUpdateInput;
  where: TokenFirebaseWhereUniqueInput;
};


export type MutationUpdateOneUserArgs = {
  data: UserUncheckedUpdateInput;
  where: UserWhereUniqueInput;
};


export type MutationUpdateOneUserJobFunctionArgs = {
  data: UserJobFunctionUncheckedUpdateInput;
  where: UserJobFunctionWhereUniqueInput;
};


export type MutationUpdateOneUserNotfyArgs = {
  data: UserNotfyUncheckedUpdateInput;
  where: UserNotfyWhereUniqueInput;
};


export type MutationUpdateOneUserOrganizationArgs = {
  data: UserOrganizationUncheckedUpdateInput;
  where: UserOrganizationWhereUniqueInput;
};


export type MutationUpdateOneUserStepArgs = {
  data: UserStepUncheckedUpdateInput;
  where: UserStepWhereUniqueInput;
};


export type MutationUpdateOneUserTeamArgs = {
  data: UserTeamUncheckedUpdateInput;
  where: UserTeamWhereUniqueInput;
};


export type MutationUpdateOneViewedCommentProjectArgs = {
  data: ViewedCommentProjectUncheckedUpdateInput;
  where: ViewedCommentProjectWhereUniqueInput;
};


export type MutationUpdateUserCustomArgs = {
  data: UserUpdateInput;
  uuid: Scalars['String']['input'];
};


export type MutationUpdateUserPasswordCustomArgs = {
  data: ChangeUser;
};


export type MutationUpsertOneAcessHistoryUserArgs = {
  create: AcessHistoryUserUncheckedCreateInput;
  update: AcessHistoryUserUncheckedUpdateInput;
  where: AcessHistoryUserWhereUniqueInput;
};


export type MutationUpsertOneArchivesArgs = {
  create: ArchivesUncheckedCreateInput;
  update: ArchivesUncheckedUpdateInput;
  where: ArchivesWhereUniqueInput;
};


export type MutationUpsertOneBoardArgs = {
  create: BoardUncheckedCreateInput;
  update: BoardUncheckedUpdateInput;
  where: BoardWhereUniqueInput;
};


export type MutationUpsertOneBoardMenbershipArgs = {
  create: BoardMenbershipUncheckedCreateInput;
  update: BoardMenbershipUncheckedUpdateInput;
  where: BoardMenbershipWhereUniqueInput;
};


export type MutationUpsertOneCardArgs = {
  create: CardUncheckedCreateInput;
  update: CardUncheckedUpdateInput;
  where: CardWhereUniqueInput;
};


export type MutationUpsertOneCardAssignmentArgs = {
  create: CardAssignmentUncheckedCreateInput;
  update: CardAssignmentUncheckedUpdateInput;
  where: CardAssignmentWhereUniqueInput;
};


export type MutationUpsertOneCardCommentArgs = {
  create: CardCommentUncheckedCreateInput;
  update: CardCommentUncheckedUpdateInput;
  where: CardCommentWhereUniqueInput;
};


export type MutationUpsertOneCardMovementArgs = {
  create: CardMovementUncheckedCreateInput;
  update: CardMovementUncheckedUpdateInput;
  where: CardMovementWhereUniqueInput;
};


export type MutationUpsertOneCardTagsArgs = {
  create: CardTagsUncheckedCreateInput;
  update: CardTagsUncheckedUpdateInput;
  where: CardTagsWhereUniqueInput;
};


export type MutationUpsertOneClientArgs = {
  create: ClientUncheckedCreateInput;
  update: ClientUncheckedUpdateInput;
  where: ClientWhereUniqueInput;
};


export type MutationUpsertOneColumnArgs = {
  create: ColumnUncheckedCreateInput;
  update: ColumnUncheckedUpdateInput;
  where: ColumnWhereUniqueInput;
};


export type MutationUpsertOneCommentProjectArgs = {
  create: CommentProjectUncheckedCreateInput;
  update: CommentProjectUncheckedUpdateInput;
  where: CommentProjectWhereUniqueInput;
};


export type MutationUpsertOneCsatArgs = {
  create: CsatUncheckedCreateInput;
  update: CsatUncheckedUpdateInput;
  where: CsatWhereUniqueInput;
};


export type MutationUpsertOneFieldArgs = {
  create: FieldUncheckedCreateInput;
  update: FieldUncheckedUpdateInput;
  where: FieldWhereUniqueInput;
};


export type MutationUpsertOneFieldColumnArgs = {
  create: FieldColumnUncheckedCreateInput;
  update: FieldColumnUncheckedUpdateInput;
  where: FieldColumnWhereUniqueInput;
};


export type MutationUpsertOneFieldsValueArgs = {
  create: FieldsValueUncheckedCreateInput;
  update: FieldsValueUncheckedUpdateInput;
  where: FieldsValueWhereUniqueInput;
};


export type MutationUpsertOneGroupArgs = {
  create: GroupUncheckedCreateInput;
  update: GroupUncheckedUpdateInput;
  where: GroupWhereUniqueInput;
};


export type MutationUpsertOneGroupMenbershipArgs = {
  create: GroupMenbershipUncheckedCreateInput;
  update: GroupMenbershipUncheckedUpdateInput;
  where: GroupMenbershipWhereUniqueInput;
};


export type MutationUpsertOneGroupUserArgs = {
  create: GroupUserUncheckedCreateInput;
  update: GroupUserUncheckedUpdateInput;
  where: GroupUserWhereUniqueInput;
};


export type MutationUpsertOneHistoryFlagArgs = {
  create: HistoryFlagUncheckedCreateInput;
  update: HistoryFlagUncheckedUpdateInput;
  where: HistoryFlagWhereUniqueInput;
};


export type MutationUpsertOneHistoryMonthlyRecurringRevenueArgs = {
  create: HistoryMonthlyRecurringRevenueUncheckedCreateInput;
  update: HistoryMonthlyRecurringRevenueUncheckedUpdateInput;
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};


export type MutationUpsertOneHistoryStepArgs = {
  create: HistoryStepUncheckedCreateInput;
  update: HistoryStepUncheckedUpdateInput;
  where: HistoryStepWhereUniqueInput;
};


export type MutationUpsertOneInvestArgs = {
  create: InvestUncheckedCreateInput;
  update: InvestUncheckedUpdateInput;
  where: InvestWhereUniqueInput;
};


export type MutationUpsertOneJobFunctionArgs = {
  create: JobFunctionUncheckedCreateInput;
  update: JobFunctionUncheckedUpdateInput;
  where: JobFunctionWhereUniqueInput;
};


export type MutationUpsertOneKrArgs = {
  create: KrUncheckedCreateInput;
  update: KrUncheckedUpdateInput;
  where: KrWhereUniqueInput;
};


export type MutationUpsertOneKrCommentProjectArgs = {
  create: KrCommentProjectUncheckedCreateInput;
  update: KrCommentProjectUncheckedUpdateInput;
  where: KrCommentProjectWhereUniqueInput;
};


export type MutationUpsertOneNotfyArgs = {
  create: NotfyUncheckedCreateInput;
  update: NotfyUncheckedUpdateInput;
  where: NotfyWhereUniqueInput;
};


export type MutationUpsertOneObjectiveArgs = {
  create: ObjectiveUncheckedCreateInput;
  update: ObjectiveUncheckedUpdateInput;
  where: ObjectiveWhereUniqueInput;
};


export type MutationUpsertOneOkrObjectiveProjectArgs = {
  create: OkrObjectiveProjectUncheckedCreateInput;
  update: OkrObjectiveProjectUncheckedUpdateInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};


export type MutationUpsertOneOkrProjectArgs = {
  create: OkrProjectUncheckedCreateInput;
  update: OkrProjectUncheckedUpdateInput;
  where: OkrProjectWhereUniqueInput;
};


export type MutationUpsertOneOkrProjectHistoryArgs = {
  create: OkrProjectHistoryUncheckedCreateInput;
  update: OkrProjectHistoryUncheckedUpdateInput;
  where: OkrProjectHistoryWhereUniqueInput;
};


export type MutationUpsertOneOrganizationArgs = {
  create: OrganizationUncheckedCreateInput;
  update: OrganizationUncheckedUpdateInput;
  where: OrganizationWhereUniqueInput;
};


export type MutationUpsertOnePermissionArgs = {
  create: PermissionUncheckedCreateInput;
  update: PermissionUncheckedUpdateInput;
  where: PermissionWhereUniqueInput;
};


export type MutationUpsertOnePipefyProjectArgs = {
  create: PipefyProjectUncheckedCreateInput;
  update: PipefyProjectUncheckedUpdateInput;
  where: PipefyProjectWhereUniqueInput;
};


export type MutationUpsertOnePrimitiveFieldsArgs = {
  create: PrimitiveFieldsUncheckedCreateInput;
  update: PrimitiveFieldsUncheckedUpdateInput;
  where: PrimitiveFieldsWhereUniqueInput;
};


export type MutationUpsertOnePrimitiveStreenghtArgs = {
  create: PrimitiveStreenghtUncheckedCreateInput;
  update: PrimitiveStreenghtUncheckedUpdateInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};


export type MutationUpsertOneProjectArgs = {
  create: ProjectUncheckedCreateInput;
  update: ProjectUncheckedUpdateInput;
  where: ProjectWhereUniqueInput;
};


export type MutationUpsertOneProjectManagerArgs = {
  create: ProjectManagerUncheckedCreateInput;
  update: ProjectManagerUncheckedUpdateInput;
  where: ProjectManagerWhereUniqueInput;
};


export type MutationUpsertOneProjectsBoardsArgs = {
  create: ProjectsBoardsUncheckedCreateInput;
  update: ProjectsBoardsUncheckedUpdateInput;
  where: ProjectsBoardsWhereUniqueInput;
};


export type MutationUpsertOneQnpArgs = {
  create: QnpUncheckedCreateInput;
  update: QnpUncheckedUpdateInput;
  where: QnpWhereUniqueInput;
};


export type MutationUpsertOneReceivedClientArgs = {
  create: ReceivedClientUncheckedCreateInput;
  update: ReceivedClientUncheckedUpdateInput;
  where: ReceivedClientWhereUniqueInput;
};


export type MutationUpsertOneSelfStructureArgs = {
  create: SelfStructureUncheckedCreateInput;
  update: SelfStructureUncheckedUpdateInput;
  where: SelfStructureWhereUniqueInput;
};


export type MutationUpsertOneServiceLevelAgreementArgs = {
  create: ServiceLevelAgreementUncheckedCreateInput;
  update: ServiceLevelAgreementUncheckedUpdateInput;
  where: ServiceLevelAgreementWhereUniqueInput;
};


export type MutationUpsertOneStepArgs = {
  create: StepUncheckedCreateInput;
  update: StepUncheckedUpdateInput;
  where: StepWhereUniqueInput;
};


export type MutationUpsertOneTagArgs = {
  create: TagUncheckedCreateInput;
  update: TagUncheckedUpdateInput;
  where: TagWhereUniqueInput;
};


export type MutationUpsertOneTaskArgs = {
  create: TaskUncheckedCreateInput;
  update: TaskUncheckedUpdateInput;
  where: TaskWhereUniqueInput;
};


export type MutationUpsertOneTeamArgs = {
  create: TeamUncheckedCreateInput;
  update: TeamUncheckedUpdateInput;
  where: TeamWhereUniqueInput;
};


export type MutationUpsertOneThrowErrorFrontArgs = {
  create: ThrowErrorFrontUncheckedCreateInput;
  update: ThrowErrorFrontUncheckedUpdateInput;
  where: ThrowErrorFrontWhereUniqueInput;
};


export type MutationUpsertOneTokenFirebaseArgs = {
  create: TokenFirebaseUncheckedCreateInput;
  update: TokenFirebaseUncheckedUpdateInput;
  where: TokenFirebaseWhereUniqueInput;
};


export type MutationUpsertOneUserArgs = {
  create: UserUncheckedCreateInput;
  update: UserUncheckedUpdateInput;
  where: UserWhereUniqueInput;
};


export type MutationUpsertOneUserJobFunctionArgs = {
  create: UserJobFunctionUncheckedCreateInput;
  update: UserJobFunctionUncheckedUpdateInput;
  where: UserJobFunctionWhereUniqueInput;
};


export type MutationUpsertOneUserNotfyArgs = {
  create: UserNotfyUncheckedCreateInput;
  update: UserNotfyUncheckedUpdateInput;
  where: UserNotfyWhereUniqueInput;
};


export type MutationUpsertOneUserOrganizationArgs = {
  create: UserOrganizationUncheckedCreateInput;
  update: UserOrganizationUncheckedUpdateInput;
  where: UserOrganizationWhereUniqueInput;
};


export type MutationUpsertOneUserStepArgs = {
  create: UserStepUncheckedCreateInput;
  update: UserStepUncheckedUpdateInput;
  where: UserStepWhereUniqueInput;
};


export type MutationUpsertOneUserTeamArgs = {
  create: UserTeamUncheckedCreateInput;
  update: UserTeamUncheckedUpdateInput;
  where: UserTeamWhereUniqueInput;
};


export type MutationUpsertOneViewedCommentProjectArgs = {
  create: ViewedCommentProjectUncheckedCreateInput;
  update: ViewedCommentProjectUncheckedUpdateInput;
  where: ViewedCommentProjectWhereUniqueInput;
};

export type NestedBoolFilter = {
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolFilter>;
};

export type NestedBoolWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedBoolFilter>;
  _min?: InputMaybe<NestedBoolFilter>;
  equals?: InputMaybe<Scalars['Boolean']['input']>;
  not?: InputMaybe<NestedBoolWithAggregatesFilter>;
};

export type NestedDateTimeFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type NestedDateTimeNullableFilter = {
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type NestedDateTimeNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedDateTimeNullableFilter>;
  _min?: InputMaybe<NestedDateTimeNullableFilter>;
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type NestedDateTimeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedDateTimeFilter>;
  _min?: InputMaybe<NestedDateTimeFilter>;
  equals?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  gte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  in?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
  lt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  lte?: InputMaybe<Scalars['DateTimeISO']['input']>;
  not?: InputMaybe<NestedDateTimeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['DateTimeISO']['input']>>;
};

export type NestedEnumFieldFlagsFilter = {
  equals?: InputMaybe<FieldFlags>;
  in?: InputMaybe<Array<FieldFlags>>;
  not?: InputMaybe<NestedEnumFieldFlagsFilter>;
  notIn?: InputMaybe<Array<FieldFlags>>;
};

export type NestedEnumFieldFlagsWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumFieldFlagsFilter>;
  _min?: InputMaybe<NestedEnumFieldFlagsFilter>;
  equals?: InputMaybe<FieldFlags>;
  in?: InputMaybe<Array<FieldFlags>>;
  not?: InputMaybe<NestedEnumFieldFlagsWithAggregatesFilter>;
  notIn?: InputMaybe<Array<FieldFlags>>;
};

export type NestedEnumFieldStepsFilter = {
  equals?: InputMaybe<FieldSteps>;
  in?: InputMaybe<Array<FieldSteps>>;
  not?: InputMaybe<NestedEnumFieldStepsFilter>;
  notIn?: InputMaybe<Array<FieldSteps>>;
};

export type NestedEnumFieldStepsWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumFieldStepsFilter>;
  _min?: InputMaybe<NestedEnumFieldStepsFilter>;
  equals?: InputMaybe<FieldSteps>;
  in?: InputMaybe<Array<FieldSteps>>;
  not?: InputMaybe<NestedEnumFieldStepsWithAggregatesFilter>;
  notIn?: InputMaybe<Array<FieldSteps>>;
};

export type NestedEnumFieldTypeFilter = {
  equals?: InputMaybe<FieldType>;
  in?: InputMaybe<Array<FieldType>>;
  not?: InputMaybe<NestedEnumFieldTypeFilter>;
  notIn?: InputMaybe<Array<FieldType>>;
};

export type NestedEnumFieldTypeWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumFieldTypeFilter>;
  _min?: InputMaybe<NestedEnumFieldTypeFilter>;
  equals?: InputMaybe<FieldType>;
  in?: InputMaybe<Array<FieldType>>;
  not?: InputMaybe<NestedEnumFieldTypeWithAggregatesFilter>;
  notIn?: InputMaybe<Array<FieldType>>;
};

export type NestedEnumTypeServiceFilter = {
  equals?: InputMaybe<TypeService>;
  in?: InputMaybe<Array<TypeService>>;
  not?: InputMaybe<NestedEnumTypeServiceFilter>;
  notIn?: InputMaybe<Array<TypeService>>;
};

export type NestedEnumTypeServiceWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumTypeServiceFilter>;
  _min?: InputMaybe<NestedEnumTypeServiceFilter>;
  equals?: InputMaybe<TypeService>;
  in?: InputMaybe<Array<TypeService>>;
  not?: InputMaybe<NestedEnumTypeServiceWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeService>>;
};

export type NestedEnuminvestStatusFilter = {
  equals?: InputMaybe<InvestStatus>;
  in?: InputMaybe<Array<InvestStatus>>;
  not?: InputMaybe<NestedEnuminvestStatusFilter>;
  notIn?: InputMaybe<Array<InvestStatus>>;
};

export type NestedEnuminvestStatusWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnuminvestStatusFilter>;
  _min?: InputMaybe<NestedEnuminvestStatusFilter>;
  equals?: InputMaybe<InvestStatus>;
  in?: InputMaybe<Array<InvestStatus>>;
  not?: InputMaybe<NestedEnuminvestStatusWithAggregatesFilter>;
  notIn?: InputMaybe<Array<InvestStatus>>;
};

export type NestedEnumroleFilter = {
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumroleFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type NestedEnumroleWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumroleFilter>;
  _min?: InputMaybe<NestedEnumroleFilter>;
  equals?: InputMaybe<Role>;
  in?: InputMaybe<Array<Role>>;
  not?: InputMaybe<NestedEnumroleWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Role>>;
};

export type NestedEnumtypeFileFilter = {
  equals?: InputMaybe<TypeFile>;
  in?: InputMaybe<Array<TypeFile>>;
  not?: InputMaybe<NestedEnumtypeFileFilter>;
  notIn?: InputMaybe<Array<TypeFile>>;
};

export type NestedEnumtypeFileWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumtypeFileFilter>;
  _min?: InputMaybe<NestedEnumtypeFileFilter>;
  equals?: InputMaybe<TypeFile>;
  in?: InputMaybe<Array<TypeFile>>;
  not?: InputMaybe<NestedEnumtypeFileWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeFile>>;
};

export type NestedEnumtypeFlagsCommentProjectFilter = {
  equals?: InputMaybe<TypeFlagsCommentProject>;
  in?: InputMaybe<Array<TypeFlagsCommentProject>>;
  not?: InputMaybe<NestedEnumtypeFlagsCommentProjectFilter>;
  notIn?: InputMaybe<Array<TypeFlagsCommentProject>>;
};

export type NestedEnumtypeFlagsCommentProjectWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumtypeFlagsCommentProjectFilter>;
  _min?: InputMaybe<NestedEnumtypeFlagsCommentProjectFilter>;
  equals?: InputMaybe<TypeFlagsCommentProject>;
  in?: InputMaybe<Array<TypeFlagsCommentProject>>;
  not?: InputMaybe<NestedEnumtypeFlagsCommentProjectWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeFlagsCommentProject>>;
};

export type NestedEnumtypeNotfyFilter = {
  equals?: InputMaybe<TypeNotfy>;
  in?: InputMaybe<Array<TypeNotfy>>;
  not?: InputMaybe<NestedEnumtypeNotfyFilter>;
  notIn?: InputMaybe<Array<TypeNotfy>>;
};

export type NestedEnumtypeNotfyWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumtypeNotfyFilter>;
  _min?: InputMaybe<NestedEnumtypeNotfyFilter>;
  equals?: InputMaybe<TypeNotfy>;
  in?: InputMaybe<Array<TypeNotfy>>;
  not?: InputMaybe<NestedEnumtypeNotfyWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeNotfy>>;
};

export type NestedEnumtypeUserFilter = {
  equals?: InputMaybe<TypeUser>;
  in?: InputMaybe<Array<TypeUser>>;
  not?: InputMaybe<NestedEnumtypeUserFilter>;
  notIn?: InputMaybe<Array<TypeUser>>;
};

export type NestedEnumtypeUserWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedEnumtypeUserFilter>;
  _min?: InputMaybe<NestedEnumtypeUserFilter>;
  equals?: InputMaybe<TypeUser>;
  in?: InputMaybe<Array<TypeUser>>;
  not?: InputMaybe<NestedEnumtypeUserWithAggregatesFilter>;
  notIn?: InputMaybe<Array<TypeUser>>;
};

export type NestedFloatFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type NestedFloatNullableFilter = {
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type NestedFloatWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatFilter>;
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedFloatFilter>;
  _min?: InputMaybe<NestedFloatFilter>;
  _sum?: InputMaybe<NestedFloatFilter>;
  equals?: InputMaybe<Scalars['Float']['input']>;
  gt?: InputMaybe<Scalars['Float']['input']>;
  gte?: InputMaybe<Scalars['Float']['input']>;
  in?: InputMaybe<Array<Scalars['Float']['input']>>;
  lt?: InputMaybe<Scalars['Float']['input']>;
  lte?: InputMaybe<Scalars['Float']['input']>;
  not?: InputMaybe<NestedFloatWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Float']['input']>>;
};

export type NestedIntFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type NestedIntNullableFilter = {
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type NestedIntNullableWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatNullableFilter>;
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedIntNullableFilter>;
  _min?: InputMaybe<NestedIntNullableFilter>;
  _sum?: InputMaybe<NestedIntNullableFilter>;
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type NestedIntWithAggregatesFilter = {
  _avg?: InputMaybe<NestedFloatFilter>;
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedIntFilter>;
  _min?: InputMaybe<NestedIntFilter>;
  _sum?: InputMaybe<NestedIntFilter>;
  equals?: InputMaybe<Scalars['Int']['input']>;
  gt?: InputMaybe<Scalars['Int']['input']>;
  gte?: InputMaybe<Scalars['Int']['input']>;
  in?: InputMaybe<Array<Scalars['Int']['input']>>;
  lt?: InputMaybe<Scalars['Int']['input']>;
  lte?: InputMaybe<Scalars['Int']['input']>;
  not?: InputMaybe<NestedIntWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['Int']['input']>>;
};

export type NestedJsonFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type NestedJsonNullableFilter = {
  array_contains?: InputMaybe<Scalars['JSON']['input']>;
  array_ends_with?: InputMaybe<Scalars['JSON']['input']>;
  array_starts_with?: InputMaybe<Scalars['JSON']['input']>;
  equals?: InputMaybe<Scalars['JSON']['input']>;
  gt?: InputMaybe<Scalars['JSON']['input']>;
  gte?: InputMaybe<Scalars['JSON']['input']>;
  lt?: InputMaybe<Scalars['JSON']['input']>;
  lte?: InputMaybe<Scalars['JSON']['input']>;
  not?: InputMaybe<Scalars['JSON']['input']>;
  path?: InputMaybe<Array<Scalars['String']['input']>>;
  string_contains?: InputMaybe<Scalars['String']['input']>;
  string_ends_with?: InputMaybe<Scalars['String']['input']>;
  string_starts_with?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedStringNullableFilter>;
  _min?: InputMaybe<NestedStringNullableFilter>;
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedStringWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedStringFilter>;
  _min?: InputMaybe<NestedStringFilter>;
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedStringWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type NestedUuidFilter = {
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedUuidFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type NestedUuidNullableFilter = {
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedUuidNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type NestedUuidNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedStringNullableFilter>;
  _min?: InputMaybe<NestedStringNullableFilter>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedUuidNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type NestedUuidWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedStringFilter>;
  _min?: InputMaybe<NestedStringFilter>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  not?: InputMaybe<NestedUuidWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type Notfy = {
  __typename?: 'Notfy';
  _count?: Maybe<NotfyCount>;
  appointment?: Maybe<Scalars['DateTimeISO']['output']>;
  content: Scalars['String']['output'];
  cratedBy?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdByUser?: Maybe<User>;
  id: Scalars['Int']['output'];
  type: TypeNotfy;
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
  updatedByUser?: Maybe<User>;
  user: Array<UserNotfy>;
};


export type NotfyCreatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type NotfyUpdatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type NotfyUserArgs = {
  cursor?: InputMaybe<UserNotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserNotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserNotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserNotfyWhereInput>;
};

export type NotfyAvgAggregate = {
  __typename?: 'NotfyAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type NotfyAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type NotfyCount = {
  __typename?: 'NotfyCount';
  user: Scalars['Int']['output'];
};


export type NotfyCountUserArgs = {
  where?: InputMaybe<UserNotfyWhereInput>;
};

export type NotfyCountAggregate = {
  __typename?: 'NotfyCountAggregate';
  _all: Scalars['Int']['output'];
  appointment: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  cratedBy: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  type: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type NotfyCountOrderByAggregateInput = {
  appointment?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  cratedBy?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type NotfyCreateManyCreatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type NotfyCreateManyCreatedByUserInputEnvelope = {
  data: Array<NotfyCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NotfyCreateManyInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  cratedBy?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type NotfyCreateManyUpdatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  cratedBy?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type NotfyCreateManyUpdatedByUserInputEnvelope = {
  data: Array<NotfyCreateManyUpdatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type NotfyCreateNestedOneWithoutUserInput = {
  connect?: InputMaybe<NotfyWhereUniqueInput>;
  connectOrCreate?: InputMaybe<NotfyCreateOrConnectWithoutUserInput>;
  create?: InputMaybe<NotfyUncheckedCreateWithoutUserInput>;
};

export type NotfyCreateOrConnectWithoutCreatedByUserInput = {
  create: NotfyUncheckedCreateWithoutCreatedByUserInput;
  where: NotfyWhereUniqueInput;
};

export type NotfyCreateOrConnectWithoutUpdatedByUserInput = {
  create: NotfyUncheckedCreateWithoutUpdatedByUserInput;
  where: NotfyWhereUniqueInput;
};

export type NotfyCreateOrConnectWithoutUserInput = {
  create: NotfyUncheckedCreateWithoutUserInput;
  where: NotfyWhereUniqueInput;
};

export type NotfyCreateWithoutCreatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutNotfyUpdateddByInput>;
  user?: InputMaybe<UserNotfyCreateNestedManyWithoutNotfyInput>;
};

export type NotfyCreateWithoutUpdatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutNotfyCreatedByInput>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user?: InputMaybe<UserNotfyCreateNestedManyWithoutNotfyInput>;
};

export type NotfyGroupBy = {
  __typename?: 'NotfyGroupBy';
  _avg?: Maybe<NotfyAvgAggregate>;
  _count?: Maybe<NotfyCountAggregate>;
  _max?: Maybe<NotfyMaxAggregate>;
  _min?: Maybe<NotfyMinAggregate>;
  _sum?: Maybe<NotfySumAggregate>;
  appointment?: Maybe<Scalars['DateTimeISO']['output']>;
  content: Scalars['String']['output'];
  cratedBy?: Maybe<Scalars['String']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  type: TypeNotfy;
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type NotfyListRelationFilter = {
  every?: InputMaybe<NotfyWhereInput>;
  none?: InputMaybe<NotfyWhereInput>;
  some?: InputMaybe<NotfyWhereInput>;
};

export type NotfyMaxAggregate = {
  __typename?: 'NotfyMaxAggregate';
  appointment?: Maybe<Scalars['DateTimeISO']['output']>;
  content?: Maybe<Scalars['String']['output']>;
  cratedBy?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<TypeNotfy>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type NotfyMaxOrderByAggregateInput = {
  appointment?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  cratedBy?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type NotfyMinAggregate = {
  __typename?: 'NotfyMinAggregate';
  appointment?: Maybe<Scalars['DateTimeISO']['output']>;
  content?: Maybe<Scalars['String']['output']>;
  cratedBy?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  type?: Maybe<TypeNotfy>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type NotfyMinOrderByAggregateInput = {
  appointment?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  cratedBy?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type NotfyOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type NotfyOrderByWithAggregationInput = {
  _avg?: InputMaybe<NotfyAvgOrderByAggregateInput>;
  _count?: InputMaybe<NotfyCountOrderByAggregateInput>;
  _max?: InputMaybe<NotfyMaxOrderByAggregateInput>;
  _min?: InputMaybe<NotfyMinOrderByAggregateInput>;
  _sum?: InputMaybe<NotfySumOrderByAggregateInput>;
  appointment?: InputMaybe<SortOrderInput>;
  content?: InputMaybe<SortOrder>;
  cratedBy?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
};

export type NotfyOrderByWithRelationInput = {
  appointment?: InputMaybe<SortOrderInput>;
  content?: InputMaybe<SortOrder>;
  cratedBy?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  type?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
  updatedByUser?: InputMaybe<UserOrderByWithRelationInput>;
  user?: InputMaybe<UserNotfyOrderByRelationAggregateInput>;
};

export type NotfyRelationFilter = {
  is?: InputMaybe<NotfyWhereInput>;
  isNot?: InputMaybe<NotfyWhereInput>;
};

export enum NotfyScalarFieldEnum {
  Appointment = 'appointment',
  Content = 'content',
  CratedBy = 'cratedBy',
  CreatedAt = 'createdAt',
  Id = 'id',
  Type = 'type',
  UpdatedAt = 'updatedAt',
  UpdatedBy = 'updatedBy'
}

export type NotfyScalarWhereInput = {
  AND?: InputMaybe<Array<NotfyScalarWhereInput>>;
  NOT?: InputMaybe<Array<NotfyScalarWhereInput>>;
  OR?: InputMaybe<Array<NotfyScalarWhereInput>>;
  appointment?: InputMaybe<DateTimeNullableFilter>;
  content?: InputMaybe<StringFilter>;
  cratedBy?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  type?: InputMaybe<EnumtypeNotfyFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
};

export type NotfyScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<NotfyScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<NotfyScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<NotfyScalarWhereWithAggregatesInput>>;
  appointment?: InputMaybe<DateTimeNullableWithAggregatesFilter>;
  content?: InputMaybe<StringWithAggregatesFilter>;
  cratedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  type?: InputMaybe<EnumtypeNotfyWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export type NotfySumAggregate = {
  __typename?: 'NotfySumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type NotfySumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type NotfyUncheckedCreateInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  cratedBy?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutNotfyInput>;
};

export type NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<NotfyCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<NotfyCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<NotfyCreateManyCreatedByUserInputEnvelope>;
};

export type NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
  connect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<NotfyCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<NotfyCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<NotfyCreateManyUpdatedByUserInputEnvelope>;
};

export type NotfyUncheckedCreateWithoutCreatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  user?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutNotfyInput>;
};

export type NotfyUncheckedCreateWithoutUpdatedByUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  cratedBy?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutNotfyInput>;
};

export type NotfyUncheckedCreateWithoutUserInput = {
  appointment?: InputMaybe<Scalars['DateTimeISO']['input']>;
  content: Scalars['String']['input'];
  cratedBy?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  type: TypeNotfy;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type NotfyUncheckedUpdateInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  content?: InputMaybe<StringFieldUpdateOperationsInput>;
  cratedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumtypeNotfyFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  user?: InputMaybe<UserNotfyUncheckedUpdateManyWithoutNotfyNestedInput>;
};

export type NotfyUncheckedUpdateManyInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  content?: InputMaybe<StringFieldUpdateOperationsInput>;
  cratedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumtypeNotfyFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type NotfyUncheckedUpdateManyWithoutCreatedByUserInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  content?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumtypeNotfyFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type NotfyUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<NotfyCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<NotfyCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<NotfyCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<NotfyScalarWhereInput>>;
  disconnect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  set?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  update?: InputMaybe<Array<NotfyUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<NotfyUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<NotfyUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type NotfyUncheckedUpdateManyWithoutUpdatedByUserInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  content?: InputMaybe<StringFieldUpdateOperationsInput>;
  cratedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumtypeNotfyFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type NotfyUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<NotfyCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<NotfyCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<NotfyCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<NotfyScalarWhereInput>>;
  disconnect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  set?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  update?: InputMaybe<Array<NotfyUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<NotfyUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<NotfyUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type NotfyUncheckedUpdateWithoutCreatedByUserInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  content?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumtypeNotfyFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  user?: InputMaybe<UserNotfyUncheckedUpdateManyWithoutNotfyNestedInput>;
};

export type NotfyUncheckedUpdateWithoutUpdatedByUserInput = {
  appointment?: InputMaybe<NullableDateTimeFieldUpdateOperationsInput>;
  content?: InputMaybe<StringFieldUpdateOperationsInput>;
  cratedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  type?: InputMaybe<EnumtypeNotfyFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  user?: InputMaybe<UserNotfyUncheckedUpdateManyWithoutNotfyNestedInput>;
};

export type NotfyUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: NotfyUncheckedUpdateManyWithoutCreatedByUserInput;
  where: NotfyScalarWhereInput;
};

export type NotfyUpdateManyWithWhereWithoutUpdatedByUserInput = {
  data: NotfyUncheckedUpdateManyWithoutUpdatedByUserInput;
  where: NotfyScalarWhereInput;
};

export type NotfyUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<NotfyCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<NotfyCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<NotfyCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<NotfyScalarWhereInput>>;
  disconnect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  set?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  update?: InputMaybe<Array<NotfyUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<NotfyUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<NotfyUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type NotfyUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<NotfyCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<NotfyCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<NotfyCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<NotfyScalarWhereInput>>;
  disconnect?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  set?: InputMaybe<Array<NotfyWhereUniqueInput>>;
  update?: InputMaybe<Array<NotfyUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<NotfyUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<NotfyUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type NotfyUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: NotfyUncheckedUpdateWithoutCreatedByUserInput;
  where: NotfyWhereUniqueInput;
};

export type NotfyUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
  data: NotfyUncheckedUpdateWithoutUpdatedByUserInput;
  where: NotfyWhereUniqueInput;
};

export type NotfyUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: NotfyUncheckedCreateWithoutCreatedByUserInput;
  update: NotfyUncheckedUpdateWithoutCreatedByUserInput;
  where: NotfyWhereUniqueInput;
};

export type NotfyUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
  create: NotfyUncheckedCreateWithoutUpdatedByUserInput;
  update: NotfyUncheckedUpdateWithoutUpdatedByUserInput;
  where: NotfyWhereUniqueInput;
};

export type NotfyWhereInput = {
  AND?: InputMaybe<Array<NotfyWhereInput>>;
  NOT?: InputMaybe<Array<NotfyWhereInput>>;
  OR?: InputMaybe<Array<NotfyWhereInput>>;
  appointment?: InputMaybe<DateTimeNullableFilter>;
  content?: InputMaybe<StringFilter>;
  cratedBy?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  id?: InputMaybe<IntFilter>;
  type?: InputMaybe<EnumtypeNotfyFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
  user?: InputMaybe<UserNotfyListRelationFilter>;
};

export type NotfyWhereUniqueInput = {
  AND?: InputMaybe<Array<NotfyWhereInput>>;
  NOT?: InputMaybe<Array<NotfyWhereInput>>;
  OR?: InputMaybe<Array<NotfyWhereInput>>;
  appointment?: InputMaybe<DateTimeNullableFilter>;
  content?: InputMaybe<StringFilter>;
  cratedBy?: InputMaybe<UuidNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  type?: InputMaybe<EnumtypeNotfyFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
  user?: InputMaybe<UserNotfyListRelationFilter>;
};

export type NullableDateTimeFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type NullableIntFieldUpdateOperationsInput = {
  decrement?: InputMaybe<Scalars['Int']['input']>;
  divide?: InputMaybe<Scalars['Int']['input']>;
  increment?: InputMaybe<Scalars['Int']['input']>;
  multiply?: InputMaybe<Scalars['Int']['input']>;
  set?: InputMaybe<Scalars['Int']['input']>;
};

export type NullableStringFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['String']['input']>;
};

export enum NullsOrder {
  First = 'first',
  Last = 'last'
}

export type OGeneratedTokenClient = {
  __typename?: 'OGeneratedTokenClient';
  token?: Maybe<Scalars['String']['output']>;
};

export type OLoginClient = {
  __typename?: 'OLoginClient';
  token: Scalars['String']['output'];
  user: User;
};

export type ObjectNotification = {
  __typename?: 'ObjectNotification';
  boardId: Scalars['ID']['output'];
  message: Scalars['String']['output'];
  user?: Maybe<User>;
  uuid: Scalars['String']['output'];
};

export type Objective = {
  __typename?: 'Objective';
  Kr: Array<Kr>;
  _count?: Maybe<ObjectiveCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy: Scalars['String']['output'];
  createdByUser: User;
  description: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy: Scalars['String']['output'];
  updatedByUser: User;
};


export type ObjectiveKrArgs = {
  cursor?: InputMaybe<KrWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrWhereInput>;
};

export type ObjectiveAvgAggregate = {
  __typename?: 'ObjectiveAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type ObjectiveAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type ObjectiveCount = {
  __typename?: 'ObjectiveCount';
  Kr: Scalars['Int']['output'];
};


export type ObjectiveCountKrArgs = {
  where?: InputMaybe<KrWhereInput>;
};

export type ObjectiveCountAggregate = {
  __typename?: 'ObjectiveCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type ObjectiveCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ObjectiveCreateManyCreatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy: Scalars['String']['input'];
};

export type ObjectiveCreateManyCreatedByUserInputEnvelope = {
  data: Array<ObjectiveCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ObjectiveCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy: Scalars['String']['input'];
};

export type ObjectiveCreateManyUpdatedByUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ObjectiveCreateManyUpdatedByUserInputEnvelope = {
  data: Array<ObjectiveCreateManyUpdatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ObjectiveCreateNestedOneWithoutKrInput = {
  connect?: InputMaybe<ObjectiveWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ObjectiveCreateOrConnectWithoutKrInput>;
  create?: InputMaybe<ObjectiveUncheckedCreateWithoutKrInput>;
};

export type ObjectiveCreateOrConnectWithoutCreatedByUserInput = {
  create: ObjectiveUncheckedCreateWithoutCreatedByUserInput;
  where: ObjectiveWhereUniqueInput;
};

export type ObjectiveCreateOrConnectWithoutKrInput = {
  create: ObjectiveUncheckedCreateWithoutKrInput;
  where: ObjectiveWhereUniqueInput;
};

export type ObjectiveCreateOrConnectWithoutUpdatedByUserInput = {
  create: ObjectiveUncheckedCreateWithoutUpdatedByUserInput;
  where: ObjectiveWhereUniqueInput;
};

export type ObjectiveCreateWithoutCreatedByUserInput = {
  Kr?: InputMaybe<KrCreateNestedManyWithoutObjectiveInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser: UserCreateNestedOneWithoutObjectiveUpdatedByInput;
};

export type ObjectiveCreateWithoutUpdatedByUserInput = {
  Kr?: InputMaybe<KrCreateNestedManyWithoutObjectiveInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser: UserCreateNestedOneWithoutObjectiveCreatedByInput;
  description: Scalars['String']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ObjectiveGroupBy = {
  __typename?: 'ObjectiveGroupBy';
  _avg?: Maybe<ObjectiveAvgAggregate>;
  _count?: Maybe<ObjectiveCountAggregate>;
  _max?: Maybe<ObjectiveMaxAggregate>;
  _min?: Maybe<ObjectiveMinAggregate>;
  _sum?: Maybe<ObjectiveSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy: Scalars['String']['output'];
  description: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy: Scalars['String']['output'];
};

export type ObjectiveListRelationFilter = {
  every?: InputMaybe<ObjectiveWhereInput>;
  none?: InputMaybe<ObjectiveWhereInput>;
  some?: InputMaybe<ObjectiveWhereInput>;
};

export type ObjectiveMaxAggregate = {
  __typename?: 'ObjectiveMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type ObjectiveMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ObjectiveMinAggregate = {
  __typename?: 'ObjectiveMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type ObjectiveMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ObjectiveOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ObjectiveOrderByWithAggregationInput = {
  _avg?: InputMaybe<ObjectiveAvgOrderByAggregateInput>;
  _count?: InputMaybe<ObjectiveCountOrderByAggregateInput>;
  _max?: InputMaybe<ObjectiveMaxOrderByAggregateInput>;
  _min?: InputMaybe<ObjectiveMinOrderByAggregateInput>;
  _sum?: InputMaybe<ObjectiveSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ObjectiveOrderByWithRelationInput = {
  Kr?: InputMaybe<KrOrderByRelationAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  description?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
  updatedByUser?: InputMaybe<UserOrderByWithRelationInput>;
};

export type ObjectiveRelationFilter = {
  is?: InputMaybe<ObjectiveWhereInput>;
  isNot?: InputMaybe<ObjectiveWhereInput>;
};

export enum ObjectiveScalarFieldEnum {
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Description = 'description',
  Id = 'id',
  Title = 'title',
  UpdatedAt = 'updatedAt',
  UpdatedBy = 'updatedBy'
}

export type ObjectiveScalarWhereInput = {
  AND?: InputMaybe<Array<ObjectiveScalarWhereInput>>;
  NOT?: InputMaybe<Array<ObjectiveScalarWhereInput>>;
  OR?: InputMaybe<Array<ObjectiveScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidFilter>;
};

export type ObjectiveScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ObjectiveScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ObjectiveScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ObjectiveScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidWithAggregatesFilter>;
  description?: InputMaybe<StringWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidWithAggregatesFilter>;
};

export type ObjectiveSumAggregate = {
  __typename?: 'ObjectiveSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type ObjectiveSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type ObjectiveUncheckedCreateInput = {
  Kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutObjectiveInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy: Scalars['String']['input'];
};

export type ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ObjectiveCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ObjectiveCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ObjectiveCreateManyCreatedByUserInputEnvelope>;
};

export type ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
  connect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ObjectiveCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ObjectiveCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ObjectiveCreateManyUpdatedByUserInputEnvelope>;
};

export type ObjectiveUncheckedCreateWithoutCreatedByUserInput = {
  Kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutObjectiveInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy: Scalars['String']['input'];
};

export type ObjectiveUncheckedCreateWithoutKrInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy: Scalars['String']['input'];
};

export type ObjectiveUncheckedCreateWithoutUpdatedByUserInput = {
  Kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutObjectiveInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ObjectiveUncheckedUpdateInput = {
  Kr?: InputMaybe<KrUncheckedUpdateManyWithoutObjectiveNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ObjectiveUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ObjectiveUncheckedUpdateManyWithoutCreatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ObjectiveUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ObjectiveCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ObjectiveCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ObjectiveCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ObjectiveScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  set?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  update?: InputMaybe<Array<ObjectiveUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<ObjectiveUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<ObjectiveUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type ObjectiveUncheckedUpdateManyWithoutUpdatedByUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ObjectiveUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ObjectiveCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ObjectiveCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ObjectiveCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ObjectiveScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  set?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  update?: InputMaybe<Array<ObjectiveUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<ObjectiveUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<ObjectiveUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type ObjectiveUncheckedUpdateWithoutCreatedByUserInput = {
  Kr?: InputMaybe<KrUncheckedUpdateManyWithoutObjectiveNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ObjectiveUncheckedUpdateWithoutUpdatedByUserInput = {
  Kr?: InputMaybe<KrUncheckedUpdateManyWithoutObjectiveNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ObjectiveUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: ObjectiveUncheckedUpdateManyWithoutCreatedByUserInput;
  where: ObjectiveScalarWhereInput;
};

export type ObjectiveUpdateManyWithWhereWithoutUpdatedByUserInput = {
  data: ObjectiveUncheckedUpdateManyWithoutUpdatedByUserInput;
  where: ObjectiveScalarWhereInput;
};

export type ObjectiveUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ObjectiveCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ObjectiveCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ObjectiveCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ObjectiveScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  set?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  update?: InputMaybe<Array<ObjectiveUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<ObjectiveUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<ObjectiveUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type ObjectiveUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ObjectiveCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ObjectiveCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ObjectiveCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ObjectiveScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  set?: InputMaybe<Array<ObjectiveWhereUniqueInput>>;
  update?: InputMaybe<Array<ObjectiveUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<ObjectiveUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<ObjectiveUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type ObjectiveUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: ObjectiveUncheckedUpdateWithoutCreatedByUserInput;
  where: ObjectiveWhereUniqueInput;
};

export type ObjectiveUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
  data: ObjectiveUncheckedUpdateWithoutUpdatedByUserInput;
  where: ObjectiveWhereUniqueInput;
};

export type ObjectiveUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: ObjectiveUncheckedCreateWithoutCreatedByUserInput;
  update: ObjectiveUncheckedUpdateWithoutCreatedByUserInput;
  where: ObjectiveWhereUniqueInput;
};

export type ObjectiveUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
  create: ObjectiveUncheckedCreateWithoutUpdatedByUserInput;
  update: ObjectiveUncheckedUpdateWithoutUpdatedByUserInput;
  where: ObjectiveWhereUniqueInput;
};

export type ObjectiveWhereInput = {
  AND?: InputMaybe<Array<ObjectiveWhereInput>>;
  Kr?: InputMaybe<KrListRelationFilter>;
  NOT?: InputMaybe<Array<ObjectiveWhereInput>>;
  OR?: InputMaybe<Array<ObjectiveWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  createdByUser?: InputMaybe<UserRelationFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidFilter>;
  updatedByUser?: InputMaybe<UserRelationFilter>;
};

export type ObjectiveWhereUniqueInput = {
  AND?: InputMaybe<Array<ObjectiveWhereInput>>;
  Kr?: InputMaybe<KrListRelationFilter>;
  NOT?: InputMaybe<Array<ObjectiveWhereInput>>;
  OR?: InputMaybe<Array<ObjectiveWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  createdByUser?: InputMaybe<UserRelationFilter>;
  description?: InputMaybe<StringFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidFilter>;
  updatedByUser?: InputMaybe<UserRelationFilter>;
};

export type OkrObjectiveProject = {
  __typename?: 'OkrObjectiveProject';
  _count?: Maybe<OkrObjectiveProjectCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy: Scalars['String']['output'];
  description: Scalars['String']['output'];
  finishedAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  okr: Array<OkrProject>;
  project: Project;
  projectId: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
};


export type OkrObjectiveProjectOkrArgs = {
  cursor?: InputMaybe<OkrProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectWhereInput>;
};

export type OkrObjectiveProjectAvgAggregate = {
  __typename?: 'OkrObjectiveProjectAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type OkrObjectiveProjectAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type OkrObjectiveProjectCount = {
  __typename?: 'OkrObjectiveProjectCount';
  okr: Scalars['Int']['output'];
};


export type OkrObjectiveProjectCountOkrArgs = {
  where?: InputMaybe<OkrProjectWhereInput>;
};

export type OkrObjectiveProjectCountAggregate = {
  __typename?: 'OkrObjectiveProjectCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  description: Scalars['Int']['output'];
  finishedAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type OkrObjectiveProjectCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  finishedAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OkrObjectiveProjectCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OkrObjectiveProjectCreateManyProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OkrObjectiveProjectCreateManyProjectInputEnvelope = {
  data: Array<OkrObjectiveProjectCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OkrObjectiveProjectCreateManyUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OkrObjectiveProjectCreateManyUserInputEnvelope = {
  data: Array<OkrObjectiveProjectCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OkrObjectiveProjectCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrObjectiveProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<OkrObjectiveProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<OkrObjectiveProjectCreateManyProjectInputEnvelope>;
};

export type OkrObjectiveProjectCreateNestedOneWithoutOkrInput = {
  connect?: InputMaybe<OkrObjectiveProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<OkrObjectiveProjectCreateOrConnectWithoutOkrInput>;
  create?: InputMaybe<OkrObjectiveProjectUncheckedCreateWithoutOkrInput>;
};

export type OkrObjectiveProjectCreateOrConnectWithoutOkrInput = {
  create: OkrObjectiveProjectUncheckedCreateWithoutOkrInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};

export type OkrObjectiveProjectCreateOrConnectWithoutProjectInput = {
  create: OkrObjectiveProjectUncheckedCreateWithoutProjectInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};

export type OkrObjectiveProjectCreateOrConnectWithoutUserInput = {
  create: OkrObjectiveProjectUncheckedCreateWithoutUserInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};

export type OkrObjectiveProjectCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  okr?: InputMaybe<OkrProjectCreateNestedManyWithoutObjectiveInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user: UserCreateNestedOneWithoutOkrObjectiveProjectInput;
};

export type OkrObjectiveProjectCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  okr?: InputMaybe<OkrProjectCreateNestedManyWithoutObjectiveInput>;
  project: ProjectCreateNestedOneWithoutOkrObjectiveProjectInput;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OkrObjectiveProjectGroupBy = {
  __typename?: 'OkrObjectiveProjectGroupBy';
  _avg?: Maybe<OkrObjectiveProjectAvgAggregate>;
  _count?: Maybe<OkrObjectiveProjectCountAggregate>;
  _max?: Maybe<OkrObjectiveProjectMaxAggregate>;
  _min?: Maybe<OkrObjectiveProjectMinAggregate>;
  _sum?: Maybe<OkrObjectiveProjectSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy: Scalars['String']['output'];
  description: Scalars['String']['output'];
  finishedAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type OkrObjectiveProjectListRelationFilter = {
  every?: InputMaybe<OkrObjectiveProjectWhereInput>;
  none?: InputMaybe<OkrObjectiveProjectWhereInput>;
  some?: InputMaybe<OkrObjectiveProjectWhereInput>;
};

export type OkrObjectiveProjectMaxAggregate = {
  __typename?: 'OkrObjectiveProjectMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  finishedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type OkrObjectiveProjectMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  finishedAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OkrObjectiveProjectMinAggregate = {
  __typename?: 'OkrObjectiveProjectMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  description?: Maybe<Scalars['String']['output']>;
  finishedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type OkrObjectiveProjectMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  finishedAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OkrObjectiveProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type OkrObjectiveProjectOrderByWithAggregationInput = {
  _avg?: InputMaybe<OkrObjectiveProjectAvgOrderByAggregateInput>;
  _count?: InputMaybe<OkrObjectiveProjectCountOrderByAggregateInput>;
  _max?: InputMaybe<OkrObjectiveProjectMaxOrderByAggregateInput>;
  _min?: InputMaybe<OkrObjectiveProjectMinOrderByAggregateInput>;
  _sum?: InputMaybe<OkrObjectiveProjectSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  finishedAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OkrObjectiveProjectOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  description?: InputMaybe<SortOrder>;
  finishedAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  okr?: InputMaybe<OkrProjectOrderByRelationAggregateInput>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export type OkrObjectiveProjectRelationFilter = {
  is?: InputMaybe<OkrObjectiveProjectWhereInput>;
  isNot?: InputMaybe<OkrObjectiveProjectWhereInput>;
};

export enum OkrObjectiveProjectScalarFieldEnum {
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Description = 'description',
  FinishedAt = 'finishedAt',
  Id = 'id',
  ProjectId = 'projectId',
  Title = 'title',
  UpdatedAt = 'updatedAt'
}

export type OkrObjectiveProjectScalarWhereInput = {
  AND?: InputMaybe<Array<OkrObjectiveProjectScalarWhereInput>>;
  NOT?: InputMaybe<Array<OkrObjectiveProjectScalarWhereInput>>;
  OR?: InputMaybe<Array<OkrObjectiveProjectScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  description?: InputMaybe<StringFilter>;
  finishedAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  projectId?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type OkrObjectiveProjectScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<OkrObjectiveProjectScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<OkrObjectiveProjectScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<OkrObjectiveProjectScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidWithAggregatesFilter>;
  description?: InputMaybe<StringWithAggregatesFilter>;
  finishedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type OkrObjectiveProjectSumAggregate = {
  __typename?: 'OkrObjectiveProjectSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type OkrObjectiveProjectSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type OkrObjectiveProjectUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  okr?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutObjectiveInput>;
  projectId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrObjectiveProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<OkrObjectiveProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<OkrObjectiveProjectCreateManyProjectInputEnvelope>;
};

export type OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrObjectiveProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrObjectiveProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrObjectiveProjectCreateManyUserInputEnvelope>;
};

export type OkrObjectiveProjectUncheckedCreateWithoutOkrInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OkrObjectiveProjectUncheckedCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy: Scalars['String']['input'];
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  okr?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutObjectiveInput>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OkrObjectiveProjectUncheckedCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  description: Scalars['String']['input'];
  finishedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  okr?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutObjectiveInput>;
  projectId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OkrObjectiveProjectUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  finishedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  okr?: InputMaybe<OkrProjectUncheckedUpdateManyWithoutObjectiveNestedInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OkrObjectiveProjectUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  finishedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OkrObjectiveProjectUncheckedUpdateManyWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  finishedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OkrObjectiveProjectUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrObjectiveProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<OkrObjectiveProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<OkrObjectiveProjectCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrObjectiveProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrObjectiveProjectUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<OkrObjectiveProjectUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<OkrObjectiveProjectUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type OkrObjectiveProjectUncheckedUpdateManyWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  finishedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OkrObjectiveProjectUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrObjectiveProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrObjectiveProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrObjectiveProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrObjectiveProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrObjectiveProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<OkrObjectiveProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<OkrObjectiveProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type OkrObjectiveProjectUncheckedUpdateWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<StringFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  finishedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  okr?: InputMaybe<OkrProjectUncheckedUpdateManyWithoutObjectiveNestedInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OkrObjectiveProjectUncheckedUpdateWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  description?: InputMaybe<StringFieldUpdateOperationsInput>;
  finishedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  okr?: InputMaybe<OkrProjectUncheckedUpdateManyWithoutObjectiveNestedInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OkrObjectiveProjectUpdateManyWithWhereWithoutProjectInput = {
  data: OkrObjectiveProjectUncheckedUpdateManyWithoutProjectInput;
  where: OkrObjectiveProjectScalarWhereInput;
};

export type OkrObjectiveProjectUpdateManyWithWhereWithoutUserInput = {
  data: OkrObjectiveProjectUncheckedUpdateManyWithoutUserInput;
  where: OkrObjectiveProjectScalarWhereInput;
};

export type OkrObjectiveProjectUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrObjectiveProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrObjectiveProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrObjectiveProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrObjectiveProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrObjectiveProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrObjectiveProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<OkrObjectiveProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<OkrObjectiveProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type OkrObjectiveProjectUpdateWithWhereUniqueWithoutProjectInput = {
  data: OkrObjectiveProjectUncheckedUpdateWithoutProjectInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};

export type OkrObjectiveProjectUpdateWithWhereUniqueWithoutUserInput = {
  data: OkrObjectiveProjectUncheckedUpdateWithoutUserInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};

export type OkrObjectiveProjectUpsertWithWhereUniqueWithoutProjectInput = {
  create: OkrObjectiveProjectUncheckedCreateWithoutProjectInput;
  update: OkrObjectiveProjectUncheckedUpdateWithoutProjectInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};

export type OkrObjectiveProjectUpsertWithWhereUniqueWithoutUserInput = {
  create: OkrObjectiveProjectUncheckedCreateWithoutUserInput;
  update: OkrObjectiveProjectUncheckedUpdateWithoutUserInput;
  where: OkrObjectiveProjectWhereUniqueInput;
};

export type OkrObjectiveProjectWhereInput = {
  AND?: InputMaybe<Array<OkrObjectiveProjectWhereInput>>;
  NOT?: InputMaybe<Array<OkrObjectiveProjectWhereInput>>;
  OR?: InputMaybe<Array<OkrObjectiveProjectWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  description?: InputMaybe<StringFilter>;
  finishedAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  okr?: InputMaybe<OkrProjectListRelationFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type OkrObjectiveProjectWhereUniqueInput = {
  AND?: InputMaybe<Array<OkrObjectiveProjectWhereInput>>;
  NOT?: InputMaybe<Array<OkrObjectiveProjectWhereInput>>;
  OR?: InputMaybe<Array<OkrObjectiveProjectWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidFilter>;
  description?: InputMaybe<StringFilter>;
  finishedAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  okr?: InputMaybe<OkrProjectListRelationFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
};

export type OkrProject = {
  __typename?: 'OkrProject';
  _count?: Maybe<OkrProjectCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  finished: Scalars['Boolean']['output'];
  id: Scalars['Int']['output'];
  kr: Array<OkrProjectHistory>;
  krComments: Array<KrCommentProject>;
  objective: OkrObjectiveProject;
  objectiveId: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  user?: Maybe<User>;
};


export type OkrProjectKrArgs = {
  cursor?: InputMaybe<OkrProjectHistoryWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectHistoryScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectHistoryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type OkrProjectKrCommentsArgs = {
  cursor?: InputMaybe<KrCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type OkrProjectUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type OkrProjectAvgAggregate = {
  __typename?: 'OkrProjectAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  objectiveId?: Maybe<Scalars['Float']['output']>;
};

export type OkrProjectAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
};

export type OkrProjectCount = {
  __typename?: 'OkrProjectCount';
  kr: Scalars['Int']['output'];
  krComments: Scalars['Int']['output'];
};


export type OkrProjectCountKrArgs = {
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type OkrProjectCountKrCommentsArgs = {
  where?: InputMaybe<KrCommentProjectWhereInput>;
};

export type OkrProjectCountAggregate = {
  __typename?: 'OkrProjectCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  finished: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  objectiveId: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
};

export type OkrProjectCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  finished?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
};

export type OkrProjectCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objectiveId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type OkrProjectCreateManyObjectiveInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
};

export type OkrProjectCreateManyObjectiveInputEnvelope = {
  data: Array<OkrProjectCreateManyObjectiveInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OkrProjectCreateManyUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  objectiveId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type OkrProjectCreateManyUserInputEnvelope = {
  data: Array<OkrProjectCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OkrProjectCreateNestedManyWithoutObjectiveInput = {
  connect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectCreateOrConnectWithoutObjectiveInput>>;
  create?: InputMaybe<Array<OkrProjectCreateWithoutObjectiveInput>>;
  createMany?: InputMaybe<OkrProjectCreateManyObjectiveInputEnvelope>;
};

export type OkrProjectCreateNestedOneWithoutKrCommentsInput = {
  connect?: InputMaybe<OkrProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<OkrProjectCreateOrConnectWithoutKrCommentsInput>;
  create?: InputMaybe<OkrProjectUncheckedCreateWithoutKrCommentsInput>;
};

export type OkrProjectCreateNestedOneWithoutKrInput = {
  connect?: InputMaybe<OkrProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<OkrProjectCreateOrConnectWithoutKrInput>;
  create?: InputMaybe<OkrProjectUncheckedCreateWithoutKrInput>;
};

export type OkrProjectCreateOrConnectWithoutKrCommentsInput = {
  create: OkrProjectUncheckedCreateWithoutKrCommentsInput;
  where: OkrProjectWhereUniqueInput;
};

export type OkrProjectCreateOrConnectWithoutKrInput = {
  create: OkrProjectUncheckedCreateWithoutKrInput;
  where: OkrProjectWhereUniqueInput;
};

export type OkrProjectCreateOrConnectWithoutObjectiveInput = {
  create: OkrProjectUncheckedCreateWithoutObjectiveInput;
  where: OkrProjectWhereUniqueInput;
};

export type OkrProjectCreateOrConnectWithoutUserInput = {
  create: OkrProjectUncheckedCreateWithoutUserInput;
  where: OkrProjectWhereUniqueInput;
};

export type OkrProjectCreateWithoutObjectiveInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  kr?: InputMaybe<OkrProjectHistoryCreateNestedManyWithoutKrProjectInput>;
  krComments?: InputMaybe<KrCommentProjectCreateNestedManyWithoutKrProjectInput>;
  title: Scalars['String']['input'];
  user?: InputMaybe<UserCreateNestedOneWithoutOkrProjectInput>;
};

export type OkrProjectCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  kr?: InputMaybe<OkrProjectHistoryCreateNestedManyWithoutKrProjectInput>;
  krComments?: InputMaybe<KrCommentProjectCreateNestedManyWithoutKrProjectInput>;
  objective: OkrObjectiveProjectCreateNestedOneWithoutOkrInput;
  title: Scalars['String']['input'];
};

export type OkrProjectGroupBy = {
  __typename?: 'OkrProjectGroupBy';
  _avg?: Maybe<OkrProjectAvgAggregate>;
  _count?: Maybe<OkrProjectCountAggregate>;
  _max?: Maybe<OkrProjectMaxAggregate>;
  _min?: Maybe<OkrProjectMinAggregate>;
  _sum?: Maybe<OkrProjectSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  finished: Scalars['Boolean']['output'];
  id: Scalars['Int']['output'];
  objectiveId: Scalars['Int']['output'];
  title: Scalars['String']['output'];
};

export type OkrProjectHistory = {
  __typename?: 'OkrProjectHistory';
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  krId: Scalars['Int']['output'];
  krProject: OkrProject;
  progress: Scalars['Float']['output'];
  target: Scalars['Float']['output'];
  user?: Maybe<User>;
};


export type OkrProjectHistoryUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type OkrProjectHistoryAvgAggregate = {
  __typename?: 'OkrProjectHistoryAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  krId?: Maybe<Scalars['Float']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type OkrProjectHistoryAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type OkrProjectHistoryCountAggregate = {
  __typename?: 'OkrProjectHistoryCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  krId: Scalars['Int']['output'];
  progress: Scalars['Int']['output'];
  target: Scalars['Int']['output'];
};

export type OkrProjectHistoryCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type OkrProjectHistoryCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
};

export type OkrProjectHistoryCreateManyKrProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
};

export type OkrProjectHistoryCreateManyKrProjectInputEnvelope = {
  data: Array<OkrProjectHistoryCreateManyKrProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OkrProjectHistoryCreateManyUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
};

export type OkrProjectHistoryCreateManyUserInputEnvelope = {
  data: Array<OkrProjectHistoryCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type OkrProjectHistoryCreateNestedManyWithoutKrProjectInput = {
  connect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectHistoryCreateOrConnectWithoutKrProjectInput>>;
  create?: InputMaybe<Array<OkrProjectHistoryCreateWithoutKrProjectInput>>;
  createMany?: InputMaybe<OkrProjectHistoryCreateManyKrProjectInputEnvelope>;
};

export type OkrProjectHistoryCreateOrConnectWithoutKrProjectInput = {
  create: OkrProjectHistoryUncheckedCreateWithoutKrProjectInput;
  where: OkrProjectHistoryWhereUniqueInput;
};

export type OkrProjectHistoryCreateOrConnectWithoutUserInput = {
  create: OkrProjectHistoryUncheckedCreateWithoutUserInput;
  where: OkrProjectHistoryWhereUniqueInput;
};

export type OkrProjectHistoryCreateWithoutKrProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
  user?: InputMaybe<UserCreateNestedOneWithoutOkrProjectHistoryInput>;
};

export type OkrProjectHistoryCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  krProject: OkrProjectCreateNestedOneWithoutKrInput;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
};

export type OkrProjectHistoryGroupBy = {
  __typename?: 'OkrProjectHistoryGroupBy';
  _avg?: Maybe<OkrProjectHistoryAvgAggregate>;
  _count?: Maybe<OkrProjectHistoryCountAggregate>;
  _max?: Maybe<OkrProjectHistoryMaxAggregate>;
  _min?: Maybe<OkrProjectHistoryMinAggregate>;
  _sum?: Maybe<OkrProjectHistorySumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  krId: Scalars['Int']['output'];
  progress: Scalars['Float']['output'];
  target: Scalars['Float']['output'];
};

export type OkrProjectHistoryListRelationFilter = {
  every?: InputMaybe<OkrProjectHistoryWhereInput>;
  none?: InputMaybe<OkrProjectHistoryWhereInput>;
  some?: InputMaybe<OkrProjectHistoryWhereInput>;
};

export type OkrProjectHistoryMaxAggregate = {
  __typename?: 'OkrProjectHistoryMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  krId?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type OkrProjectHistoryMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type OkrProjectHistoryMinAggregate = {
  __typename?: 'OkrProjectHistoryMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  krId?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type OkrProjectHistoryMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type OkrProjectHistoryOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type OkrProjectHistoryOrderByWithAggregationInput = {
  _avg?: InputMaybe<OkrProjectHistoryAvgOrderByAggregateInput>;
  _count?: InputMaybe<OkrProjectHistoryCountOrderByAggregateInput>;
  _max?: InputMaybe<OkrProjectHistoryMaxOrderByAggregateInput>;
  _min?: InputMaybe<OkrProjectHistoryMinOrderByAggregateInput>;
  _sum?: InputMaybe<OkrProjectHistorySumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type OkrProjectHistoryOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
  krProject?: InputMaybe<OkrProjectOrderByWithRelationInput>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export enum OkrProjectHistoryScalarFieldEnum {
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Id = 'id',
  KrId = 'krId',
  Progress = 'progress',
  Target = 'target'
}

export type OkrProjectHistoryScalarWhereInput = {
  AND?: InputMaybe<Array<OkrProjectHistoryScalarWhereInput>>;
  NOT?: InputMaybe<Array<OkrProjectHistoryScalarWhereInput>>;
  OR?: InputMaybe<Array<OkrProjectHistoryScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<IntFilter>;
  krId?: InputMaybe<IntFilter>;
  progress?: InputMaybe<FloatFilter>;
  target?: InputMaybe<FloatFilter>;
};

export type OkrProjectHistoryScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<OkrProjectHistoryScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<OkrProjectHistoryScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<OkrProjectHistoryScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  krId?: InputMaybe<IntWithAggregatesFilter>;
  progress?: InputMaybe<FloatWithAggregatesFilter>;
  target?: InputMaybe<FloatWithAggregatesFilter>;
};

export type OkrProjectHistorySumAggregate = {
  __typename?: 'OkrProjectHistorySumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  krId?: Maybe<Scalars['Int']['output']>;
  progress?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type OkrProjectHistorySumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  krId?: InputMaybe<SortOrder>;
  progress?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type OkrProjectHistoryUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
};

export type OkrProjectHistoryUncheckedCreateNestedManyWithoutKrProjectInput = {
  connect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectHistoryCreateOrConnectWithoutKrProjectInput>>;
  create?: InputMaybe<Array<OkrProjectHistoryCreateWithoutKrProjectInput>>;
  createMany?: InputMaybe<OkrProjectHistoryCreateManyKrProjectInputEnvelope>;
};

export type OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectHistoryCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrProjectHistoryCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrProjectHistoryCreateManyUserInputEnvelope>;
};

export type OkrProjectHistoryUncheckedCreateWithoutKrProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
};

export type OkrProjectHistoryUncheckedCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krId: Scalars['Int']['input'];
  progress?: InputMaybe<Scalars['Float']['input']>;
  target?: InputMaybe<Scalars['Float']['input']>;
};

export type OkrProjectHistoryUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  krId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type OkrProjectHistoryUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  krId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type OkrProjectHistoryUncheckedUpdateManyWithoutKrProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type OkrProjectHistoryUncheckedUpdateManyWithoutKrProjectNestedInput = {
  connect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectHistoryCreateOrConnectWithoutKrProjectInput>>;
  create?: InputMaybe<Array<OkrProjectHistoryCreateWithoutKrProjectInput>>;
  createMany?: InputMaybe<OkrProjectHistoryCreateManyKrProjectInputEnvelope>;
  delete?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrProjectHistoryScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrProjectHistoryUpdateWithWhereUniqueWithoutKrProjectInput>>;
  updateMany?: InputMaybe<Array<OkrProjectHistoryUpdateManyWithWhereWithoutKrProjectInput>>;
  upsert?: InputMaybe<Array<OkrProjectHistoryUpsertWithWhereUniqueWithoutKrProjectInput>>;
};

export type OkrProjectHistoryUncheckedUpdateManyWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  krId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type OkrProjectHistoryUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectHistoryCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrProjectHistoryCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrProjectHistoryCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrProjectHistoryScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrProjectHistoryUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<OkrProjectHistoryUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<OkrProjectHistoryUpsertWithWhereUniqueWithoutUserInput>>;
};

export type OkrProjectHistoryUncheckedUpdateWithoutKrProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type OkrProjectHistoryUncheckedUpdateWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  krId?: InputMaybe<IntFieldUpdateOperationsInput>;
  progress?: InputMaybe<FloatFieldUpdateOperationsInput>;
  target?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type OkrProjectHistoryUpdateManyWithWhereWithoutKrProjectInput = {
  data: OkrProjectHistoryUncheckedUpdateManyWithoutKrProjectInput;
  where: OkrProjectHistoryScalarWhereInput;
};

export type OkrProjectHistoryUpdateManyWithWhereWithoutUserInput = {
  data: OkrProjectHistoryUncheckedUpdateManyWithoutUserInput;
  where: OkrProjectHistoryScalarWhereInput;
};

export type OkrProjectHistoryUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectHistoryCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrProjectHistoryCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrProjectHistoryCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrProjectHistoryScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrProjectHistoryWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrProjectHistoryUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<OkrProjectHistoryUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<OkrProjectHistoryUpsertWithWhereUniqueWithoutUserInput>>;
};

export type OkrProjectHistoryUpdateWithWhereUniqueWithoutKrProjectInput = {
  data: OkrProjectHistoryUncheckedUpdateWithoutKrProjectInput;
  where: OkrProjectHistoryWhereUniqueInput;
};

export type OkrProjectHistoryUpdateWithWhereUniqueWithoutUserInput = {
  data: OkrProjectHistoryUncheckedUpdateWithoutUserInput;
  where: OkrProjectHistoryWhereUniqueInput;
};

export type OkrProjectHistoryUpsertWithWhereUniqueWithoutKrProjectInput = {
  create: OkrProjectHistoryUncheckedCreateWithoutKrProjectInput;
  update: OkrProjectHistoryUncheckedUpdateWithoutKrProjectInput;
  where: OkrProjectHistoryWhereUniqueInput;
};

export type OkrProjectHistoryUpsertWithWhereUniqueWithoutUserInput = {
  create: OkrProjectHistoryUncheckedCreateWithoutUserInput;
  update: OkrProjectHistoryUncheckedUpdateWithoutUserInput;
  where: OkrProjectHistoryWhereUniqueInput;
};

export type OkrProjectHistoryWhereInput = {
  AND?: InputMaybe<Array<OkrProjectHistoryWhereInput>>;
  NOT?: InputMaybe<Array<OkrProjectHistoryWhereInput>>;
  OR?: InputMaybe<Array<OkrProjectHistoryWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<IntFilter>;
  krId?: InputMaybe<IntFilter>;
  krProject?: InputMaybe<OkrProjectRelationFilter>;
  progress?: InputMaybe<FloatFilter>;
  target?: InputMaybe<FloatFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type OkrProjectHistoryWhereUniqueInput = {
  AND?: InputMaybe<Array<OkrProjectHistoryWhereInput>>;
  NOT?: InputMaybe<Array<OkrProjectHistoryWhereInput>>;
  OR?: InputMaybe<Array<OkrProjectHistoryWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krId?: InputMaybe<IntFilter>;
  krProject?: InputMaybe<OkrProjectRelationFilter>;
  progress?: InputMaybe<FloatFilter>;
  target?: InputMaybe<FloatFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type OkrProjectListRelationFilter = {
  every?: InputMaybe<OkrProjectWhereInput>;
  none?: InputMaybe<OkrProjectWhereInput>;
  some?: InputMaybe<OkrProjectWhereInput>;
};

export type OkrProjectMaxAggregate = {
  __typename?: 'OkrProjectMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  finished?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  objectiveId?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type OkrProjectMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  finished?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
};

export type OkrProjectMinAggregate = {
  __typename?: 'OkrProjectMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  finished?: Maybe<Scalars['Boolean']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  objectiveId?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
};

export type OkrProjectMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  finished?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
};

export type OkrProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type OkrProjectOrderByWithAggregationInput = {
  _avg?: InputMaybe<OkrProjectAvgOrderByAggregateInput>;
  _count?: InputMaybe<OkrProjectCountOrderByAggregateInput>;
  _max?: InputMaybe<OkrProjectMaxOrderByAggregateInput>;
  _min?: InputMaybe<OkrProjectMinOrderByAggregateInput>;
  _sum?: InputMaybe<OkrProjectSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  finished?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
};

export type OkrProjectOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  finished?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  kr?: InputMaybe<OkrProjectHistoryOrderByRelationAggregateInput>;
  krComments?: InputMaybe<KrCommentProjectOrderByRelationAggregateInput>;
  objective?: InputMaybe<OkrObjectiveProjectOrderByWithRelationInput>;
  objectiveId?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
};

export type OkrProjectRelationFilter = {
  is?: InputMaybe<OkrProjectWhereInput>;
  isNot?: InputMaybe<OkrProjectWhereInput>;
};

export enum OkrProjectScalarFieldEnum {
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Finished = 'finished',
  Id = 'id',
  ObjectiveId = 'objectiveId',
  Title = 'title'
}

export type OkrProjectScalarWhereInput = {
  AND?: InputMaybe<Array<OkrProjectScalarWhereInput>>;
  NOT?: InputMaybe<Array<OkrProjectScalarWhereInput>>;
  OR?: InputMaybe<Array<OkrProjectScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  finished?: InputMaybe<BoolFilter>;
  id?: InputMaybe<IntFilter>;
  objectiveId?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
};

export type OkrProjectScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<OkrProjectScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<OkrProjectScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<OkrProjectScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  finished?: InputMaybe<BoolWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  objectiveId?: InputMaybe<IntWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
};

export type OkrProjectSumAggregate = {
  __typename?: 'OkrProjectSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  objectiveId?: Maybe<Scalars['Int']['output']>;
};

export type OkrProjectSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  objectiveId?: InputMaybe<SortOrder>;
};

export type OkrProjectUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  kr?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutKrProjectInput>;
  krComments?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutKrProjectInput>;
  objectiveId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type OkrProjectUncheckedCreateNestedManyWithoutObjectiveInput = {
  connect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectCreateOrConnectWithoutObjectiveInput>>;
  create?: InputMaybe<Array<OkrProjectCreateWithoutObjectiveInput>>;
  createMany?: InputMaybe<OkrProjectCreateManyObjectiveInputEnvelope>;
};

export type OkrProjectUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrProjectCreateManyUserInputEnvelope>;
};

export type OkrProjectUncheckedCreateWithoutKrCommentsInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  kr?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutKrProjectInput>;
  objectiveId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type OkrProjectUncheckedCreateWithoutKrInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  krComments?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutKrProjectInput>;
  objectiveId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type OkrProjectUncheckedCreateWithoutObjectiveInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  kr?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutKrProjectInput>;
  krComments?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutKrProjectInput>;
  title: Scalars['String']['input'];
};

export type OkrProjectUncheckedCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  finished?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  kr?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutKrProjectInput>;
  krComments?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutKrProjectInput>;
  objectiveId: Scalars['Int']['input'];
  title: Scalars['String']['input'];
};

export type OkrProjectUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  finished?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  kr?: InputMaybe<OkrProjectHistoryUncheckedUpdateManyWithoutKrProjectNestedInput>;
  krComments?: InputMaybe<KrCommentProjectUncheckedUpdateManyWithoutKrProjectNestedInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type OkrProjectUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  finished?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type OkrProjectUncheckedUpdateManyWithoutObjectiveInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  finished?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type OkrProjectUncheckedUpdateManyWithoutObjectiveNestedInput = {
  connect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectCreateOrConnectWithoutObjectiveInput>>;
  create?: InputMaybe<Array<OkrProjectCreateWithoutObjectiveInput>>;
  createMany?: InputMaybe<OkrProjectCreateManyObjectiveInputEnvelope>;
  delete?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrProjectUpdateWithWhereUniqueWithoutObjectiveInput>>;
  updateMany?: InputMaybe<Array<OkrProjectUpdateManyWithWhereWithoutObjectiveInput>>;
  upsert?: InputMaybe<Array<OkrProjectUpsertWithWhereUniqueWithoutObjectiveInput>>;
};

export type OkrProjectUncheckedUpdateManyWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  finished?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type OkrProjectUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<OkrProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<OkrProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type OkrProjectUncheckedUpdateWithoutObjectiveInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  finished?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  kr?: InputMaybe<OkrProjectHistoryUncheckedUpdateManyWithoutKrProjectNestedInput>;
  krComments?: InputMaybe<KrCommentProjectUncheckedUpdateManyWithoutKrProjectNestedInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type OkrProjectUncheckedUpdateWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  finished?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  kr?: InputMaybe<OkrProjectHistoryUncheckedUpdateManyWithoutKrProjectNestedInput>;
  krComments?: InputMaybe<KrCommentProjectUncheckedUpdateManyWithoutKrProjectNestedInput>;
  objectiveId?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type OkrProjectUpdateManyWithWhereWithoutObjectiveInput = {
  data: OkrProjectUncheckedUpdateManyWithoutObjectiveInput;
  where: OkrProjectScalarWhereInput;
};

export type OkrProjectUpdateManyWithWhereWithoutUserInput = {
  data: OkrProjectUncheckedUpdateManyWithoutUserInput;
  where: OkrProjectScalarWhereInput;
};

export type OkrProjectUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<OkrProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<OkrProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<OkrProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<OkrProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<OkrProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<OkrProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<OkrProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<OkrProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type OkrProjectUpdateWithWhereUniqueWithoutObjectiveInput = {
  data: OkrProjectUncheckedUpdateWithoutObjectiveInput;
  where: OkrProjectWhereUniqueInput;
};

export type OkrProjectUpdateWithWhereUniqueWithoutUserInput = {
  data: OkrProjectUncheckedUpdateWithoutUserInput;
  where: OkrProjectWhereUniqueInput;
};

export type OkrProjectUpsertWithWhereUniqueWithoutObjectiveInput = {
  create: OkrProjectUncheckedCreateWithoutObjectiveInput;
  update: OkrProjectUncheckedUpdateWithoutObjectiveInput;
  where: OkrProjectWhereUniqueInput;
};

export type OkrProjectUpsertWithWhereUniqueWithoutUserInput = {
  create: OkrProjectUncheckedCreateWithoutUserInput;
  update: OkrProjectUncheckedUpdateWithoutUserInput;
  where: OkrProjectWhereUniqueInput;
};

export type OkrProjectWhereInput = {
  AND?: InputMaybe<Array<OkrProjectWhereInput>>;
  NOT?: InputMaybe<Array<OkrProjectWhereInput>>;
  OR?: InputMaybe<Array<OkrProjectWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  finished?: InputMaybe<BoolFilter>;
  id?: InputMaybe<IntFilter>;
  kr?: InputMaybe<OkrProjectHistoryListRelationFilter>;
  krComments?: InputMaybe<KrCommentProjectListRelationFilter>;
  objective?: InputMaybe<OkrObjectiveProjectRelationFilter>;
  objectiveId?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type OkrProjectWhereUniqueInput = {
  AND?: InputMaybe<Array<OkrProjectWhereInput>>;
  NOT?: InputMaybe<Array<OkrProjectWhereInput>>;
  OR?: InputMaybe<Array<OkrProjectWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  finished?: InputMaybe<BoolFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  kr?: InputMaybe<OkrProjectHistoryListRelationFilter>;
  krComments?: InputMaybe<KrCommentProjectListRelationFilter>;
  objective?: InputMaybe<OkrObjectiveProjectRelationFilter>;
  objectiveId?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  user?: InputMaybe<UserNullableRelationFilter>;
};

export type Organization = {
  __typename?: 'Organization';
  UserOrganization: Array<UserOrganization>;
  _count?: Maybe<OrganizationCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  info?: Maybe<Scalars['JSON']['output']>;
  name: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};


export type OrganizationUserOrganizationArgs = {
  cursor?: InputMaybe<UserOrganizationWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserOrganizationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserOrganizationWhereInput>;
};

export type OrganizationAvgAggregate = {
  __typename?: 'OrganizationAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type OrganizationAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type OrganizationCount = {
  __typename?: 'OrganizationCount';
  UserOrganization: Scalars['Int']['output'];
};


export type OrganizationCountUserOrganizationArgs = {
  where?: InputMaybe<UserOrganizationWhereInput>;
};

export type OrganizationCountAggregate = {
  __typename?: 'OrganizationCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  info: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type OrganizationCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OrganizationCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OrganizationCreateNestedOneWithoutUserOrganizationInput = {
  connect?: InputMaybe<OrganizationWhereUniqueInput>;
  connectOrCreate?: InputMaybe<OrganizationCreateOrConnectWithoutUserOrganizationInput>;
  create?: InputMaybe<OrganizationUncheckedCreateWithoutUserOrganizationInput>;
};

export type OrganizationCreateOrConnectWithoutUserOrganizationInput = {
  create: OrganizationUncheckedCreateWithoutUserOrganizationInput;
  where: OrganizationWhereUniqueInput;
};

export type OrganizationGroupBy = {
  __typename?: 'OrganizationGroupBy';
  _avg?: Maybe<OrganizationAvgAggregate>;
  _count?: Maybe<OrganizationCountAggregate>;
  _max?: Maybe<OrganizationMaxAggregate>;
  _min?: Maybe<OrganizationMinAggregate>;
  _sum?: Maybe<OrganizationSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  info?: Maybe<Scalars['JSON']['output']>;
  name: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type OrganizationMaxAggregate = {
  __typename?: 'OrganizationMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type OrganizationMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OrganizationMinAggregate = {
  __typename?: 'OrganizationMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type OrganizationMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OrganizationOrderByWithAggregationInput = {
  _avg?: InputMaybe<OrganizationAvgOrderByAggregateInput>;
  _count?: InputMaybe<OrganizationCountOrderByAggregateInput>;
  _max?: InputMaybe<OrganizationMaxOrderByAggregateInput>;
  _min?: InputMaybe<OrganizationMinOrderByAggregateInput>;
  _sum?: InputMaybe<OrganizationSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OrganizationOrderByWithRelationInput = {
  UserOrganization?: InputMaybe<UserOrganizationOrderByRelationAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  info?: InputMaybe<SortOrderInput>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type OrganizationRelationFilter = {
  is?: InputMaybe<OrganizationWhereInput>;
  isNot?: InputMaybe<OrganizationWhereInput>;
};

export enum OrganizationScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Info = 'info',
  Name = 'name',
  UpdatedAt = 'updatedAt'
}

export type OrganizationScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<OrganizationScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<OrganizationScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<OrganizationScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  info?: InputMaybe<JsonNullableWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type OrganizationSumAggregate = {
  __typename?: 'OrganizationSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type OrganizationSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type OrganizationUncheckedCreateInput = {
  UserOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OrganizationUncheckedCreateWithoutUserOrganizationInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type OrganizationUncheckedUpdateInput = {
  UserOrganization?: InputMaybe<UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OrganizationUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  info?: InputMaybe<Scalars['JSON']['input']>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type OrganizationWhereInput = {
  AND?: InputMaybe<Array<OrganizationWhereInput>>;
  NOT?: InputMaybe<Array<OrganizationWhereInput>>;
  OR?: InputMaybe<Array<OrganizationWhereInput>>;
  UserOrganization?: InputMaybe<UserOrganizationListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  info?: InputMaybe<JsonNullableFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type OrganizationWhereUniqueInput = {
  AND?: InputMaybe<Array<OrganizationWhereInput>>;
  NOT?: InputMaybe<Array<OrganizationWhereInput>>;
  OR?: InputMaybe<Array<OrganizationWhereInput>>;
  UserOrganization?: InputMaybe<UserOrganizationListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  info?: InputMaybe<JsonNullableFilter>;
  name?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type OutputCalendar = {
  __typename?: 'OutputCalendar';
  date: Scalars['DateTimeISO']['output'];
  link: Scalars['String']['output'];
  title: Scalars['String']['output'];
};

export type OutputCard = {
  __typename?: 'OutputCard';
  _count?: Maybe<Scalars['Float']['output']>;
  message?: Maybe<Scalars['Float']['output']>;
};

export type OutputClient = {
  __typename?: 'OutputClient';
  message: Scalars['String']['output'];
  pathUrl?: Maybe<Scalars['String']['output']>;
};

export type OutputHome = {
  __typename?: 'OutputHome';
  content: Scalars['JSON']['output'];
};

export type OutputHomeGameTeam = {
  __typename?: 'OutputHomeGameTeam';
  component: Scalars['String']['output'];
  name: Scalars['String']['output'];
  pathUrl: Scalars['String']['output'];
  score: Scalars['Int']['output'];
};

export type OutputSelfTemplate = {
  __typename?: 'OutputSelfTemplate';
  home: Scalars['JSON']['output'];
  sideBar: Scalars['JSON']['output'];
};

export type PayloadComment = {
  projectId: Scalars['ID']['input'];
};

export type Permission = {
  __typename?: 'Permission';
  delete: Scalars['Boolean']['output'];
  group: Group;
  groupId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  read: Scalars['Boolean']['output'];
  update: Scalars['Boolean']['output'];
  write: Scalars['Boolean']['output'];
};

export type PermissionAvgAggregate = {
  __typename?: 'PermissionAvgAggregate';
  groupId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type PermissionAvgOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type PermissionCountAggregate = {
  __typename?: 'PermissionCountAggregate';
  _all: Scalars['Int']['output'];
  delete: Scalars['Int']['output'];
  groupId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  read: Scalars['Int']['output'];
  update: Scalars['Int']['output'];
  write: Scalars['Int']['output'];
};

export type PermissionCountOrderByAggregateInput = {
  delete?: InputMaybe<SortOrder>;
  groupId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  read?: InputMaybe<SortOrder>;
  update?: InputMaybe<SortOrder>;
  write?: InputMaybe<SortOrder>;
};

export type PermissionCreateManyInput = {
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  groupId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  read?: InputMaybe<Scalars['Boolean']['input']>;
  update?: InputMaybe<Scalars['Boolean']['input']>;
  write?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PermissionCreateNestedOneWithoutGroupInput = {
  connect?: InputMaybe<PermissionWhereUniqueInput>;
  connectOrCreate?: InputMaybe<PermissionCreateOrConnectWithoutGroupInput>;
  create?: InputMaybe<PermissionUncheckedCreateWithoutGroupInput>;
};

export type PermissionCreateOrConnectWithoutGroupInput = {
  create: PermissionUncheckedCreateWithoutGroupInput;
  where: PermissionWhereUniqueInput;
};

export type PermissionGroupBy = {
  __typename?: 'PermissionGroupBy';
  _avg?: Maybe<PermissionAvgAggregate>;
  _count?: Maybe<PermissionCountAggregate>;
  _max?: Maybe<PermissionMaxAggregate>;
  _min?: Maybe<PermissionMinAggregate>;
  _sum?: Maybe<PermissionSumAggregate>;
  delete: Scalars['Boolean']['output'];
  groupId: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  read: Scalars['Boolean']['output'];
  update: Scalars['Boolean']['output'];
  write: Scalars['Boolean']['output'];
};

export type PermissionMaxAggregate = {
  __typename?: 'PermissionMaxAggregate';
  delete?: Maybe<Scalars['Boolean']['output']>;
  groupId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  read?: Maybe<Scalars['Boolean']['output']>;
  update?: Maybe<Scalars['Boolean']['output']>;
  write?: Maybe<Scalars['Boolean']['output']>;
};

export type PermissionMaxOrderByAggregateInput = {
  delete?: InputMaybe<SortOrder>;
  groupId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  read?: InputMaybe<SortOrder>;
  update?: InputMaybe<SortOrder>;
  write?: InputMaybe<SortOrder>;
};

export type PermissionMinAggregate = {
  __typename?: 'PermissionMinAggregate';
  delete?: Maybe<Scalars['Boolean']['output']>;
  groupId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  read?: Maybe<Scalars['Boolean']['output']>;
  update?: Maybe<Scalars['Boolean']['output']>;
  write?: Maybe<Scalars['Boolean']['output']>;
};

export type PermissionMinOrderByAggregateInput = {
  delete?: InputMaybe<SortOrder>;
  groupId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  read?: InputMaybe<SortOrder>;
  update?: InputMaybe<SortOrder>;
  write?: InputMaybe<SortOrder>;
};

export type PermissionNullableRelationFilter = {
  is?: InputMaybe<PermissionWhereInput>;
  isNot?: InputMaybe<PermissionWhereInput>;
};

export type PermissionOrderByWithAggregationInput = {
  _avg?: InputMaybe<PermissionAvgOrderByAggregateInput>;
  _count?: InputMaybe<PermissionCountOrderByAggregateInput>;
  _max?: InputMaybe<PermissionMaxOrderByAggregateInput>;
  _min?: InputMaybe<PermissionMinOrderByAggregateInput>;
  _sum?: InputMaybe<PermissionSumOrderByAggregateInput>;
  delete?: InputMaybe<SortOrder>;
  groupId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  read?: InputMaybe<SortOrder>;
  update?: InputMaybe<SortOrder>;
  write?: InputMaybe<SortOrder>;
};

export type PermissionOrderByWithRelationInput = {
  delete?: InputMaybe<SortOrder>;
  group?: InputMaybe<GroupOrderByWithRelationInput>;
  groupId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  read?: InputMaybe<SortOrder>;
  update?: InputMaybe<SortOrder>;
  write?: InputMaybe<SortOrder>;
};

export enum PermissionScalarFieldEnum {
  Delete = 'delete',
  GroupId = 'groupId',
  Id = 'id',
  Read = 'read',
  Update = 'update',
  Write = 'write'
}

export type PermissionScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<PermissionScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<PermissionScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<PermissionScalarWhereWithAggregatesInput>>;
  delete?: InputMaybe<BoolWithAggregatesFilter>;
  groupId?: InputMaybe<IntWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  read?: InputMaybe<BoolWithAggregatesFilter>;
  update?: InputMaybe<BoolWithAggregatesFilter>;
  write?: InputMaybe<BoolWithAggregatesFilter>;
};

export type PermissionSumAggregate = {
  __typename?: 'PermissionSumAggregate';
  groupId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type PermissionSumOrderByAggregateInput = {
  groupId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type PermissionUncheckedCreateInput = {
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  groupId: Scalars['Int']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  read?: InputMaybe<Scalars['Boolean']['input']>;
  update?: InputMaybe<Scalars['Boolean']['input']>;
  write?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PermissionUncheckedCreateNestedOneWithoutGroupInput = {
  connect?: InputMaybe<PermissionWhereUniqueInput>;
  connectOrCreate?: InputMaybe<PermissionCreateOrConnectWithoutGroupInput>;
  create?: InputMaybe<PermissionUncheckedCreateWithoutGroupInput>;
};

export type PermissionUncheckedCreateWithoutGroupInput = {
  delete?: InputMaybe<Scalars['Boolean']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  read?: InputMaybe<Scalars['Boolean']['input']>;
  update?: InputMaybe<Scalars['Boolean']['input']>;
  write?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PermissionUncheckedUpdateInput = {
  delete?: InputMaybe<BoolFieldUpdateOperationsInput>;
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  read?: InputMaybe<BoolFieldUpdateOperationsInput>;
  update?: InputMaybe<BoolFieldUpdateOperationsInput>;
  write?: InputMaybe<BoolFieldUpdateOperationsInput>;
};

export type PermissionUncheckedUpdateManyInput = {
  delete?: InputMaybe<BoolFieldUpdateOperationsInput>;
  groupId?: InputMaybe<IntFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  read?: InputMaybe<BoolFieldUpdateOperationsInput>;
  update?: InputMaybe<BoolFieldUpdateOperationsInput>;
  write?: InputMaybe<BoolFieldUpdateOperationsInput>;
};

export type PermissionUncheckedUpdateOneWithoutGroupNestedInput = {
  connect?: InputMaybe<PermissionWhereUniqueInput>;
  connectOrCreate?: InputMaybe<PermissionCreateOrConnectWithoutGroupInput>;
  create?: InputMaybe<PermissionUncheckedCreateWithoutGroupInput>;
  delete?: InputMaybe<PermissionWhereInput>;
  disconnect?: InputMaybe<PermissionWhereInput>;
  update?: InputMaybe<PermissionUncheckedUpdateWithoutGroupInput>;
  upsert?: InputMaybe<PermissionUpsertWithoutGroupInput>;
};

export type PermissionUncheckedUpdateWithoutGroupInput = {
  delete?: InputMaybe<BoolFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  read?: InputMaybe<BoolFieldUpdateOperationsInput>;
  update?: InputMaybe<BoolFieldUpdateOperationsInput>;
  write?: InputMaybe<BoolFieldUpdateOperationsInput>;
};

export type PermissionUpsertWithoutGroupInput = {
  create: PermissionUncheckedCreateWithoutGroupInput;
  update: PermissionUncheckedUpdateWithoutGroupInput;
  where?: InputMaybe<PermissionWhereInput>;
};

export type PermissionWhereInput = {
  AND?: InputMaybe<Array<PermissionWhereInput>>;
  NOT?: InputMaybe<Array<PermissionWhereInput>>;
  OR?: InputMaybe<Array<PermissionWhereInput>>;
  delete?: InputMaybe<BoolFilter>;
  group?: InputMaybe<GroupRelationFilter>;
  groupId?: InputMaybe<IntFilter>;
  id?: InputMaybe<IntFilter>;
  read?: InputMaybe<BoolFilter>;
  update?: InputMaybe<BoolFilter>;
  write?: InputMaybe<BoolFilter>;
};

export type PermissionWhereUniqueInput = {
  AND?: InputMaybe<Array<PermissionWhereInput>>;
  NOT?: InputMaybe<Array<PermissionWhereInput>>;
  OR?: InputMaybe<Array<PermissionWhereInput>>;
  delete?: InputMaybe<BoolFilter>;
  group?: InputMaybe<GroupRelationFilter>;
  groupId?: InputMaybe<Scalars['Int']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  read?: InputMaybe<BoolFilter>;
  update?: InputMaybe<BoolFilter>;
  write?: InputMaybe<BoolFilter>;
};

export type PipefyProject = {
  __typename?: 'PipefyProject';
  id: Scalars['Int']['output'];
  pipefyId: Scalars['Int']['output'];
  project: Project;
  projectId: Scalars['Int']['output'];
};

export type PipefyProjectAvgAggregate = {
  __typename?: 'PipefyProjectAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  pipefyId?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type PipefyProjectAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type PipefyProjectCountAggregate = {
  __typename?: 'PipefyProjectCountAggregate';
  _all: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  pipefyId: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
};

export type PipefyProjectCountOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type PipefyProjectCreateManyInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  pipefyId: Scalars['Int']['input'];
  projectId: Scalars['Int']['input'];
};

export type PipefyProjectCreateManyProjectInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  pipefyId: Scalars['Int']['input'];
};

export type PipefyProjectCreateManyProjectInputEnvelope = {
  data: Array<PipefyProjectCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PipefyProjectCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<PipefyProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PipefyProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<PipefyProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<PipefyProjectCreateManyProjectInputEnvelope>;
};

export type PipefyProjectCreateOrConnectWithoutProjectInput = {
  create: PipefyProjectUncheckedCreateWithoutProjectInput;
  where: PipefyProjectWhereUniqueInput;
};

export type PipefyProjectCreateWithoutProjectInput = {
  pipefyId: Scalars['Int']['input'];
};

export type PipefyProjectGroupBy = {
  __typename?: 'PipefyProjectGroupBy';
  _avg?: Maybe<PipefyProjectAvgAggregate>;
  _count?: Maybe<PipefyProjectCountAggregate>;
  _max?: Maybe<PipefyProjectMaxAggregate>;
  _min?: Maybe<PipefyProjectMinAggregate>;
  _sum?: Maybe<PipefyProjectSumAggregate>;
  id: Scalars['Int']['output'];
  pipefyId: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
};

export type PipefyProjectListRelationFilter = {
  every?: InputMaybe<PipefyProjectWhereInput>;
  none?: InputMaybe<PipefyProjectWhereInput>;
  some?: InputMaybe<PipefyProjectWhereInput>;
};

export type PipefyProjectMaxAggregate = {
  __typename?: 'PipefyProjectMaxAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  pipefyId?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type PipefyProjectMaxOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type PipefyProjectMinAggregate = {
  __typename?: 'PipefyProjectMinAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  pipefyId?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type PipefyProjectMinOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type PipefyProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type PipefyProjectOrderByWithAggregationInput = {
  _avg?: InputMaybe<PipefyProjectAvgOrderByAggregateInput>;
  _count?: InputMaybe<PipefyProjectCountOrderByAggregateInput>;
  _max?: InputMaybe<PipefyProjectMaxOrderByAggregateInput>;
  _min?: InputMaybe<PipefyProjectMinOrderByAggregateInput>;
  _sum?: InputMaybe<PipefyProjectSumOrderByAggregateInput>;
  id?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type PipefyProjectOrderByWithRelationInput = {
  id?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
};

export enum PipefyProjectScalarFieldEnum {
  Id = 'id',
  PipefyId = 'pipefyId',
  ProjectId = 'projectId'
}

export type PipefyProjectScalarWhereInput = {
  AND?: InputMaybe<Array<PipefyProjectScalarWhereInput>>;
  NOT?: InputMaybe<Array<PipefyProjectScalarWhereInput>>;
  OR?: InputMaybe<Array<PipefyProjectScalarWhereInput>>;
  id?: InputMaybe<IntFilter>;
  pipefyId?: InputMaybe<IntFilter>;
  projectId?: InputMaybe<IntFilter>;
};

export type PipefyProjectScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<PipefyProjectScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<PipefyProjectScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<PipefyProjectScalarWhereWithAggregatesInput>>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  pipefyId?: InputMaybe<IntWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
};

export type PipefyProjectSumAggregate = {
  __typename?: 'PipefyProjectSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  pipefyId?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type PipefyProjectSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type PipefyProjectUncheckedCreateInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  pipefyId: Scalars['Int']['input'];
  projectId: Scalars['Int']['input'];
};

export type PipefyProjectUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<PipefyProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PipefyProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<PipefyProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<PipefyProjectCreateManyProjectInputEnvelope>;
};

export type PipefyProjectUncheckedCreateWithoutProjectInput = {
  id?: InputMaybe<Scalars['Int']['input']>;
  pipefyId: Scalars['Int']['input'];
};

export type PipefyProjectUncheckedUpdateInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  pipefyId?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type PipefyProjectUncheckedUpdateManyInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  pipefyId?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type PipefyProjectUncheckedUpdateManyWithoutProjectInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  pipefyId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type PipefyProjectUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<PipefyProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PipefyProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<PipefyProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<PipefyProjectCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<PipefyProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<PipefyProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<PipefyProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<PipefyProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<PipefyProjectUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<PipefyProjectUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<PipefyProjectUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type PipefyProjectUncheckedUpdateWithoutProjectInput = {
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  pipefyId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type PipefyProjectUpdateManyWithWhereWithoutProjectInput = {
  data: PipefyProjectUncheckedUpdateManyWithoutProjectInput;
  where: PipefyProjectScalarWhereInput;
};

export type PipefyProjectUpdateWithWhereUniqueWithoutProjectInput = {
  data: PipefyProjectUncheckedUpdateWithoutProjectInput;
  where: PipefyProjectWhereUniqueInput;
};

export type PipefyProjectUpsertWithWhereUniqueWithoutProjectInput = {
  create: PipefyProjectUncheckedCreateWithoutProjectInput;
  update: PipefyProjectUncheckedUpdateWithoutProjectInput;
  where: PipefyProjectWhereUniqueInput;
};

export type PipefyProjectWhereInput = {
  AND?: InputMaybe<Array<PipefyProjectWhereInput>>;
  NOT?: InputMaybe<Array<PipefyProjectWhereInput>>;
  OR?: InputMaybe<Array<PipefyProjectWhereInput>>;
  id?: InputMaybe<IntFilter>;
  pipefyId?: InputMaybe<IntFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
};

export type PipefyProjectWhereUniqueInput = {
  AND?: InputMaybe<Array<PipefyProjectWhereInput>>;
  NOT?: InputMaybe<Array<PipefyProjectWhereInput>>;
  OR?: InputMaybe<Array<PipefyProjectWhereInput>>;
  id?: InputMaybe<Scalars['Int']['input']>;
  pipefyId?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<Scalars['Int']['input']>;
};

export type PrimitiveFields = {
  __typename?: 'PrimitiveFields';
  _count?: Maybe<PrimitiveFieldsCount>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  field: Array<Field>;
  fieldType: FieldType;
  id: Scalars['Int']['output'];
};


export type PrimitiveFieldsFieldArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldWhereInput>;
};

export type PrimitiveFieldsAvgAggregate = {
  __typename?: 'PrimitiveFieldsAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type PrimitiveFieldsAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type PrimitiveFieldsCount = {
  __typename?: 'PrimitiveFieldsCount';
  field: Scalars['Int']['output'];
};


export type PrimitiveFieldsCountFieldArgs = {
  where?: InputMaybe<FieldWhereInput>;
};

export type PrimitiveFieldsCountAggregate = {
  __typename?: 'PrimitiveFieldsCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  fieldType: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
};

export type PrimitiveFieldsCountOrderByAggregateInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type PrimitiveFieldsCreateManyInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type PrimitiveFieldsCreateNestedOneWithoutFieldInput = {
  connect?: InputMaybe<PrimitiveFieldsWhereUniqueInput>;
  connectOrCreate?: InputMaybe<PrimitiveFieldsCreateOrConnectWithoutFieldInput>;
  create?: InputMaybe<PrimitiveFieldsUncheckedCreateWithoutFieldInput>;
};

export type PrimitiveFieldsCreateOrConnectWithoutFieldInput = {
  create: PrimitiveFieldsUncheckedCreateWithoutFieldInput;
  where: PrimitiveFieldsWhereUniqueInput;
};

export type PrimitiveFieldsGroupBy = {
  __typename?: 'PrimitiveFieldsGroupBy';
  _avg?: Maybe<PrimitiveFieldsAvgAggregate>;
  _count?: Maybe<PrimitiveFieldsCountAggregate>;
  _max?: Maybe<PrimitiveFieldsMaxAggregate>;
  _min?: Maybe<PrimitiveFieldsMinAggregate>;
  _sum?: Maybe<PrimitiveFieldsSumAggregate>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  fieldType: FieldType;
  id: Scalars['Int']['output'];
};

export type PrimitiveFieldsMaxAggregate = {
  __typename?: 'PrimitiveFieldsMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  fieldType?: Maybe<FieldType>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type PrimitiveFieldsMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type PrimitiveFieldsMinAggregate = {
  __typename?: 'PrimitiveFieldsMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  fieldType?: Maybe<FieldType>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type PrimitiveFieldsMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type PrimitiveFieldsOrderByWithAggregationInput = {
  _avg?: InputMaybe<PrimitiveFieldsAvgOrderByAggregateInput>;
  _count?: InputMaybe<PrimitiveFieldsCountOrderByAggregateInput>;
  _max?: InputMaybe<PrimitiveFieldsMaxOrderByAggregateInput>;
  _min?: InputMaybe<PrimitiveFieldsMinOrderByAggregateInput>;
  _sum?: InputMaybe<PrimitiveFieldsSumOrderByAggregateInput>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type PrimitiveFieldsOrderByWithRelationInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  field?: InputMaybe<FieldOrderByRelationAggregateInput>;
  fieldType?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type PrimitiveFieldsRelationFilter = {
  is?: InputMaybe<PrimitiveFieldsWhereInput>;
  isNot?: InputMaybe<PrimitiveFieldsWhereInput>;
};

export enum PrimitiveFieldsScalarFieldEnum {
  Content = 'content',
  CreatedAt = 'createdAt',
  FieldType = 'fieldType',
  Id = 'id'
}

export type PrimitiveFieldsScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<PrimitiveFieldsScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<PrimitiveFieldsScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<PrimitiveFieldsScalarWhereWithAggregatesInput>>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  fieldType?: InputMaybe<EnumFieldTypeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
};

export type PrimitiveFieldsSumAggregate = {
  __typename?: 'PrimitiveFieldsSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type PrimitiveFieldsSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type PrimitiveFieldsUncheckedCreateInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  field?: InputMaybe<FieldUncheckedCreateNestedManyWithoutPrimitiveInput>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type PrimitiveFieldsUncheckedCreateWithoutFieldInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  fieldType: FieldType;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type PrimitiveFieldsUncheckedUpdateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  field?: InputMaybe<FieldUncheckedUpdateManyWithoutPrimitiveNestedInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type PrimitiveFieldsUncheckedUpdateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  fieldType?: InputMaybe<EnumFieldTypeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type PrimitiveFieldsWhereInput = {
  AND?: InputMaybe<Array<PrimitiveFieldsWhereInput>>;
  NOT?: InputMaybe<Array<PrimitiveFieldsWhereInput>>;
  OR?: InputMaybe<Array<PrimitiveFieldsWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  field?: InputMaybe<FieldListRelationFilter>;
  fieldType?: InputMaybe<EnumFieldTypeFilter>;
  id?: InputMaybe<IntFilter>;
};

export type PrimitiveFieldsWhereUniqueInput = {
  AND?: InputMaybe<Array<PrimitiveFieldsWhereInput>>;
  NOT?: InputMaybe<Array<PrimitiveFieldsWhereInput>>;
  OR?: InputMaybe<Array<PrimitiveFieldsWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  field?: InputMaybe<FieldListRelationFilter>;
  fieldType?: InputMaybe<FieldType>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type PrimitiveStreenght = {
  __typename?: 'PrimitiveStreenght';
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdUser?: Maybe<User>;
  id: Scalars['Int']['output'];
  jobFunction: JobFunction;
  jobFunctionId: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
  updatedUser?: Maybe<User>;
};


export type PrimitiveStreenghtCreatedUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type PrimitiveStreenghtUpdatedUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};

export type PrimitiveStreenghtAvgAggregate = {
  __typename?: 'PrimitiveStreenghtAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  jobFunctionId?: Maybe<Scalars['Float']['output']>;
};

export type PrimitiveStreenghtAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  jobFunctionId?: InputMaybe<SortOrder>;
};

export type PrimitiveStreenghtCountAggregate = {
  __typename?: 'PrimitiveStreenghtCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  jobFunctionId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type PrimitiveStreenghtCountOrderByAggregateInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  jobFunctionId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type PrimitiveStreenghtCreateManyCreatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  jobFunctionId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type PrimitiveStreenghtCreateManyCreatedUserInputEnvelope = {
  data: Array<PrimitiveStreenghtCreateManyCreatedUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PrimitiveStreenghtCreateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  jobFunctionId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type PrimitiveStreenghtCreateManyJobFunctionInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type PrimitiveStreenghtCreateManyJobFunctionInputEnvelope = {
  data: Array<PrimitiveStreenghtCreateManyJobFunctionInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PrimitiveStreenghtCreateManyUpdatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  jobFunctionId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type PrimitiveStreenghtCreateManyUpdatedUserInputEnvelope = {
  data: Array<PrimitiveStreenghtCreateManyUpdatedUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type PrimitiveStreenghtCreateOrConnectWithoutCreatedUserInput = {
  create: PrimitiveStreenghtUncheckedCreateWithoutCreatedUserInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtCreateOrConnectWithoutJobFunctionInput = {
  create: PrimitiveStreenghtUncheckedCreateWithoutJobFunctionInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtCreateOrConnectWithoutUpdatedUserInput = {
  create: PrimitiveStreenghtUncheckedCreateWithoutUpdatedUserInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtCreateWithoutCreatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  jobFunction: JobFunctionCreateNestedOneWithoutPrimitiveStrengthInput;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedUser?: InputMaybe<UserCreateNestedOneWithoutPrimitiveStreenghtUpdatedByInput>;
};

export type PrimitiveStreenghtCreateWithoutJobFunctionInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdUser?: InputMaybe<UserCreateNestedOneWithoutPrimitiveStreenghtCreatedByInput>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedUser?: InputMaybe<UserCreateNestedOneWithoutPrimitiveStreenghtUpdatedByInput>;
};

export type PrimitiveStreenghtCreateWithoutUpdatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdUser?: InputMaybe<UserCreateNestedOneWithoutPrimitiveStreenghtCreatedByInput>;
  jobFunction: JobFunctionCreateNestedOneWithoutPrimitiveStrengthInput;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type PrimitiveStreenghtGroupBy = {
  __typename?: 'PrimitiveStreenghtGroupBy';
  _avg?: Maybe<PrimitiveStreenghtAvgAggregate>;
  _count?: Maybe<PrimitiveStreenghtCountAggregate>;
  _max?: Maybe<PrimitiveStreenghtMaxAggregate>;
  _min?: Maybe<PrimitiveStreenghtMinAggregate>;
  _sum?: Maybe<PrimitiveStreenghtSumAggregate>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  id: Scalars['Int']['output'];
  jobFunctionId: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type PrimitiveStreenghtListRelationFilter = {
  every?: InputMaybe<PrimitiveStreenghtWhereInput>;
  none?: InputMaybe<PrimitiveStreenghtWhereInput>;
  some?: InputMaybe<PrimitiveStreenghtWhereInput>;
};

export type PrimitiveStreenghtMaxAggregate = {
  __typename?: 'PrimitiveStreenghtMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  jobFunctionId?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type PrimitiveStreenghtMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  jobFunctionId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type PrimitiveStreenghtMinAggregate = {
  __typename?: 'PrimitiveStreenghtMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  jobFunctionId?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type PrimitiveStreenghtMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  jobFunctionId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type PrimitiveStreenghtOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type PrimitiveStreenghtOrderByWithAggregationInput = {
  _avg?: InputMaybe<PrimitiveStreenghtAvgOrderByAggregateInput>;
  _count?: InputMaybe<PrimitiveStreenghtCountOrderByAggregateInput>;
  _max?: InputMaybe<PrimitiveStreenghtMaxOrderByAggregateInput>;
  _min?: InputMaybe<PrimitiveStreenghtMinOrderByAggregateInput>;
  _sum?: InputMaybe<PrimitiveStreenghtSumOrderByAggregateInput>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  id?: InputMaybe<SortOrder>;
  jobFunctionId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
};

export type PrimitiveStreenghtOrderByWithRelationInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdUser?: InputMaybe<UserOrderByWithRelationInput>;
  id?: InputMaybe<SortOrder>;
  jobFunction?: InputMaybe<JobFunctionOrderByWithRelationInput>;
  jobFunctionId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
  updatedUser?: InputMaybe<UserOrderByWithRelationInput>;
};

export enum PrimitiveStreenghtScalarFieldEnum {
  Content = 'content',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Id = 'id',
  JobFunctionId = 'jobFunctionId',
  UpdatedAt = 'updatedAt',
  UpdatedBy = 'updatedBy'
}

export type PrimitiveStreenghtScalarWhereInput = {
  AND?: InputMaybe<Array<PrimitiveStreenghtScalarWhereInput>>;
  NOT?: InputMaybe<Array<PrimitiveStreenghtScalarWhereInput>>;
  OR?: InputMaybe<Array<PrimitiveStreenghtScalarWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  id?: InputMaybe<IntFilter>;
  jobFunctionId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
};

export type PrimitiveStreenghtScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<PrimitiveStreenghtScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<PrimitiveStreenghtScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<PrimitiveStreenghtScalarWhereWithAggregatesInput>>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  jobFunctionId?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export type PrimitiveStreenghtSumAggregate = {
  __typename?: 'PrimitiveStreenghtSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  jobFunctionId?: Maybe<Scalars['Int']['output']>;
};

export type PrimitiveStreenghtSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  jobFunctionId?: InputMaybe<SortOrder>;
};

export type PrimitiveStreenghtUncheckedCreateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  jobFunctionId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput = {
  connect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PrimitiveStreenghtCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<PrimitiveStreenghtCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<PrimitiveStreenghtCreateManyCreatedUserInputEnvelope>;
};

export type PrimitiveStreenghtUncheckedCreateNestedManyWithoutJobFunctionInput = {
  connect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PrimitiveStreenghtCreateOrConnectWithoutJobFunctionInput>>;
  create?: InputMaybe<Array<PrimitiveStreenghtCreateWithoutJobFunctionInput>>;
  createMany?: InputMaybe<PrimitiveStreenghtCreateManyJobFunctionInputEnvelope>;
};

export type PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput = {
  connect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PrimitiveStreenghtCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<PrimitiveStreenghtCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<PrimitiveStreenghtCreateManyUpdatedUserInputEnvelope>;
};

export type PrimitiveStreenghtUncheckedCreateWithoutCreatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  jobFunctionId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type PrimitiveStreenghtUncheckedCreateWithoutJobFunctionInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type PrimitiveStreenghtUncheckedCreateWithoutUpdatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  jobFunctionId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type PrimitiveStreenghtUncheckedUpdateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PrimitiveStreenghtUncheckedUpdateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PrimitiveStreenghtUncheckedUpdateManyWithoutCreatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PrimitiveStreenghtUncheckedUpdateManyWithoutCreatedUserNestedInput = {
  connect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PrimitiveStreenghtCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<PrimitiveStreenghtCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<PrimitiveStreenghtCreateManyCreatedUserInputEnvelope>;
  delete?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<PrimitiveStreenghtScalarWhereInput>>;
  disconnect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  set?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  update?: InputMaybe<Array<PrimitiveStreenghtUpdateWithWhereUniqueWithoutCreatedUserInput>>;
  updateMany?: InputMaybe<Array<PrimitiveStreenghtUpdateManyWithWhereWithoutCreatedUserInput>>;
  upsert?: InputMaybe<Array<PrimitiveStreenghtUpsertWithWhereUniqueWithoutCreatedUserInput>>;
};

export type PrimitiveStreenghtUncheckedUpdateManyWithoutJobFunctionInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PrimitiveStreenghtUncheckedUpdateManyWithoutJobFunctionNestedInput = {
  connect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PrimitiveStreenghtCreateOrConnectWithoutJobFunctionInput>>;
  create?: InputMaybe<Array<PrimitiveStreenghtCreateWithoutJobFunctionInput>>;
  createMany?: InputMaybe<PrimitiveStreenghtCreateManyJobFunctionInputEnvelope>;
  delete?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<PrimitiveStreenghtScalarWhereInput>>;
  disconnect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  set?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  update?: InputMaybe<Array<PrimitiveStreenghtUpdateWithWhereUniqueWithoutJobFunctionInput>>;
  updateMany?: InputMaybe<Array<PrimitiveStreenghtUpdateManyWithWhereWithoutJobFunctionInput>>;
  upsert?: InputMaybe<Array<PrimitiveStreenghtUpsertWithWhereUniqueWithoutJobFunctionInput>>;
};

export type PrimitiveStreenghtUncheckedUpdateManyWithoutUpdatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type PrimitiveStreenghtUncheckedUpdateManyWithoutUpdatedUserNestedInput = {
  connect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PrimitiveStreenghtCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<PrimitiveStreenghtCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<PrimitiveStreenghtCreateManyUpdatedUserInputEnvelope>;
  delete?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<PrimitiveStreenghtScalarWhereInput>>;
  disconnect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  set?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  update?: InputMaybe<Array<PrimitiveStreenghtUpdateWithWhereUniqueWithoutUpdatedUserInput>>;
  updateMany?: InputMaybe<Array<PrimitiveStreenghtUpdateManyWithWhereWithoutUpdatedUserInput>>;
  upsert?: InputMaybe<Array<PrimitiveStreenghtUpsertWithWhereUniqueWithoutUpdatedUserInput>>;
};

export type PrimitiveStreenghtUncheckedUpdateWithoutCreatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PrimitiveStreenghtUncheckedUpdateWithoutJobFunctionInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type PrimitiveStreenghtUncheckedUpdateWithoutUpdatedUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type PrimitiveStreenghtUpdateManyWithWhereWithoutCreatedUserInput = {
  data: PrimitiveStreenghtUncheckedUpdateManyWithoutCreatedUserInput;
  where: PrimitiveStreenghtScalarWhereInput;
};

export type PrimitiveStreenghtUpdateManyWithWhereWithoutJobFunctionInput = {
  data: PrimitiveStreenghtUncheckedUpdateManyWithoutJobFunctionInput;
  where: PrimitiveStreenghtScalarWhereInput;
};

export type PrimitiveStreenghtUpdateManyWithWhereWithoutUpdatedUserInput = {
  data: PrimitiveStreenghtUncheckedUpdateManyWithoutUpdatedUserInput;
  where: PrimitiveStreenghtScalarWhereInput;
};

export type PrimitiveStreenghtUpdateManyWithoutCreatedUserNestedInput = {
  connect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PrimitiveStreenghtCreateOrConnectWithoutCreatedUserInput>>;
  create?: InputMaybe<Array<PrimitiveStreenghtCreateWithoutCreatedUserInput>>;
  createMany?: InputMaybe<PrimitiveStreenghtCreateManyCreatedUserInputEnvelope>;
  delete?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<PrimitiveStreenghtScalarWhereInput>>;
  disconnect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  set?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  update?: InputMaybe<Array<PrimitiveStreenghtUpdateWithWhereUniqueWithoutCreatedUserInput>>;
  updateMany?: InputMaybe<Array<PrimitiveStreenghtUpdateManyWithWhereWithoutCreatedUserInput>>;
  upsert?: InputMaybe<Array<PrimitiveStreenghtUpsertWithWhereUniqueWithoutCreatedUserInput>>;
};

export type PrimitiveStreenghtUpdateManyWithoutUpdatedUserNestedInput = {
  connect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<PrimitiveStreenghtCreateOrConnectWithoutUpdatedUserInput>>;
  create?: InputMaybe<Array<PrimitiveStreenghtCreateWithoutUpdatedUserInput>>;
  createMany?: InputMaybe<PrimitiveStreenghtCreateManyUpdatedUserInputEnvelope>;
  delete?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<PrimitiveStreenghtScalarWhereInput>>;
  disconnect?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  set?: InputMaybe<Array<PrimitiveStreenghtWhereUniqueInput>>;
  update?: InputMaybe<Array<PrimitiveStreenghtUpdateWithWhereUniqueWithoutUpdatedUserInput>>;
  updateMany?: InputMaybe<Array<PrimitiveStreenghtUpdateManyWithWhereWithoutUpdatedUserInput>>;
  upsert?: InputMaybe<Array<PrimitiveStreenghtUpsertWithWhereUniqueWithoutUpdatedUserInput>>;
};

export type PrimitiveStreenghtUpdateWithWhereUniqueWithoutCreatedUserInput = {
  data: PrimitiveStreenghtUncheckedUpdateWithoutCreatedUserInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtUpdateWithWhereUniqueWithoutJobFunctionInput = {
  data: PrimitiveStreenghtUncheckedUpdateWithoutJobFunctionInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtUpdateWithWhereUniqueWithoutUpdatedUserInput = {
  data: PrimitiveStreenghtUncheckedUpdateWithoutUpdatedUserInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtUpsertWithWhereUniqueWithoutCreatedUserInput = {
  create: PrimitiveStreenghtUncheckedCreateWithoutCreatedUserInput;
  update: PrimitiveStreenghtUncheckedUpdateWithoutCreatedUserInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtUpsertWithWhereUniqueWithoutJobFunctionInput = {
  create: PrimitiveStreenghtUncheckedCreateWithoutJobFunctionInput;
  update: PrimitiveStreenghtUncheckedUpdateWithoutJobFunctionInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtUpsertWithWhereUniqueWithoutUpdatedUserInput = {
  create: PrimitiveStreenghtUncheckedCreateWithoutUpdatedUserInput;
  update: PrimitiveStreenghtUncheckedUpdateWithoutUpdatedUserInput;
  where: PrimitiveStreenghtWhereUniqueInput;
};

export type PrimitiveStreenghtWhereInput = {
  AND?: InputMaybe<Array<PrimitiveStreenghtWhereInput>>;
  NOT?: InputMaybe<Array<PrimitiveStreenghtWhereInput>>;
  OR?: InputMaybe<Array<PrimitiveStreenghtWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdUser?: InputMaybe<UserNullableRelationFilter>;
  id?: InputMaybe<IntFilter>;
  jobFunction?: InputMaybe<JobFunctionRelationFilter>;
  jobFunctionId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedUser?: InputMaybe<UserNullableRelationFilter>;
};

export type PrimitiveStreenghtWhereUniqueInput = {
  AND?: InputMaybe<Array<PrimitiveStreenghtWhereInput>>;
  NOT?: InputMaybe<Array<PrimitiveStreenghtWhereInput>>;
  OR?: InputMaybe<Array<PrimitiveStreenghtWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdUser?: InputMaybe<UserNullableRelationFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  jobFunction?: InputMaybe<JobFunctionRelationFilter>;
  jobFunctionId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedUser?: InputMaybe<UserNullableRelationFilter>;
};

export type Project = {
  __typename?: 'Project';
  HistoryFlag: Array<HistoryFlag>;
  _count?: Maybe<ProjectCount>;
  address: Scalars['String']['output'];
  archives: Array<Archives>;
  city: Scalars['String']['output'];
  client?: Maybe<Client>;
  clientId?: Maybe<Scalars['Int']['output']>;
  cnpj: Scalars['String']['output'];
  commentProject: Array<CommentProject>;
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  createdByUser?: Maybe<User>;
  enable: Scalars['Boolean']['output'];
  fantasyName: Scalars['String']['output'];
  historyMonthlyRecurringRevenue: Array<HistoryMonthlyRecurringRevenue>;
  historyStep: Array<HistoryStep>;
  id: Scalars['Int']['output'];
  initialDateContract: Scalars['DateTimeISO']['output'];
  invest: Array<Invest>;
  name: Scalars['String']['output'];
  okrObjectiveProject: Array<OkrObjectiveProject>;
  pipefy: Array<PipefyProject>;
  profileUrl: Scalars['String']['output'];
  projectManager: Array<ProjectManager>;
  projectsBoards: Array<ProjectsBoards>;
  sla: Array<ServiceLevelAgreement>;
  state: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
  updatedByUser?: Maybe<User>;
  viewedCommentProject: Array<ViewedCommentProject>;
};


export type ProjectHistoryFlagArgs = {
  cursor?: InputMaybe<HistoryFlagWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryFlagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryFlagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type ProjectArchivesArgs = {
  cursor?: InputMaybe<ArchivesWhereUniqueInput>;
  distinct?: InputMaybe<Array<ArchivesScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ArchivesOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchivesWhereInput>;
};


export type ProjectClientArgs = {
  where?: InputMaybe<ClientWhereInput>;
};


export type ProjectCommentProjectArgs = {
  cursor?: InputMaybe<CommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<CommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type ProjectCreatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type ProjectHistoryMonthlyRecurringRevenueArgs = {
  cursor?: InputMaybe<HistoryMonthlyRecurringRevenueWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryMonthlyRecurringRevenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type ProjectHistoryStepArgs = {
  cursor?: InputMaybe<HistoryStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type ProjectInvestArgs = {
  cursor?: InputMaybe<InvestWhereUniqueInput>;
  distinct?: InputMaybe<Array<InvestScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<InvestOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<InvestWhereInput>;
};


export type ProjectOkrObjectiveProjectArgs = {
  cursor?: InputMaybe<OkrObjectiveProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrObjectiveProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrObjectiveProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type ProjectPipefyArgs = {
  cursor?: InputMaybe<PipefyProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<PipefyProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PipefyProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type ProjectProjectManagerArgs = {
  cursor?: InputMaybe<ProjectManagerWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectManagerScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectManagerOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type ProjectProjectsBoardsArgs = {
  cursor?: InputMaybe<ProjectsBoardsWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectsBoardsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectsBoardsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type ProjectSlaArgs = {
  cursor?: InputMaybe<ServiceLevelAgreementWhereUniqueInput>;
  distinct?: InputMaybe<Array<ServiceLevelAgreementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ServiceLevelAgreementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type ProjectUpdatedByUserArgs = {
  where?: InputMaybe<UserWhereInput>;
};


export type ProjectViewedCommentProjectArgs = {
  cursor?: InputMaybe<ViewedCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ViewedCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ViewedCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};

export type ProjectAvgAggregate = {
  __typename?: 'ProjectAvgAggregate';
  clientId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type ProjectAvgOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type ProjectCount = {
  __typename?: 'ProjectCount';
  HistoryFlag: Scalars['Int']['output'];
  archives: Scalars['Int']['output'];
  commentProject: Scalars['Int']['output'];
  historyMonthlyRecurringRevenue: Scalars['Int']['output'];
  historyStep: Scalars['Int']['output'];
  invest: Scalars['Int']['output'];
  okrObjectiveProject: Scalars['Int']['output'];
  pipefy: Scalars['Int']['output'];
  projectManager: Scalars['Int']['output'];
  projectsBoards: Scalars['Int']['output'];
  sla: Scalars['Int']['output'];
  viewedCommentProject: Scalars['Int']['output'];
};


export type ProjectCountHistoryFlagArgs = {
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type ProjectCountArchivesArgs = {
  where?: InputMaybe<ArchivesWhereInput>;
};


export type ProjectCountCommentProjectArgs = {
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type ProjectCountHistoryMonthlyRecurringRevenueArgs = {
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type ProjectCountHistoryStepArgs = {
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type ProjectCountInvestArgs = {
  where?: InputMaybe<InvestWhereInput>;
};


export type ProjectCountOkrObjectiveProjectArgs = {
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type ProjectCountPipefyArgs = {
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type ProjectCountProjectManagerArgs = {
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type ProjectCountProjectsBoardsArgs = {
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type ProjectCountSlaArgs = {
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type ProjectCountViewedCommentProjectArgs = {
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};

export type ProjectCountAggregate = {
  __typename?: 'ProjectCountAggregate';
  _all: Scalars['Int']['output'];
  address: Scalars['Int']['output'];
  city: Scalars['Int']['output'];
  clientId: Scalars['Int']['output'];
  cnpj: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  createdBy: Scalars['Int']['output'];
  enable: Scalars['Int']['output'];
  fantasyName: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  initialDateContract: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  profileUrl: Scalars['Int']['output'];
  state: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  updatedBy: Scalars['Int']['output'];
};

export type ProjectCountOrderByAggregateInput = {
  address?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  clientId?: InputMaybe<SortOrder>;
  cnpj?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  enable?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  profileUrl?: InputMaybe<SortOrder>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ProjectCreateManyClientInput = {
  address: Scalars['String']['input'];
  city: Scalars['String']['input'];
  cnpj: Scalars['String']['input'];
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  name: Scalars['String']['input'];
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectCreateManyClientInputEnvelope = {
  data: Array<ProjectCreateManyClientInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectCreateManyCreatedByUserInput = {
  address: Scalars['String']['input'];
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  name: Scalars['String']['input'];
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectCreateManyCreatedByUserInputEnvelope = {
  data: Array<ProjectCreateManyCreatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectCreateManyInput = {
  address: Scalars['String']['input'];
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  name: Scalars['String']['input'];
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectCreateManyUpdatedByUserInput = {
  address: Scalars['String']['input'];
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  name: Scalars['String']['input'];
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ProjectCreateManyUpdatedByUserInputEnvelope = {
  data: Array<ProjectCreateManyUpdatedByUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectCreateNestedManyWithoutClientInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutClientInput>>;
  createMany?: InputMaybe<ProjectCreateManyClientInputEnvelope>;
};

export type ProjectCreateNestedOneWithoutArchivesInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutArchivesInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutArchivesInput>;
};

export type ProjectCreateNestedOneWithoutCommentProjectInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutCommentProjectInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutCommentProjectInput>;
};

export type ProjectCreateNestedOneWithoutHistoryFlagInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutHistoryFlagInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutHistoryFlagInput>;
};

export type ProjectCreateNestedOneWithoutHistoryMonthlyRecurringRevenueInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutHistoryMonthlyRecurringRevenueInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutHistoryMonthlyRecurringRevenueInput>;
};

export type ProjectCreateNestedOneWithoutHistoryStepInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutHistoryStepInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutHistoryStepInput>;
};

export type ProjectCreateNestedOneWithoutInvestInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutInvestInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutInvestInput>;
};

export type ProjectCreateNestedOneWithoutOkrObjectiveProjectInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutOkrObjectiveProjectInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutOkrObjectiveProjectInput>;
};

export type ProjectCreateNestedOneWithoutProjectsBoardsInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutProjectsBoardsInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutProjectsBoardsInput>;
};

export type ProjectCreateNestedOneWithoutViewedCommentProjectInput = {
  connect?: InputMaybe<ProjectWhereUniqueInput>;
  connectOrCreate?: InputMaybe<ProjectCreateOrConnectWithoutViewedCommentProjectInput>;
  create?: InputMaybe<ProjectUncheckedCreateWithoutViewedCommentProjectInput>;
};

export type ProjectCreateOrConnectWithoutArchivesInput = {
  create: ProjectUncheckedCreateWithoutArchivesInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutClientInput = {
  create: ProjectUncheckedCreateWithoutClientInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutCommentProjectInput = {
  create: ProjectUncheckedCreateWithoutCommentProjectInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutCreatedByUserInput = {
  create: ProjectUncheckedCreateWithoutCreatedByUserInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutHistoryFlagInput = {
  create: ProjectUncheckedCreateWithoutHistoryFlagInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutHistoryMonthlyRecurringRevenueInput = {
  create: ProjectUncheckedCreateWithoutHistoryMonthlyRecurringRevenueInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutHistoryStepInput = {
  create: ProjectUncheckedCreateWithoutHistoryStepInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutInvestInput = {
  create: ProjectUncheckedCreateWithoutInvestInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutOkrObjectiveProjectInput = {
  create: ProjectUncheckedCreateWithoutOkrObjectiveProjectInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutProjectsBoardsInput = {
  create: ProjectUncheckedCreateWithoutProjectsBoardsInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutUpdatedByUserInput = {
  create: ProjectUncheckedCreateWithoutUpdatedByUserInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateOrConnectWithoutViewedCommentProjectInput = {
  create: ProjectUncheckedCreateWithoutViewedCommentProjectInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectCreateWithoutClientInput = {
  HistoryFlag?: InputMaybe<HistoryFlagCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutProjectCreatedByInput>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepCreateNestedManyWithoutProjectInput>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutProjectUpdatedByInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectCreateNestedManyWithoutProjectInput>;
};

export type ProjectCreateWithoutCreatedByUserInput = {
  HistoryFlag?: InputMaybe<HistoryFlagCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  client?: InputMaybe<ClientCreateNestedOneWithoutProjectInput>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepCreateNestedManyWithoutProjectInput>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedByUser?: InputMaybe<UserCreateNestedOneWithoutProjectUpdatedByInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectCreateNestedManyWithoutProjectInput>;
};

export type ProjectCreateWithoutUpdatedByUserInput = {
  HistoryFlag?: InputMaybe<HistoryFlagCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  client?: InputMaybe<ClientCreateNestedOneWithoutProjectInput>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdByUser?: InputMaybe<UserCreateNestedOneWithoutProjectCreatedByInput>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepCreateNestedManyWithoutProjectInput>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectCreateNestedManyWithoutProjectInput>;
};

export type ProjectGroupBy = {
  __typename?: 'ProjectGroupBy';
  _avg?: Maybe<ProjectAvgAggregate>;
  _count?: Maybe<ProjectCountAggregate>;
  _max?: Maybe<ProjectMaxAggregate>;
  _min?: Maybe<ProjectMinAggregate>;
  _sum?: Maybe<ProjectSumAggregate>;
  address: Scalars['String']['output'];
  city: Scalars['String']['output'];
  clientId?: Maybe<Scalars['Int']['output']>;
  cnpj: Scalars['String']['output'];
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  createdBy?: Maybe<Scalars['String']['output']>;
  enable: Scalars['Boolean']['output'];
  fantasyName: Scalars['String']['output'];
  id: Scalars['Int']['output'];
  initialDateContract: Scalars['DateTimeISO']['output'];
  name: Scalars['String']['output'];
  profileUrl: Scalars['String']['output'];
  state: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type ProjectListRelationFilter = {
  every?: InputMaybe<ProjectWhereInput>;
  none?: InputMaybe<ProjectWhereInput>;
  some?: InputMaybe<ProjectWhereInput>;
};

export type ProjectManager = {
  __typename?: 'ProjectManager';
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  project?: Maybe<Project>;
  projectId?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};


export type ProjectManagerProjectArgs = {
  where?: InputMaybe<ProjectWhereInput>;
};

export type ProjectManagerAvgAggregate = {
  __typename?: 'ProjectManagerAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type ProjectManagerAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectManagerCountAggregate = {
  __typename?: 'ProjectManagerCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type ProjectManagerCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ProjectManagerCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type ProjectManagerCreateManyProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type ProjectManagerCreateManyProjectInputEnvelope = {
  data: Array<ProjectManagerCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectManagerCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ProjectManagerWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectManagerCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ProjectManagerCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ProjectManagerCreateManyProjectInputEnvelope>;
};

export type ProjectManagerCreateOrConnectWithoutProjectInput = {
  create: ProjectManagerUncheckedCreateWithoutProjectInput;
  where: ProjectManagerWhereUniqueInput;
};

export type ProjectManagerCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type ProjectManagerGroupBy = {
  __typename?: 'ProjectManagerGroupBy';
  _avg?: Maybe<ProjectManagerAvgAggregate>;
  _count?: Maybe<ProjectManagerCountAggregate>;
  _max?: Maybe<ProjectManagerMaxAggregate>;
  _min?: Maybe<ProjectManagerMinAggregate>;
  _sum?: Maybe<ProjectManagerSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  projectId?: Maybe<Scalars['Int']['output']>;
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type ProjectManagerListRelationFilter = {
  every?: InputMaybe<ProjectManagerWhereInput>;
  none?: InputMaybe<ProjectManagerWhereInput>;
  some?: InputMaybe<ProjectManagerWhereInput>;
};

export type ProjectManagerMaxAggregate = {
  __typename?: 'ProjectManagerMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type ProjectManagerMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ProjectManagerMinAggregate = {
  __typename?: 'ProjectManagerMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type ProjectManagerMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ProjectManagerOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ProjectManagerOrderByWithAggregationInput = {
  _avg?: InputMaybe<ProjectManagerAvgOrderByAggregateInput>;
  _count?: InputMaybe<ProjectManagerCountOrderByAggregateInput>;
  _max?: InputMaybe<ProjectManagerMaxOrderByAggregateInput>;
  _min?: InputMaybe<ProjectManagerMinOrderByAggregateInput>;
  _sum?: InputMaybe<ProjectManagerSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type ProjectManagerOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrderInput>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum ProjectManagerScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  ProjectId = 'projectId',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid'
}

export type ProjectManagerScalarWhereInput = {
  AND?: InputMaybe<Array<ProjectManagerScalarWhereInput>>;
  NOT?: InputMaybe<Array<ProjectManagerScalarWhereInput>>;
  OR?: InputMaybe<Array<ProjectManagerScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  projectId?: InputMaybe<IntNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type ProjectManagerScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ProjectManagerScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ProjectManagerScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ProjectManagerScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  projectId?: InputMaybe<IntNullableWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type ProjectManagerSumAggregate = {
  __typename?: 'ProjectManagerSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type ProjectManagerSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectManagerUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  projectId?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type ProjectManagerUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ProjectManagerWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectManagerCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ProjectManagerCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ProjectManagerCreateManyProjectInputEnvelope>;
};

export type ProjectManagerUncheckedCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type ProjectManagerUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProjectManagerUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  projectId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProjectManagerUncheckedUpdateManyWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProjectManagerUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<ProjectManagerWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectManagerCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ProjectManagerCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ProjectManagerCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<ProjectManagerWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectManagerScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectManagerWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectManagerWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectManagerUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<ProjectManagerUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<ProjectManagerUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type ProjectManagerUncheckedUpdateWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProjectManagerUpdateManyWithWhereWithoutProjectInput = {
  data: ProjectManagerUncheckedUpdateManyWithoutProjectInput;
  where: ProjectManagerScalarWhereInput;
};

export type ProjectManagerUpdateWithWhereUniqueWithoutProjectInput = {
  data: ProjectManagerUncheckedUpdateWithoutProjectInput;
  where: ProjectManagerWhereUniqueInput;
};

export type ProjectManagerUpsertWithWhereUniqueWithoutProjectInput = {
  create: ProjectManagerUncheckedCreateWithoutProjectInput;
  update: ProjectManagerUncheckedUpdateWithoutProjectInput;
  where: ProjectManagerWhereUniqueInput;
};

export type ProjectManagerWhereInput = {
  AND?: InputMaybe<Array<ProjectManagerWhereInput>>;
  NOT?: InputMaybe<Array<ProjectManagerWhereInput>>;
  OR?: InputMaybe<Array<ProjectManagerWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  projectId?: InputMaybe<IntNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type ProjectManagerWhereUniqueInput = {
  AND?: InputMaybe<Array<ProjectManagerWhereInput>>;
  NOT?: InputMaybe<Array<ProjectManagerWhereInput>>;
  OR?: InputMaybe<Array<ProjectManagerWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  project?: InputMaybe<ProjectNullableRelationFilter>;
  projectId?: InputMaybe<IntNullableFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type ProjectMaxAggregate = {
  __typename?: 'ProjectMaxAggregate';
  address?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  clientId?: Maybe<Scalars['Int']['output']>;
  cnpj?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  fantasyName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  initialDateContract?: Maybe<Scalars['DateTimeISO']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  profileUrl?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type ProjectMaxOrderByAggregateInput = {
  address?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  clientId?: InputMaybe<SortOrder>;
  cnpj?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  enable?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  profileUrl?: InputMaybe<SortOrder>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ProjectMinAggregate = {
  __typename?: 'ProjectMinAggregate';
  address?: Maybe<Scalars['String']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  clientId?: Maybe<Scalars['Int']['output']>;
  cnpj?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  createdBy?: Maybe<Scalars['String']['output']>;
  enable?: Maybe<Scalars['Boolean']['output']>;
  fantasyName?: Maybe<Scalars['String']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  initialDateContract?: Maybe<Scalars['DateTimeISO']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  profileUrl?: Maybe<Scalars['String']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  updatedBy?: Maybe<Scalars['String']['output']>;
};

export type ProjectMinOrderByAggregateInput = {
  address?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  clientId?: InputMaybe<SortOrder>;
  cnpj?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrder>;
  enable?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  profileUrl?: InputMaybe<SortOrder>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrder>;
};

export type ProjectNullableRelationFilter = {
  is?: InputMaybe<ProjectWhereInput>;
  isNot?: InputMaybe<ProjectWhereInput>;
};

export type ProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ProjectOrderByWithAggregationInput = {
  _avg?: InputMaybe<ProjectAvgOrderByAggregateInput>;
  _count?: InputMaybe<ProjectCountOrderByAggregateInput>;
  _max?: InputMaybe<ProjectMaxOrderByAggregateInput>;
  _min?: InputMaybe<ProjectMinOrderByAggregateInput>;
  _sum?: InputMaybe<ProjectSumOrderByAggregateInput>;
  address?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  clientId?: InputMaybe<SortOrderInput>;
  cnpj?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  enable?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  profileUrl?: InputMaybe<SortOrder>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
};

export type ProjectOrderByWithRelationInput = {
  HistoryFlag?: InputMaybe<HistoryFlagOrderByRelationAggregateInput>;
  address?: InputMaybe<SortOrder>;
  archives?: InputMaybe<ArchivesOrderByRelationAggregateInput>;
  city?: InputMaybe<SortOrder>;
  client?: InputMaybe<ClientOrderByWithRelationInput>;
  clientId?: InputMaybe<SortOrderInput>;
  cnpj?: InputMaybe<SortOrder>;
  commentProject?: InputMaybe<CommentProjectOrderByRelationAggregateInput>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  createdBy?: InputMaybe<SortOrderInput>;
  createdByUser?: InputMaybe<UserOrderByWithRelationInput>;
  enable?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueOrderByRelationAggregateInput>;
  historyStep?: InputMaybe<HistoryStepOrderByRelationAggregateInput>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  invest?: InputMaybe<InvestOrderByRelationAggregateInput>;
  name?: InputMaybe<SortOrder>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectOrderByRelationAggregateInput>;
  pipefy?: InputMaybe<PipefyProjectOrderByRelationAggregateInput>;
  profileUrl?: InputMaybe<SortOrder>;
  projectManager?: InputMaybe<ProjectManagerOrderByRelationAggregateInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsOrderByRelationAggregateInput>;
  sla?: InputMaybe<ServiceLevelAgreementOrderByRelationAggregateInput>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  updatedBy?: InputMaybe<SortOrderInput>;
  updatedByUser?: InputMaybe<UserOrderByWithRelationInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectOrderByRelationAggregateInput>;
};

export type ProjectRelationFilter = {
  is?: InputMaybe<ProjectWhereInput>;
  isNot?: InputMaybe<ProjectWhereInput>;
};

export enum ProjectScalarFieldEnum {
  Address = 'address',
  City = 'city',
  ClientId = 'clientId',
  Cnpj = 'cnpj',
  Content = 'content',
  CreatedAt = 'createdAt',
  CreatedBy = 'createdBy',
  Enable = 'enable',
  FantasyName = 'fantasyName',
  Id = 'id',
  InitialDateContract = 'initialDateContract',
  Name = 'name',
  ProfileUrl = 'profileUrl',
  State = 'state',
  UpdatedAt = 'updatedAt',
  UpdatedBy = 'updatedBy'
}

export type ProjectScalarWhereInput = {
  AND?: InputMaybe<Array<ProjectScalarWhereInput>>;
  NOT?: InputMaybe<Array<ProjectScalarWhereInput>>;
  OR?: InputMaybe<Array<ProjectScalarWhereInput>>;
  address?: InputMaybe<StringFilter>;
  city?: InputMaybe<StringFilter>;
  clientId?: InputMaybe<IntNullableFilter>;
  cnpj?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  enable?: InputMaybe<BoolFilter>;
  fantasyName?: InputMaybe<StringFilter>;
  id?: InputMaybe<IntFilter>;
  initialDateContract?: InputMaybe<DateTimeFilter>;
  name?: InputMaybe<StringFilter>;
  profileUrl?: InputMaybe<StringFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
};

export type ProjectScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ProjectScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ProjectScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ProjectScalarWhereWithAggregatesInput>>;
  address?: InputMaybe<StringWithAggregatesFilter>;
  city?: InputMaybe<StringWithAggregatesFilter>;
  clientId?: InputMaybe<IntNullableWithAggregatesFilter>;
  cnpj?: InputMaybe<StringWithAggregatesFilter>;
  content?: InputMaybe<JsonNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  createdBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
  enable?: InputMaybe<BoolWithAggregatesFilter>;
  fantasyName?: InputMaybe<StringWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  initialDateContract?: InputMaybe<DateTimeWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  profileUrl?: InputMaybe<StringWithAggregatesFilter>;
  state?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  updatedBy?: InputMaybe<UuidNullableWithAggregatesFilter>;
};

export type ProjectSumAggregate = {
  __typename?: 'ProjectSumAggregate';
  clientId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type ProjectSumOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type ProjectUncheckedCreateInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateNestedManyWithoutClientInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutClientInput>>;
  createMany?: InputMaybe<ProjectCreateManyClientInputEnvelope>;
};

export type ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ProjectCreateManyCreatedByUserInputEnvelope>;
};

export type ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ProjectCreateManyUpdatedByUserInputEnvelope>;
};

export type ProjectUncheckedCreateWithoutArchivesInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutClientInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutCommentProjectInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutCreatedByUserInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutHistoryFlagInput = {
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutHistoryMonthlyRecurringRevenueInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutHistoryStepInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutInvestInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutOkrObjectiveProjectInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutProjectsBoardsInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutUpdatedByUserInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
};

export type ProjectUncheckedCreateWithoutViewedCommentProjectInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutProjectInput>;
  address: Scalars['String']['input'];
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutProjectInput>;
  city: Scalars['String']['input'];
  clientId?: InputMaybe<Scalars['Int']['input']>;
  cnpj: Scalars['String']['input'];
  commentProject?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutProjectInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  createdBy?: InputMaybe<Scalars['String']['input']>;
  enable?: InputMaybe<Scalars['Boolean']['input']>;
  fantasyName: Scalars['String']['input'];
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutProjectInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutProjectInput>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<Scalars['DateTimeISO']['input']>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutProjectInput>;
  name: Scalars['String']['input'];
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutProjectInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedCreateNestedManyWithoutProjectInput>;
  profileUrl?: InputMaybe<Scalars['String']['input']>;
  projectManager?: InputMaybe<ProjectManagerUncheckedCreateNestedManyWithoutProjectInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedBy?: InputMaybe<Scalars['String']['input']>;
};

export type ProjectUncheckedUpdateInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedUpdateManyWithoutProjectNestedInput>;
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  archives?: InputMaybe<ArchivesUncheckedUpdateManyWithoutProjectNestedInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  clientId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  commentProject?: InputMaybe<CommentProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutProjectNestedInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedUpdateManyWithoutProjectNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  invest?: InputMaybe<InvestUncheckedUpdateManyWithoutProjectNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  profileUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectManager?: InputMaybe<ProjectManagerUncheckedUpdateManyWithoutProjectNestedInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedUpdateManyWithoutProjectNestedInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedUpdateManyWithoutProjectNestedInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedUpdateManyWithoutProjectNestedInput>;
};

export type ProjectUncheckedUpdateManyInput = {
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  clientId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  profileUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ProjectUncheckedUpdateManyWithoutClientInput = {
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  profileUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ProjectUncheckedUpdateManyWithoutClientNestedInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutClientInput>>;
  createMany?: InputMaybe<ProjectCreateManyClientInputEnvelope>;
  delete?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectUpdateWithWhereUniqueWithoutClientInput>>;
  updateMany?: InputMaybe<Array<ProjectUpdateManyWithWhereWithoutClientInput>>;
  upsert?: InputMaybe<Array<ProjectUpsertWithWhereUniqueWithoutClientInput>>;
};

export type ProjectUncheckedUpdateManyWithoutCreatedByUserInput = {
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  clientId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  profileUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
};

export type ProjectUncheckedUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ProjectCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<ProjectUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type ProjectUncheckedUpdateManyWithoutUpdatedByUserInput = {
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  clientId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  profileUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ProjectUncheckedUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ProjectCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<ProjectUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<ProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type ProjectUncheckedUpdateWithoutClientInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedUpdateManyWithoutProjectNestedInput>;
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  archives?: InputMaybe<ArchivesUncheckedUpdateManyWithoutProjectNestedInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  commentProject?: InputMaybe<CommentProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutProjectNestedInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedUpdateManyWithoutProjectNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  invest?: InputMaybe<InvestUncheckedUpdateManyWithoutProjectNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  profileUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectManager?: InputMaybe<ProjectManagerUncheckedUpdateManyWithoutProjectNestedInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedUpdateManyWithoutProjectNestedInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedUpdateManyWithoutProjectNestedInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedUpdateManyWithoutProjectNestedInput>;
};

export type ProjectUncheckedUpdateWithoutCreatedByUserInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedUpdateManyWithoutProjectNestedInput>;
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  archives?: InputMaybe<ArchivesUncheckedUpdateManyWithoutProjectNestedInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  clientId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  commentProject?: InputMaybe<CommentProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutProjectNestedInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedUpdateManyWithoutProjectNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  invest?: InputMaybe<InvestUncheckedUpdateManyWithoutProjectNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  profileUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectManager?: InputMaybe<ProjectManagerUncheckedUpdateManyWithoutProjectNestedInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedUpdateManyWithoutProjectNestedInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedUpdateManyWithoutProjectNestedInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  updatedBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedUpdateManyWithoutProjectNestedInput>;
};

export type ProjectUncheckedUpdateWithoutUpdatedByUserInput = {
  HistoryFlag?: InputMaybe<HistoryFlagUncheckedUpdateManyWithoutProjectNestedInput>;
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  archives?: InputMaybe<ArchivesUncheckedUpdateManyWithoutProjectNestedInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  clientId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  commentProject?: InputMaybe<CommentProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  createdBy?: InputMaybe<NullableStringFieldUpdateOperationsInput>;
  enable?: InputMaybe<BoolFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutProjectNestedInput>;
  historyStep?: InputMaybe<HistoryStepUncheckedUpdateManyWithoutProjectNestedInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  invest?: InputMaybe<InvestUncheckedUpdateManyWithoutProjectNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  pipefy?: InputMaybe<PipefyProjectUncheckedUpdateManyWithoutProjectNestedInput>;
  profileUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectManager?: InputMaybe<ProjectManagerUncheckedUpdateManyWithoutProjectNestedInput>;
  projectsBoards?: InputMaybe<ProjectsBoardsUncheckedUpdateManyWithoutProjectNestedInput>;
  sla?: InputMaybe<ServiceLevelAgreementUncheckedUpdateManyWithoutProjectNestedInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedUpdateManyWithoutProjectNestedInput>;
};

export type ProjectUpdateManyWithWhereWithoutClientInput = {
  data: ProjectUncheckedUpdateManyWithoutClientInput;
  where: ProjectScalarWhereInput;
};

export type ProjectUpdateManyWithWhereWithoutCreatedByUserInput = {
  data: ProjectUncheckedUpdateManyWithoutCreatedByUserInput;
  where: ProjectScalarWhereInput;
};

export type ProjectUpdateManyWithWhereWithoutUpdatedByUserInput = {
  data: ProjectUncheckedUpdateManyWithoutUpdatedByUserInput;
  where: ProjectScalarWhereInput;
};

export type ProjectUpdateManyWithoutCreatedByUserNestedInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutCreatedByUserInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutCreatedByUserInput>>;
  createMany?: InputMaybe<ProjectCreateManyCreatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput>>;
  updateMany?: InputMaybe<Array<ProjectUpdateManyWithWhereWithoutCreatedByUserInput>>;
  upsert?: InputMaybe<Array<ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput>>;
};

export type ProjectUpdateManyWithoutUpdatedByUserNestedInput = {
  connect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectCreateOrConnectWithoutUpdatedByUserInput>>;
  create?: InputMaybe<Array<ProjectCreateWithoutUpdatedByUserInput>>;
  createMany?: InputMaybe<ProjectCreateManyUpdatedByUserInputEnvelope>;
  delete?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput>>;
  updateMany?: InputMaybe<Array<ProjectUpdateManyWithWhereWithoutUpdatedByUserInput>>;
  upsert?: InputMaybe<Array<ProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput>>;
};

export type ProjectUpdateWithWhereUniqueWithoutClientInput = {
  data: ProjectUncheckedUpdateWithoutClientInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectUpdateWithWhereUniqueWithoutCreatedByUserInput = {
  data: ProjectUncheckedUpdateWithoutCreatedByUserInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectUpdateWithWhereUniqueWithoutUpdatedByUserInput = {
  data: ProjectUncheckedUpdateWithoutUpdatedByUserInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectUpsertWithWhereUniqueWithoutClientInput = {
  create: ProjectUncheckedCreateWithoutClientInput;
  update: ProjectUncheckedUpdateWithoutClientInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectUpsertWithWhereUniqueWithoutCreatedByUserInput = {
  create: ProjectUncheckedCreateWithoutCreatedByUserInput;
  update: ProjectUncheckedUpdateWithoutCreatedByUserInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectUpsertWithWhereUniqueWithoutUpdatedByUserInput = {
  create: ProjectUncheckedCreateWithoutUpdatedByUserInput;
  update: ProjectUncheckedUpdateWithoutUpdatedByUserInput;
  where: ProjectWhereUniqueInput;
};

export type ProjectWhereInput = {
  AND?: InputMaybe<Array<ProjectWhereInput>>;
  HistoryFlag?: InputMaybe<HistoryFlagListRelationFilter>;
  NOT?: InputMaybe<Array<ProjectWhereInput>>;
  OR?: InputMaybe<Array<ProjectWhereInput>>;
  address?: InputMaybe<StringFilter>;
  archives?: InputMaybe<ArchivesListRelationFilter>;
  city?: InputMaybe<StringFilter>;
  client?: InputMaybe<ClientNullableRelationFilter>;
  clientId?: InputMaybe<IntNullableFilter>;
  cnpj?: InputMaybe<StringFilter>;
  commentProject?: InputMaybe<CommentProjectListRelationFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  enable?: InputMaybe<BoolFilter>;
  fantasyName?: InputMaybe<StringFilter>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueListRelationFilter>;
  historyStep?: InputMaybe<HistoryStepListRelationFilter>;
  id?: InputMaybe<IntFilter>;
  initialDateContract?: InputMaybe<DateTimeFilter>;
  invest?: InputMaybe<InvestListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectListRelationFilter>;
  pipefy?: InputMaybe<PipefyProjectListRelationFilter>;
  profileUrl?: InputMaybe<StringFilter>;
  projectManager?: InputMaybe<ProjectManagerListRelationFilter>;
  projectsBoards?: InputMaybe<ProjectsBoardsListRelationFilter>;
  sla?: InputMaybe<ServiceLevelAgreementListRelationFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectListRelationFilter>;
};

export type ProjectWhereUniqueInput = {
  AND?: InputMaybe<Array<ProjectWhereInput>>;
  HistoryFlag?: InputMaybe<HistoryFlagListRelationFilter>;
  NOT?: InputMaybe<Array<ProjectWhereInput>>;
  OR?: InputMaybe<Array<ProjectWhereInput>>;
  address?: InputMaybe<StringFilter>;
  archives?: InputMaybe<ArchivesListRelationFilter>;
  city?: InputMaybe<StringFilter>;
  client?: InputMaybe<ClientNullableRelationFilter>;
  clientId?: InputMaybe<IntNullableFilter>;
  cnpj?: InputMaybe<StringFilter>;
  commentProject?: InputMaybe<CommentProjectListRelationFilter>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  createdBy?: InputMaybe<UuidNullableFilter>;
  createdByUser?: InputMaybe<UserNullableRelationFilter>;
  enable?: InputMaybe<BoolFilter>;
  fantasyName?: InputMaybe<StringFilter>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueListRelationFilter>;
  historyStep?: InputMaybe<HistoryStepListRelationFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<DateTimeFilter>;
  invest?: InputMaybe<InvestListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectListRelationFilter>;
  pipefy?: InputMaybe<PipefyProjectListRelationFilter>;
  profileUrl?: InputMaybe<StringFilter>;
  projectManager?: InputMaybe<ProjectManagerListRelationFilter>;
  projectsBoards?: InputMaybe<ProjectsBoardsListRelationFilter>;
  sla?: InputMaybe<ServiceLevelAgreementListRelationFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  updatedBy?: InputMaybe<UuidNullableFilter>;
  updatedByUser?: InputMaybe<UserNullableRelationFilter>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectListRelationFilter>;
};

export type ProjectsBoards = {
  __typename?: 'ProjectsBoards';
  board: Board;
  boardId: Scalars['String']['output'];
  project: Project;
  projectId: Scalars['Int']['output'];
};

export type ProjectsBoardsAvgAggregate = {
  __typename?: 'ProjectsBoardsAvgAggregate';
  projectId?: Maybe<Scalars['Float']['output']>;
};

export type ProjectsBoardsAvgOrderByAggregateInput = {
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectsBoardsCountAggregate = {
  __typename?: 'ProjectsBoardsCountAggregate';
  _all: Scalars['Int']['output'];
  boardId: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
};

export type ProjectsBoardsCountOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectsBoardsCreateManyBoardInput = {
  projectId: Scalars['Int']['input'];
};

export type ProjectsBoardsCreateManyBoardInputEnvelope = {
  data: Array<ProjectsBoardsCreateManyBoardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectsBoardsCreateManyInput = {
  boardId: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
};

export type ProjectsBoardsCreateManyProjectInput = {
  boardId: Scalars['String']['input'];
};

export type ProjectsBoardsCreateManyProjectInputEnvelope = {
  data: Array<ProjectsBoardsCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ProjectsBoardsCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectsBoardsCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<ProjectsBoardsCreateWithoutBoardInput>>;
  createMany?: InputMaybe<ProjectsBoardsCreateManyBoardInputEnvelope>;
};

export type ProjectsBoardsCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectsBoardsCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ProjectsBoardsCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ProjectsBoardsCreateManyProjectInputEnvelope>;
};

export type ProjectsBoardsCreateOrConnectWithoutBoardInput = {
  create: ProjectsBoardsUncheckedCreateWithoutBoardInput;
  where: ProjectsBoardsWhereUniqueInput;
};

export type ProjectsBoardsCreateOrConnectWithoutProjectInput = {
  create: ProjectsBoardsUncheckedCreateWithoutProjectInput;
  where: ProjectsBoardsWhereUniqueInput;
};

export type ProjectsBoardsCreateWithoutBoardInput = {
  project: ProjectCreateNestedOneWithoutProjectsBoardsInput;
};

export type ProjectsBoardsCreateWithoutProjectInput = {
  board: BoardCreateNestedOneWithoutProjectsBoardsInput;
};

export type ProjectsBoardsGroupBy = {
  __typename?: 'ProjectsBoardsGroupBy';
  _avg?: Maybe<ProjectsBoardsAvgAggregate>;
  _count?: Maybe<ProjectsBoardsCountAggregate>;
  _max?: Maybe<ProjectsBoardsMaxAggregate>;
  _min?: Maybe<ProjectsBoardsMinAggregate>;
  _sum?: Maybe<ProjectsBoardsSumAggregate>;
  boardId: Scalars['String']['output'];
  projectId: Scalars['Int']['output'];
};

export type ProjectsBoardsListRelationFilter = {
  every?: InputMaybe<ProjectsBoardsWhereInput>;
  none?: InputMaybe<ProjectsBoardsWhereInput>;
  some?: InputMaybe<ProjectsBoardsWhereInput>;
};

export type ProjectsBoardsMaxAggregate = {
  __typename?: 'ProjectsBoardsMaxAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type ProjectsBoardsMaxOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectsBoardsMinAggregate = {
  __typename?: 'ProjectsBoardsMinAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type ProjectsBoardsMinOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectsBoardsOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ProjectsBoardsOrderByWithAggregationInput = {
  _avg?: InputMaybe<ProjectsBoardsAvgOrderByAggregateInput>;
  _count?: InputMaybe<ProjectsBoardsCountOrderByAggregateInput>;
  _max?: InputMaybe<ProjectsBoardsMaxOrderByAggregateInput>;
  _min?: InputMaybe<ProjectsBoardsMinOrderByAggregateInput>;
  _sum?: InputMaybe<ProjectsBoardsSumOrderByAggregateInput>;
  boardId?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectsBoardsOrderByWithRelationInput = {
  board?: InputMaybe<BoardOrderByWithRelationInput>;
  boardId?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectsBoardsProjectIdBoardIdCompoundUniqueInput = {
  boardId: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
};

export enum ProjectsBoardsScalarFieldEnum {
  BoardId = 'boardId',
  ProjectId = 'projectId'
}

export type ProjectsBoardsScalarWhereInput = {
  AND?: InputMaybe<Array<ProjectsBoardsScalarWhereInput>>;
  NOT?: InputMaybe<Array<ProjectsBoardsScalarWhereInput>>;
  OR?: InputMaybe<Array<ProjectsBoardsScalarWhereInput>>;
  boardId?: InputMaybe<StringFilter>;
  projectId?: InputMaybe<IntFilter>;
};

export type ProjectsBoardsScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ProjectsBoardsScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ProjectsBoardsScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ProjectsBoardsScalarWhereWithAggregatesInput>>;
  boardId?: InputMaybe<StringWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
};

export type ProjectsBoardsSumAggregate = {
  __typename?: 'ProjectsBoardsSumAggregate';
  projectId?: Maybe<Scalars['Int']['output']>;
};

export type ProjectsBoardsSumOrderByAggregateInput = {
  projectId?: InputMaybe<SortOrder>;
};

export type ProjectsBoardsUncheckedCreateInput = {
  boardId: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
};

export type ProjectsBoardsUncheckedCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectsBoardsCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<ProjectsBoardsCreateWithoutBoardInput>>;
  createMany?: InputMaybe<ProjectsBoardsCreateManyBoardInputEnvelope>;
};

export type ProjectsBoardsUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectsBoardsCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ProjectsBoardsCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ProjectsBoardsCreateManyProjectInputEnvelope>;
};

export type ProjectsBoardsUncheckedCreateWithoutBoardInput = {
  projectId: Scalars['Int']['input'];
};

export type ProjectsBoardsUncheckedCreateWithoutProjectInput = {
  boardId: Scalars['String']['input'];
};

export type ProjectsBoardsUncheckedUpdateInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ProjectsBoardsUncheckedUpdateManyInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ProjectsBoardsUncheckedUpdateManyWithoutBoardInput = {
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ProjectsBoardsUncheckedUpdateManyWithoutBoardNestedInput = {
  connect?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectsBoardsCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<ProjectsBoardsCreateWithoutBoardInput>>;
  createMany?: InputMaybe<ProjectsBoardsCreateManyBoardInputEnvelope>;
  delete?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectsBoardsScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectsBoardsUpdateWithWhereUniqueWithoutBoardInput>>;
  updateMany?: InputMaybe<Array<ProjectsBoardsUpdateManyWithWhereWithoutBoardInput>>;
  upsert?: InputMaybe<Array<ProjectsBoardsUpsertWithWhereUniqueWithoutBoardInput>>;
};

export type ProjectsBoardsUncheckedUpdateManyWithoutProjectInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProjectsBoardsUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ProjectsBoardsCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ProjectsBoardsCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ProjectsBoardsCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ProjectsBoardsScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  set?: InputMaybe<Array<ProjectsBoardsWhereUniqueInput>>;
  update?: InputMaybe<Array<ProjectsBoardsUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<ProjectsBoardsUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<ProjectsBoardsUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type ProjectsBoardsUncheckedUpdateWithoutBoardInput = {
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ProjectsBoardsUncheckedUpdateWithoutProjectInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type ProjectsBoardsUpdateManyWithWhereWithoutBoardInput = {
  data: ProjectsBoardsUncheckedUpdateManyWithoutBoardInput;
  where: ProjectsBoardsScalarWhereInput;
};

export type ProjectsBoardsUpdateManyWithWhereWithoutProjectInput = {
  data: ProjectsBoardsUncheckedUpdateManyWithoutProjectInput;
  where: ProjectsBoardsScalarWhereInput;
};

export type ProjectsBoardsUpdateWithWhereUniqueWithoutBoardInput = {
  data: ProjectsBoardsUncheckedUpdateWithoutBoardInput;
  where: ProjectsBoardsWhereUniqueInput;
};

export type ProjectsBoardsUpdateWithWhereUniqueWithoutProjectInput = {
  data: ProjectsBoardsUncheckedUpdateWithoutProjectInput;
  where: ProjectsBoardsWhereUniqueInput;
};

export type ProjectsBoardsUpsertWithWhereUniqueWithoutBoardInput = {
  create: ProjectsBoardsUncheckedCreateWithoutBoardInput;
  update: ProjectsBoardsUncheckedUpdateWithoutBoardInput;
  where: ProjectsBoardsWhereUniqueInput;
};

export type ProjectsBoardsUpsertWithWhereUniqueWithoutProjectInput = {
  create: ProjectsBoardsUncheckedCreateWithoutProjectInput;
  update: ProjectsBoardsUncheckedUpdateWithoutProjectInput;
  where: ProjectsBoardsWhereUniqueInput;
};

export type ProjectsBoardsWhereInput = {
  AND?: InputMaybe<Array<ProjectsBoardsWhereInput>>;
  NOT?: InputMaybe<Array<ProjectsBoardsWhereInput>>;
  OR?: InputMaybe<Array<ProjectsBoardsWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
};

export type ProjectsBoardsWhereUniqueInput = {
  AND?: InputMaybe<Array<ProjectsBoardsWhereInput>>;
  NOT?: InputMaybe<Array<ProjectsBoardsWhereInput>>;
  OR?: InputMaybe<Array<ProjectsBoardsWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  projectId_boardId?: InputMaybe<ProjectsBoardsProjectIdBoardIdCompoundUniqueInput>;
};

export type Qnp = {
  __typename?: 'Qnp';
  client?: Maybe<Client>;
  clientId?: Maybe<Scalars['Int']['output']>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};


export type QnpClientArgs = {
  where?: InputMaybe<ClientWhereInput>;
};

export type QnpAvgAggregate = {
  __typename?: 'QnpAvgAggregate';
  clientId?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
};

export type QnpAvgOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type QnpCountAggregate = {
  __typename?: 'QnpCountAggregate';
  _all: Scalars['Int']['output'];
  clientId: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type QnpCountOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type QnpCreateManyClientInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type QnpCreateManyClientInputEnvelope = {
  data: Array<QnpCreateManyClientInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type QnpCreateManyInput = {
  clientId?: InputMaybe<Scalars['Int']['input']>;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type QnpCreateNestedManyWithoutClientInput = {
  connect?: InputMaybe<Array<QnpWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<QnpCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<QnpCreateWithoutClientInput>>;
  createMany?: InputMaybe<QnpCreateManyClientInputEnvelope>;
};

export type QnpCreateOrConnectWithoutClientInput = {
  create: QnpUncheckedCreateWithoutClientInput;
  where: QnpWhereUniqueInput;
};

export type QnpCreateWithoutClientInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type QnpGroupBy = {
  __typename?: 'QnpGroupBy';
  _avg?: Maybe<QnpAvgAggregate>;
  _count?: Maybe<QnpCountAggregate>;
  _max?: Maybe<QnpMaxAggregate>;
  _min?: Maybe<QnpMinAggregate>;
  _sum?: Maybe<QnpSumAggregate>;
  clientId?: Maybe<Scalars['Int']['output']>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type QnpListRelationFilter = {
  every?: InputMaybe<QnpWhereInput>;
  none?: InputMaybe<QnpWhereInput>;
  some?: InputMaybe<QnpWhereInput>;
};

export type QnpMaxAggregate = {
  __typename?: 'QnpMaxAggregate';
  clientId?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type QnpMaxOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type QnpMinAggregate = {
  __typename?: 'QnpMinAggregate';
  clientId?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type QnpMinOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type QnpOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type QnpOrderByWithAggregationInput = {
  _avg?: InputMaybe<QnpAvgOrderByAggregateInput>;
  _count?: InputMaybe<QnpCountOrderByAggregateInput>;
  _max?: InputMaybe<QnpMaxOrderByAggregateInput>;
  _min?: InputMaybe<QnpMinOrderByAggregateInput>;
  _sum?: InputMaybe<QnpSumOrderByAggregateInput>;
  clientId?: InputMaybe<SortOrderInput>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type QnpOrderByWithRelationInput = {
  client?: InputMaybe<ClientOrderByWithRelationInput>;
  clientId?: InputMaybe<SortOrderInput>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum QnpScalarFieldEnum {
  ClientId = 'clientId',
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id',
  UpdatedAt = 'updatedAt'
}

export type QnpScalarWhereInput = {
  AND?: InputMaybe<Array<QnpScalarWhereInput>>;
  NOT?: InputMaybe<Array<QnpScalarWhereInput>>;
  OR?: InputMaybe<Array<QnpScalarWhereInput>>;
  clientId?: InputMaybe<IntNullableFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type QnpScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<QnpScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<QnpScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<QnpScalarWhereWithAggregatesInput>>;
  clientId?: InputMaybe<IntNullableWithAggregatesFilter>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type QnpSumAggregate = {
  __typename?: 'QnpSumAggregate';
  clientId?: Maybe<Scalars['Int']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type QnpSumOrderByAggregateInput = {
  clientId?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type QnpUncheckedCreateInput = {
  clientId?: InputMaybe<Scalars['Int']['input']>;
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type QnpUncheckedCreateNestedManyWithoutClientInput = {
  connect?: InputMaybe<Array<QnpWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<QnpCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<QnpCreateWithoutClientInput>>;
  createMany?: InputMaybe<QnpCreateManyClientInputEnvelope>;
};

export type QnpUncheckedCreateWithoutClientInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type QnpUncheckedUpdateInput = {
  clientId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type QnpUncheckedUpdateManyInput = {
  clientId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type QnpUncheckedUpdateManyWithoutClientInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type QnpUncheckedUpdateManyWithoutClientNestedInput = {
  connect?: InputMaybe<Array<QnpWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<QnpCreateOrConnectWithoutClientInput>>;
  create?: InputMaybe<Array<QnpCreateWithoutClientInput>>;
  createMany?: InputMaybe<QnpCreateManyClientInputEnvelope>;
  delete?: InputMaybe<Array<QnpWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<QnpScalarWhereInput>>;
  disconnect?: InputMaybe<Array<QnpWhereUniqueInput>>;
  set?: InputMaybe<Array<QnpWhereUniqueInput>>;
  update?: InputMaybe<Array<QnpUpdateWithWhereUniqueWithoutClientInput>>;
  updateMany?: InputMaybe<Array<QnpUpdateManyWithWhereWithoutClientInput>>;
  upsert?: InputMaybe<Array<QnpUpsertWithWhereUniqueWithoutClientInput>>;
};

export type QnpUncheckedUpdateWithoutClientInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type QnpUpdateManyWithWhereWithoutClientInput = {
  data: QnpUncheckedUpdateManyWithoutClientInput;
  where: QnpScalarWhereInput;
};

export type QnpUpdateWithWhereUniqueWithoutClientInput = {
  data: QnpUncheckedUpdateWithoutClientInput;
  where: QnpWhereUniqueInput;
};

export type QnpUpsertWithWhereUniqueWithoutClientInput = {
  create: QnpUncheckedCreateWithoutClientInput;
  update: QnpUncheckedUpdateWithoutClientInput;
  where: QnpWhereUniqueInput;
};

export type QnpWhereInput = {
  AND?: InputMaybe<Array<QnpWhereInput>>;
  NOT?: InputMaybe<Array<QnpWhereInput>>;
  OR?: InputMaybe<Array<QnpWhereInput>>;
  client?: InputMaybe<ClientNullableRelationFilter>;
  clientId?: InputMaybe<IntNullableFilter>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type QnpWhereUniqueInput = {
  AND?: InputMaybe<Array<QnpWhereInput>>;
  NOT?: InputMaybe<Array<QnpWhereInput>>;
  OR?: InputMaybe<Array<QnpWhereInput>>;
  client?: InputMaybe<ClientNullableRelationFilter>;
  clientId?: InputMaybe<Scalars['Int']['input']>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type Query = {
  __typename?: 'Query';
  acessHistoryUser?: Maybe<AcessHistoryUser>;
  acessHistoryUsers: Array<AcessHistoryUser>;
  aggregateAcessHistoryUser: AggregateAcessHistoryUser;
  aggregateArchives: AggregateArchives;
  aggregateBoard: AggregateBoard;
  aggregateBoardMenbership: AggregateBoardMenbership;
  aggregateCard: AggregateCard;
  aggregateCardAssignment: AggregateCardAssignment;
  aggregateCardComment: AggregateCardComment;
  aggregateCardMovement: AggregateCardMovement;
  aggregateCardTags: AggregateCardTags;
  aggregateClient: AggregateClient;
  aggregateColumn: AggregateColumn;
  aggregateCommentProject: AggregateCommentProject;
  aggregateCsat: AggregateCsat;
  aggregateField: AggregateField;
  aggregateFieldColumn: AggregateFieldColumn;
  aggregateFieldsValue: AggregateFieldsValue;
  aggregateGroup: AggregateGroup;
  aggregateGroupMenbership: AggregateGroupMenbership;
  aggregateGroupUser: AggregateGroupUser;
  aggregateHistoryFlag: AggregateHistoryFlag;
  aggregateHistoryMonthlyRecurringRevenue: AggregateHistoryMonthlyRecurringRevenue;
  aggregateHistoryStep: AggregateHistoryStep;
  aggregateInvest: AggregateInvest;
  aggregateJobFunction: AggregateJobFunction;
  aggregateKr: AggregateKr;
  aggregateKrCommentProject: AggregateKrCommentProject;
  aggregateNotfy: AggregateNotfy;
  aggregateObjective: AggregateObjective;
  aggregateOkrObjectiveProject: AggregateOkrObjectiveProject;
  aggregateOkrProject: AggregateOkrProject;
  aggregateOkrProjectHistory: AggregateOkrProjectHistory;
  aggregateOrganization: AggregateOrganization;
  aggregatePermission: AggregatePermission;
  aggregatePipefyProject: AggregatePipefyProject;
  aggregatePrimitiveFields: AggregatePrimitiveFields;
  aggregatePrimitiveStreenght: AggregatePrimitiveStreenght;
  aggregateProject: AggregateProject;
  aggregateProjectManager: AggregateProjectManager;
  aggregateProjectsBoards: AggregateProjectsBoards;
  aggregateQnp: AggregateQnp;
  aggregateReceivedClient: AggregateReceivedClient;
  aggregateSelfStructure: AggregateSelfStructure;
  aggregateServiceLevelAgreement: AggregateServiceLevelAgreement;
  aggregateStep: AggregateStep;
  aggregateTag: AggregateTag;
  aggregateTask: AggregateTask;
  aggregateTeam: AggregateTeam;
  aggregateThrowErrorFront: AggregateThrowErrorFront;
  aggregateTokenFirebase: AggregateTokenFirebase;
  aggregateUser: AggregateUser;
  aggregateUserJobFunction: AggregateUserJobFunction;
  aggregateUserNotfy: AggregateUserNotfy;
  aggregateUserOrganization: AggregateUserOrganization;
  aggregateUserStep: AggregateUserStep;
  aggregateUserTeam: AggregateUserTeam;
  aggregateViewedCommentProject: AggregateViewedCommentProject;
  board?: Maybe<Board>;
  boardMenbership?: Maybe<BoardMenbership>;
  boardMenberships: Array<BoardMenbership>;
  boards: Array<Board>;
  calendar: Array<OutputCalendar>;
  card?: Maybe<Card>;
  cardAssignment?: Maybe<CardAssignment>;
  cardAssignments: Array<CardAssignment>;
  cardComment?: Maybe<CardComment>;
  cardComments: Array<CardComment>;
  cardMovement?: Maybe<CardMovement>;
  cardMovements: Array<CardMovement>;
  cards: Array<Card>;
  changeCommentCustom: Scalars['Boolean']['output'];
  client?: Maybe<Client>;
  clients: Array<Client>;
  column?: Maybe<Column>;
  columns: Array<Column>;
  commentProject?: Maybe<CommentProject>;
  commentProjects: Array<CommentProject>;
  csat?: Maybe<Csat>;
  csats: Array<Csat>;
  exitInKanban: Scalars['Boolean']['output'];
  field?: Maybe<Field>;
  fieldColumn?: Maybe<FieldColumn>;
  fieldColumns: Array<FieldColumn>;
  fields: Array<Field>;
  fieldsValue?: Maybe<FieldsValue>;
  fieldsValues: Array<FieldsValue>;
  findFirstAcessHistoryUser?: Maybe<AcessHistoryUser>;
  findFirstAcessHistoryUserOrThrow?: Maybe<AcessHistoryUser>;
  findFirstArchives?: Maybe<Archives>;
  findFirstArchivesOrThrow?: Maybe<Archives>;
  findFirstBoard?: Maybe<Board>;
  findFirstBoardMenbership?: Maybe<BoardMenbership>;
  findFirstBoardMenbershipOrThrow?: Maybe<BoardMenbership>;
  findFirstBoardOrThrow?: Maybe<Board>;
  findFirstCard?: Maybe<Card>;
  findFirstCardAssignment?: Maybe<CardAssignment>;
  findFirstCardAssignmentOrThrow?: Maybe<CardAssignment>;
  findFirstCardComment?: Maybe<CardComment>;
  findFirstCardCommentOrThrow?: Maybe<CardComment>;
  findFirstCardMovement?: Maybe<CardMovement>;
  findFirstCardMovementOrThrow?: Maybe<CardMovement>;
  findFirstCardOrThrow?: Maybe<Card>;
  findFirstCardTags?: Maybe<CardTags>;
  findFirstCardTagsOrThrow?: Maybe<CardTags>;
  findFirstClient?: Maybe<Client>;
  findFirstClientOrThrow?: Maybe<Client>;
  findFirstColumn?: Maybe<Column>;
  findFirstColumnOrThrow?: Maybe<Column>;
  findFirstCommentProject?: Maybe<CommentProject>;
  findFirstCommentProjectOrThrow?: Maybe<CommentProject>;
  findFirstCsat?: Maybe<Csat>;
  findFirstCsatOrThrow?: Maybe<Csat>;
  findFirstField?: Maybe<Field>;
  findFirstFieldColumn?: Maybe<FieldColumn>;
  findFirstFieldColumnOrThrow?: Maybe<FieldColumn>;
  findFirstFieldOrThrow?: Maybe<Field>;
  findFirstFieldsValue?: Maybe<FieldsValue>;
  findFirstFieldsValueOrThrow?: Maybe<FieldsValue>;
  findFirstGroup?: Maybe<Group>;
  findFirstGroupMenbership?: Maybe<GroupMenbership>;
  findFirstGroupMenbershipOrThrow?: Maybe<GroupMenbership>;
  findFirstGroupOrThrow?: Maybe<Group>;
  findFirstGroupUser?: Maybe<GroupUser>;
  findFirstGroupUserOrThrow?: Maybe<GroupUser>;
  findFirstHistoryFlag?: Maybe<HistoryFlag>;
  findFirstHistoryFlagOrThrow?: Maybe<HistoryFlag>;
  findFirstHistoryMonthlyRecurringRevenue?: Maybe<HistoryMonthlyRecurringRevenue>;
  findFirstHistoryMonthlyRecurringRevenueOrThrow?: Maybe<HistoryMonthlyRecurringRevenue>;
  findFirstHistoryStep?: Maybe<HistoryStep>;
  findFirstHistoryStepOrThrow?: Maybe<HistoryStep>;
  findFirstInvest?: Maybe<Invest>;
  findFirstInvestOrThrow?: Maybe<Invest>;
  findFirstJobFunction?: Maybe<JobFunction>;
  findFirstJobFunctionOrThrow?: Maybe<JobFunction>;
  findFirstKr?: Maybe<Kr>;
  findFirstKrCommentProject?: Maybe<KrCommentProject>;
  findFirstKrCommentProjectOrThrow?: Maybe<KrCommentProject>;
  findFirstKrOrThrow?: Maybe<Kr>;
  findFirstNotfy?: Maybe<Notfy>;
  findFirstNotfyOrThrow?: Maybe<Notfy>;
  findFirstObjective?: Maybe<Objective>;
  findFirstObjectiveOrThrow?: Maybe<Objective>;
  findFirstOkrObjectiveProject?: Maybe<OkrObjectiveProject>;
  findFirstOkrObjectiveProjectOrThrow?: Maybe<OkrObjectiveProject>;
  findFirstOkrProject?: Maybe<OkrProject>;
  findFirstOkrProjectHistory?: Maybe<OkrProjectHistory>;
  findFirstOkrProjectHistoryOrThrow?: Maybe<OkrProjectHistory>;
  findFirstOkrProjectOrThrow?: Maybe<OkrProject>;
  findFirstOrganization?: Maybe<Organization>;
  findFirstOrganizationOrThrow?: Maybe<Organization>;
  findFirstPermission?: Maybe<Permission>;
  findFirstPermissionOrThrow?: Maybe<Permission>;
  findFirstPipefyProject?: Maybe<PipefyProject>;
  findFirstPipefyProjectOrThrow?: Maybe<PipefyProject>;
  findFirstPrimitiveFields?: Maybe<PrimitiveFields>;
  findFirstPrimitiveFieldsOrThrow?: Maybe<PrimitiveFields>;
  findFirstPrimitiveStreenght?: Maybe<PrimitiveStreenght>;
  findFirstPrimitiveStreenghtOrThrow?: Maybe<PrimitiveStreenght>;
  findFirstProject?: Maybe<Project>;
  findFirstProjectManager?: Maybe<ProjectManager>;
  findFirstProjectManagerOrThrow?: Maybe<ProjectManager>;
  findFirstProjectOrThrow?: Maybe<Project>;
  findFirstProjectsBoards?: Maybe<ProjectsBoards>;
  findFirstProjectsBoardsOrThrow?: Maybe<ProjectsBoards>;
  findFirstQnp?: Maybe<Qnp>;
  findFirstQnpOrThrow?: Maybe<Qnp>;
  findFirstReceivedClient?: Maybe<ReceivedClient>;
  findFirstReceivedClientOrThrow?: Maybe<ReceivedClient>;
  findFirstSelfStructure?: Maybe<SelfStructure>;
  findFirstSelfStructureOrThrow?: Maybe<SelfStructure>;
  findFirstServiceLevelAgreement?: Maybe<ServiceLevelAgreement>;
  findFirstServiceLevelAgreementOrThrow?: Maybe<ServiceLevelAgreement>;
  findFirstStep?: Maybe<Step>;
  findFirstStepOrThrow?: Maybe<Step>;
  findFirstTag?: Maybe<Tag>;
  findFirstTagOrThrow?: Maybe<Tag>;
  findFirstTask?: Maybe<Task>;
  findFirstTaskOrThrow?: Maybe<Task>;
  findFirstTeam?: Maybe<Team>;
  findFirstTeamOrThrow?: Maybe<Team>;
  findFirstThrowErrorFront?: Maybe<ThrowErrorFront>;
  findFirstThrowErrorFrontOrThrow?: Maybe<ThrowErrorFront>;
  findFirstTokenFirebase?: Maybe<TokenFirebase>;
  findFirstTokenFirebaseOrThrow?: Maybe<TokenFirebase>;
  findFirstUser?: Maybe<User>;
  findFirstUserJobFunction?: Maybe<UserJobFunction>;
  findFirstUserJobFunctionOrThrow?: Maybe<UserJobFunction>;
  findFirstUserNotfy?: Maybe<UserNotfy>;
  findFirstUserNotfyOrThrow?: Maybe<UserNotfy>;
  findFirstUserOrThrow?: Maybe<User>;
  findFirstUserOrganization?: Maybe<UserOrganization>;
  findFirstUserOrganizationOrThrow?: Maybe<UserOrganization>;
  findFirstUserStep?: Maybe<UserStep>;
  findFirstUserStepOrThrow?: Maybe<UserStep>;
  findFirstUserTeam?: Maybe<UserTeam>;
  findFirstUserTeamOrThrow?: Maybe<UserTeam>;
  findFirstViewedCommentProject?: Maybe<ViewedCommentProject>;
  findFirstViewedCommentProjectOrThrow?: Maybe<ViewedCommentProject>;
  findManyArchives: Array<Archives>;
  findManyCardTags: Array<CardTags>;
  findManyPrimitiveFields: Array<PrimitiveFields>;
  findManyProjectsBoards: Array<ProjectsBoards>;
  findUniqueArchives?: Maybe<Archives>;
  findUniqueArchivesOrThrow?: Maybe<Archives>;
  findUniqueCardInHistoryComponent: FindUniqueCardInHistoryComponentOutput;
  findUniqueCardTags?: Maybe<CardTags>;
  findUniqueCardTagsOrThrow?: Maybe<CardTags>;
  findUniquePrimitiveFields?: Maybe<PrimitiveFields>;
  findUniquePrimitiveFieldsOrThrow?: Maybe<PrimitiveFields>;
  findUniqueProjectsBoards?: Maybe<ProjectsBoards>;
  findUniqueProjectsBoardsOrThrow?: Maybe<ProjectsBoards>;
  getAcessHistoryUser?: Maybe<AcessHistoryUser>;
  getBoard?: Maybe<Board>;
  getBoardMenbership?: Maybe<BoardMenbership>;
  getCard?: Maybe<Card>;
  getCardAssignment?: Maybe<CardAssignment>;
  getCardComment?: Maybe<CardComment>;
  getCardMovement?: Maybe<CardMovement>;
  getClient?: Maybe<Client>;
  getColumn?: Maybe<Column>;
  getCommentProject?: Maybe<CommentProject>;
  getCsat?: Maybe<Csat>;
  getField?: Maybe<Field>;
  getFieldColumn?: Maybe<FieldColumn>;
  getFieldsValue?: Maybe<FieldsValue>;
  getGroup?: Maybe<Group>;
  getGroupMenbership?: Maybe<GroupMenbership>;
  getGroupUser?: Maybe<GroupUser>;
  getHistoryFlag?: Maybe<HistoryFlag>;
  getHistoryMonthlyRecurringRevenue?: Maybe<HistoryMonthlyRecurringRevenue>;
  getHistoryStep?: Maybe<HistoryStep>;
  getInvest?: Maybe<Invest>;
  getJobFunction?: Maybe<JobFunction>;
  getKr?: Maybe<Kr>;
  getKrCommentProject?: Maybe<KrCommentProject>;
  getNotfy?: Maybe<Notfy>;
  getObjective?: Maybe<Objective>;
  getOkrObjectiveProject?: Maybe<OkrObjectiveProject>;
  getOkrProject?: Maybe<OkrProject>;
  getOkrProjectHistory?: Maybe<OkrProjectHistory>;
  getOrganization?: Maybe<Organization>;
  getPermission?: Maybe<Permission>;
  getPipefyProject?: Maybe<PipefyProject>;
  getPrimitiveStreenght?: Maybe<PrimitiveStreenght>;
  getProject?: Maybe<Project>;
  getProjectManager?: Maybe<ProjectManager>;
  getQnp?: Maybe<Qnp>;
  getReceivedClient?: Maybe<ReceivedClient>;
  getSelfStructure?: Maybe<SelfStructure>;
  getServiceLevelAgreement?: Maybe<ServiceLevelAgreement>;
  getStep?: Maybe<Step>;
  getTag?: Maybe<Tag>;
  getTask?: Maybe<Task>;
  getTeam?: Maybe<Team>;
  getThrowErrorFront?: Maybe<ThrowErrorFront>;
  getTokenFirebase?: Maybe<TokenFirebase>;
  getUser?: Maybe<User>;
  getUserJobFunction?: Maybe<UserJobFunction>;
  getUserNotfy?: Maybe<UserNotfy>;
  getUserOrganization?: Maybe<UserOrganization>;
  getUserStep?: Maybe<UserStep>;
  getUserTeam?: Maybe<UserTeam>;
  getViewedCommentProject?: Maybe<ViewedCommentProject>;
  group?: Maybe<Group>;
  groupByAcessHistoryUser: Array<AcessHistoryUserGroupBy>;
  groupByArchives: Array<ArchivesGroupBy>;
  groupByBoard: Array<BoardGroupBy>;
  groupByBoardMenbership: Array<BoardMenbershipGroupBy>;
  groupByCard: Array<CardGroupBy>;
  groupByCardAssignment: Array<CardAssignmentGroupBy>;
  groupByCardComment: Array<CardCommentGroupBy>;
  groupByCardMovement: Array<CardMovementGroupBy>;
  groupByCardTags: Array<CardTagsGroupBy>;
  groupByClient: Array<ClientGroupBy>;
  groupByColumn: Array<ColumnGroupBy>;
  groupByCommentProject: Array<CommentProjectGroupBy>;
  groupByCsat: Array<CsatGroupBy>;
  groupByField: Array<FieldGroupBy>;
  groupByFieldColumn: Array<FieldColumnGroupBy>;
  groupByFieldsValue: Array<FieldsValueGroupBy>;
  groupByGroup: Array<GroupGroupBy>;
  groupByGroupMenbership: Array<GroupMenbershipGroupBy>;
  groupByGroupUser: Array<GroupUserGroupBy>;
  groupByHistoryFlag: Array<HistoryFlagGroupBy>;
  groupByHistoryMonthlyRecurringRevenue: Array<HistoryMonthlyRecurringRevenueGroupBy>;
  groupByHistoryStep: Array<HistoryStepGroupBy>;
  groupByInvest: Array<InvestGroupBy>;
  groupByJobFunction: Array<JobFunctionGroupBy>;
  groupByKr: Array<KrGroupBy>;
  groupByKrCommentProject: Array<KrCommentProjectGroupBy>;
  groupByNotfy: Array<NotfyGroupBy>;
  groupByObjective: Array<ObjectiveGroupBy>;
  groupByOkrObjectiveProject: Array<OkrObjectiveProjectGroupBy>;
  groupByOkrProject: Array<OkrProjectGroupBy>;
  groupByOkrProjectHistory: Array<OkrProjectHistoryGroupBy>;
  groupByOrganization: Array<OrganizationGroupBy>;
  groupByPermission: Array<PermissionGroupBy>;
  groupByPipefyProject: Array<PipefyProjectGroupBy>;
  groupByPrimitiveFields: Array<PrimitiveFieldsGroupBy>;
  groupByPrimitiveStreenght: Array<PrimitiveStreenghtGroupBy>;
  groupByProject: Array<ProjectGroupBy>;
  groupByProjectManager: Array<ProjectManagerGroupBy>;
  groupByProjectsBoards: Array<ProjectsBoardsGroupBy>;
  groupByQnp: Array<QnpGroupBy>;
  groupByReceivedClient: Array<ReceivedClientGroupBy>;
  groupBySelfStructure: Array<SelfStructureGroupBy>;
  groupByServiceLevelAgreement: Array<ServiceLevelAgreementGroupBy>;
  groupByStep: Array<StepGroupBy>;
  groupByTag: Array<TagGroupBy>;
  groupByTask: Array<TaskGroupBy>;
  groupByTeam: Array<TeamGroupBy>;
  groupByThrowErrorFront: Array<ThrowErrorFrontGroupBy>;
  groupByTokenFirebase: Array<TokenFirebaseGroupBy>;
  groupByUser: Array<UserGroupBy>;
  groupByUserJobFunction: Array<UserJobFunctionGroupBy>;
  groupByUserNotfy: Array<UserNotfyGroupBy>;
  groupByUserOrganization: Array<UserOrganizationGroupBy>;
  groupByUserStep: Array<UserStepGroupBy>;
  groupByUserTeam: Array<UserTeamGroupBy>;
  groupByViewedCommentProject: Array<ViewedCommentProjectGroupBy>;
  groupMenbership?: Maybe<GroupMenbership>;
  groupMenberships: Array<GroupMenbership>;
  groupUser?: Maybe<GroupUser>;
  groupUsers: Array<GroupUser>;
  groups: Array<Group>;
  historyFlag?: Maybe<HistoryFlag>;
  historyFlags: Array<HistoryFlag>;
  historyMonthlyRecurringRevenue?: Maybe<HistoryMonthlyRecurringRevenue>;
  historyMonthlyRecurringRevenues: Array<HistoryMonthlyRecurringRevenue>;
  historyStep?: Maybe<HistoryStep>;
  historySteps: Array<HistoryStep>;
  home: OutputHome;
  homeGameTeam: Array<OutputHomeGameTeam>;
  invest?: Maybe<Invest>;
  invests: Array<Invest>;
  jobFunction?: Maybe<JobFunction>;
  jobFunctions: Array<JobFunction>;
  joinInKanban: Scalars['Boolean']['output'];
  kr?: Maybe<Kr>;
  krCommentProject?: Maybe<KrCommentProject>;
  krCommentProjects: Array<KrCommentProject>;
  krs: Array<Kr>;
  monthCalendar: Array<OutputCalendar>;
  notfies: Array<Notfy>;
  notfy?: Maybe<Notfy>;
  objective?: Maybe<Objective>;
  objectives: Array<Objective>;
  okrObjectiveProject?: Maybe<OkrObjectiveProject>;
  okrObjectiveProjects: Array<OkrObjectiveProject>;
  okrProject?: Maybe<OkrProject>;
  okrProjectHistories: Array<OkrProjectHistory>;
  okrProjectHistory?: Maybe<OkrProjectHistory>;
  okrProjects: Array<OkrProject>;
  organization?: Maybe<Organization>;
  organizations: Array<Organization>;
  permission?: Maybe<Permission>;
  permissions: Array<Permission>;
  pipefyProject?: Maybe<PipefyProject>;
  pipefyProjects: Array<PipefyProject>;
  primitiveStreenght?: Maybe<PrimitiveStreenght>;
  primitiveStreenghts: Array<PrimitiveStreenght>;
  project?: Maybe<Project>;
  projectManager?: Maybe<ProjectManager>;
  projectManagers: Array<ProjectManager>;
  projects: Array<Project>;
  qnp?: Maybe<Qnp>;
  qnps: Array<Qnp>;
  receivedClient?: Maybe<ReceivedClient>;
  receivedClients: Array<ReceivedClient>;
  selfStructure?: Maybe<SelfStructure>;
  selfStructures: Array<SelfStructure>;
  selfTemplate: OutputSelfTemplate;
  serviceLevelAgreement?: Maybe<ServiceLevelAgreement>;
  serviceLevelAgreements: Array<ServiceLevelAgreement>;
  step?: Maybe<Step>;
  steps: Array<Step>;
  tag?: Maybe<Tag>;
  tags: Array<Tag>;
  task?: Maybe<Task>;
  tasks: Array<Task>;
  team?: Maybe<Team>;
  teams: Array<Team>;
  throwErrorFront?: Maybe<ThrowErrorFront>;
  throwErrorFronts: Array<ThrowErrorFront>;
  tokenFirebase?: Maybe<TokenFirebase>;
  tokenFirebases: Array<TokenFirebase>;
  user: Scalars['Boolean']['output'];
  userJobFunction?: Maybe<UserJobFunction>;
  userJobFunctions: Array<UserJobFunction>;
  userNotfies: Array<UserNotfy>;
  userNotfy?: Maybe<UserNotfy>;
  userOrganization?: Maybe<UserOrganization>;
  userOrganizations: Array<UserOrganization>;
  userStep?: Maybe<UserStep>;
  userSteps: Array<UserStep>;
  userTeam?: Maybe<UserTeam>;
  userTeams: Array<UserTeam>;
  users: Array<User>;
  viewedCommentProject?: Maybe<ViewedCommentProject>;
  viewedCommentProjects: Array<ViewedCommentProject>;
};


export type QueryAcessHistoryUserArgs = {
  where: AcessHistoryUserWhereUniqueInput;
};


export type QueryAcessHistoryUsersArgs = {
  cursor?: InputMaybe<AcessHistoryUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<AcessHistoryUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<AcessHistoryUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type QueryAggregateAcessHistoryUserArgs = {
  cursor?: InputMaybe<AcessHistoryUserWhereUniqueInput>;
  orderBy?: InputMaybe<Array<AcessHistoryUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type QueryAggregateArchivesArgs = {
  cursor?: InputMaybe<ArchivesWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ArchivesOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchivesWhereInput>;
};


export type QueryAggregateBoardArgs = {
  cursor?: InputMaybe<BoardWhereUniqueInput>;
  orderBy?: InputMaybe<Array<BoardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardWhereInput>;
};


export type QueryAggregateBoardMenbershipArgs = {
  cursor?: InputMaybe<BoardMenbershipWhereUniqueInput>;
  orderBy?: InputMaybe<Array<BoardMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type QueryAggregateCardArgs = {
  cursor?: InputMaybe<CardWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardWhereInput>;
};


export type QueryAggregateCardAssignmentArgs = {
  cursor?: InputMaybe<CardAssignmentWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CardAssignmentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type QueryAggregateCardCommentArgs = {
  cursor?: InputMaybe<CardCommentWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CardCommentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardCommentWhereInput>;
};


export type QueryAggregateCardMovementArgs = {
  cursor?: InputMaybe<CardMovementWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type QueryAggregateCardTagsArgs = {
  cursor?: InputMaybe<CardTagsWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CardTagsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardTagsWhereInput>;
};


export type QueryAggregateClientArgs = {
  cursor?: InputMaybe<ClientWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ClientWhereInput>;
};


export type QueryAggregateColumnArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type QueryAggregateCommentProjectArgs = {
  cursor?: InputMaybe<CommentProjectWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type QueryAggregateCsatArgs = {
  cursor?: InputMaybe<CsatWhereUniqueInput>;
  orderBy?: InputMaybe<Array<CsatOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CsatWhereInput>;
};


export type QueryAggregateFieldArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  orderBy?: InputMaybe<Array<FieldOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldWhereInput>;
};


export type QueryAggregateFieldColumnArgs = {
  cursor?: InputMaybe<FieldColumnWhereUniqueInput>;
  orderBy?: InputMaybe<Array<FieldColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type QueryAggregateFieldsValueArgs = {
  cursor?: InputMaybe<FieldsValueWhereUniqueInput>;
  orderBy?: InputMaybe<Array<FieldsValueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type QueryAggregateGroupArgs = {
  cursor?: InputMaybe<GroupWhereUniqueInput>;
  orderBy?: InputMaybe<Array<GroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupWhereInput>;
};


export type QueryAggregateGroupMenbershipArgs = {
  cursor?: InputMaybe<GroupMenbershipWhereUniqueInput>;
  orderBy?: InputMaybe<Array<GroupMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type QueryAggregateGroupUserArgs = {
  cursor?: InputMaybe<GroupUserWhereUniqueInput>;
  orderBy?: InputMaybe<Array<GroupUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupUserWhereInput>;
};


export type QueryAggregateHistoryFlagArgs = {
  cursor?: InputMaybe<HistoryFlagWhereUniqueInput>;
  orderBy?: InputMaybe<Array<HistoryFlagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type QueryAggregateHistoryMonthlyRecurringRevenueArgs = {
  cursor?: InputMaybe<HistoryMonthlyRecurringRevenueWhereUniqueInput>;
  orderBy?: InputMaybe<Array<HistoryMonthlyRecurringRevenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type QueryAggregateHistoryStepArgs = {
  cursor?: InputMaybe<HistoryStepWhereUniqueInput>;
  orderBy?: InputMaybe<Array<HistoryStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type QueryAggregateInvestArgs = {
  cursor?: InputMaybe<InvestWhereUniqueInput>;
  orderBy?: InputMaybe<Array<InvestOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<InvestWhereInput>;
};


export type QueryAggregateJobFunctionArgs = {
  cursor?: InputMaybe<JobFunctionWhereUniqueInput>;
  orderBy?: InputMaybe<Array<JobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobFunctionWhereInput>;
};


export type QueryAggregateKrArgs = {
  cursor?: InputMaybe<KrWhereUniqueInput>;
  orderBy?: InputMaybe<Array<KrOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrWhereInput>;
};


export type QueryAggregateKrCommentProjectArgs = {
  cursor?: InputMaybe<KrCommentProjectWhereUniqueInput>;
  orderBy?: InputMaybe<Array<KrCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type QueryAggregateNotfyArgs = {
  cursor?: InputMaybe<NotfyWhereUniqueInput>;
  orderBy?: InputMaybe<Array<NotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotfyWhereInput>;
};


export type QueryAggregateObjectiveArgs = {
  cursor?: InputMaybe<ObjectiveWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ObjectiveOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type QueryAggregateOkrObjectiveProjectArgs = {
  cursor?: InputMaybe<OkrObjectiveProjectWhereUniqueInput>;
  orderBy?: InputMaybe<Array<OkrObjectiveProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type QueryAggregateOkrProjectArgs = {
  cursor?: InputMaybe<OkrProjectWhereUniqueInput>;
  orderBy?: InputMaybe<Array<OkrProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type QueryAggregateOkrProjectHistoryArgs = {
  cursor?: InputMaybe<OkrProjectHistoryWhereUniqueInput>;
  orderBy?: InputMaybe<Array<OkrProjectHistoryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type QueryAggregateOrganizationArgs = {
  cursor?: InputMaybe<OrganizationWhereUniqueInput>;
  orderBy?: InputMaybe<Array<OrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OrganizationWhereInput>;
};


export type QueryAggregatePermissionArgs = {
  cursor?: InputMaybe<PermissionWhereUniqueInput>;
  orderBy?: InputMaybe<Array<PermissionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PermissionWhereInput>;
};


export type QueryAggregatePipefyProjectArgs = {
  cursor?: InputMaybe<PipefyProjectWhereUniqueInput>;
  orderBy?: InputMaybe<Array<PipefyProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type QueryAggregatePrimitiveFieldsArgs = {
  cursor?: InputMaybe<PrimitiveFieldsWhereUniqueInput>;
  orderBy?: InputMaybe<Array<PrimitiveFieldsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveFieldsWhereInput>;
};


export type QueryAggregatePrimitiveStreenghtArgs = {
  cursor?: InputMaybe<PrimitiveStreenghtWhereUniqueInput>;
  orderBy?: InputMaybe<Array<PrimitiveStreenghtOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type QueryAggregateProjectArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryAggregateProjectManagerArgs = {
  cursor?: InputMaybe<ProjectManagerWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ProjectManagerOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type QueryAggregateProjectsBoardsArgs = {
  cursor?: InputMaybe<ProjectsBoardsWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ProjectsBoardsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type QueryAggregateQnpArgs = {
  cursor?: InputMaybe<QnpWhereUniqueInput>;
  orderBy?: InputMaybe<Array<QnpOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<QnpWhereInput>;
};


export type QueryAggregateReceivedClientArgs = {
  cursor?: InputMaybe<ReceivedClientWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ReceivedClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ReceivedClientWhereInput>;
};


export type QueryAggregateSelfStructureArgs = {
  cursor?: InputMaybe<SelfStructureWhereUniqueInput>;
  orderBy?: InputMaybe<Array<SelfStructureOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type QueryAggregateServiceLevelAgreementArgs = {
  cursor?: InputMaybe<ServiceLevelAgreementWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ServiceLevelAgreementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type QueryAggregateStepArgs = {
  cursor?: InputMaybe<StepWhereUniqueInput>;
  orderBy?: InputMaybe<Array<StepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<StepWhereInput>;
};


export type QueryAggregateTagArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  orderBy?: InputMaybe<Array<TagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagWhereInput>;
};


export type QueryAggregateTaskArgs = {
  cursor?: InputMaybe<TaskWhereUniqueInput>;
  orderBy?: InputMaybe<Array<TaskOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TaskWhereInput>;
};


export type QueryAggregateTeamArgs = {
  cursor?: InputMaybe<TeamWhereUniqueInput>;
  orderBy?: InputMaybe<Array<TeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TeamWhereInput>;
};


export type QueryAggregateThrowErrorFrontArgs = {
  cursor?: InputMaybe<ThrowErrorFrontWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ThrowErrorFrontOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThrowErrorFrontWhereInput>;
};


export type QueryAggregateTokenFirebaseArgs = {
  cursor?: InputMaybe<TokenFirebaseWhereUniqueInput>;
  orderBy?: InputMaybe<Array<TokenFirebaseOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type QueryAggregateUserArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  orderBy?: InputMaybe<Array<UserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryAggregateUserJobFunctionArgs = {
  cursor?: InputMaybe<UserJobFunctionWhereUniqueInput>;
  orderBy?: InputMaybe<Array<UserJobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type QueryAggregateUserNotfyArgs = {
  cursor?: InputMaybe<UserNotfyWhereUniqueInput>;
  orderBy?: InputMaybe<Array<UserNotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type QueryAggregateUserOrganizationArgs = {
  cursor?: InputMaybe<UserOrganizationWhereUniqueInput>;
  orderBy?: InputMaybe<Array<UserOrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type QueryAggregateUserStepArgs = {
  cursor?: InputMaybe<UserStepWhereUniqueInput>;
  orderBy?: InputMaybe<Array<UserStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserStepWhereInput>;
};


export type QueryAggregateUserTeamArgs = {
  cursor?: InputMaybe<UserTeamWhereUniqueInput>;
  orderBy?: InputMaybe<Array<UserTeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserTeamWhereInput>;
};


export type QueryAggregateViewedCommentProjectArgs = {
  cursor?: InputMaybe<ViewedCommentProjectWhereUniqueInput>;
  orderBy?: InputMaybe<Array<ViewedCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};


export type QueryBoardArgs = {
  where: BoardWhereUniqueInput;
};


export type QueryBoardMenbershipArgs = {
  where: BoardMenbershipWhereUniqueInput;
};


export type QueryBoardMenbershipsArgs = {
  cursor?: InputMaybe<BoardMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type QueryBoardsArgs = {
  cursor?: InputMaybe<BoardWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardWhereInput>;
};


export type QueryCalendarArgs = {
  data: Scalars['DateTimeISO']['input'];
};


export type QueryCardArgs = {
  where: CardWhereUniqueInput;
};


export type QueryCardAssignmentArgs = {
  where: CardAssignmentWhereUniqueInput;
};


export type QueryCardAssignmentsArgs = {
  cursor?: InputMaybe<CardAssignmentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardAssignmentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardAssignmentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type QueryCardCommentArgs = {
  where: CardCommentWhereUniqueInput;
};


export type QueryCardCommentsArgs = {
  cursor?: InputMaybe<CardCommentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardCommentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardCommentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardCommentWhereInput>;
};


export type QueryCardMovementArgs = {
  where: CardMovementWhereUniqueInput;
};


export type QueryCardMovementsArgs = {
  cursor?: InputMaybe<CardMovementWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardMovementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type QueryCardsArgs = {
  cursor?: InputMaybe<CardWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardWhereInput>;
};


export type QueryChangeCommentCustomArgs = {
  data: PayloadComment;
};


export type QueryClientArgs = {
  where: ClientWhereUniqueInput;
};


export type QueryClientsArgs = {
  cursor?: InputMaybe<ClientWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClientScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ClientWhereInput>;
};


export type QueryColumnArgs = {
  where: ColumnWhereUniqueInput;
};


export type QueryColumnsArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<ColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type QueryCommentProjectArgs = {
  where: CommentProjectWhereUniqueInput;
};


export type QueryCommentProjectsArgs = {
  cursor?: InputMaybe<CommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<CommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type QueryCsatArgs = {
  where: CsatWhereUniqueInput;
};


export type QueryCsatsArgs = {
  cursor?: InputMaybe<CsatWhereUniqueInput>;
  distinct?: InputMaybe<Array<CsatScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CsatOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CsatWhereInput>;
};


export type QueryFieldArgs = {
  where: FieldWhereUniqueInput;
};


export type QueryFieldColumnArgs = {
  where: FieldColumnWhereUniqueInput;
};


export type QueryFieldColumnsArgs = {
  cursor?: InputMaybe<FieldColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type QueryFieldsArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldWhereInput>;
};


export type QueryFieldsValueArgs = {
  where: FieldsValueWhereUniqueInput;
};


export type QueryFieldsValuesArgs = {
  cursor?: InputMaybe<FieldsValueWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldsValueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldsValueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type QueryFindFirstAcessHistoryUserArgs = {
  cursor?: InputMaybe<AcessHistoryUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<AcessHistoryUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<AcessHistoryUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type QueryFindFirstAcessHistoryUserOrThrowArgs = {
  cursor?: InputMaybe<AcessHistoryUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<AcessHistoryUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<AcessHistoryUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type QueryFindFirstArchivesArgs = {
  cursor?: InputMaybe<ArchivesWhereUniqueInput>;
  distinct?: InputMaybe<Array<ArchivesScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ArchivesOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchivesWhereInput>;
};


export type QueryFindFirstArchivesOrThrowArgs = {
  cursor?: InputMaybe<ArchivesWhereUniqueInput>;
  distinct?: InputMaybe<Array<ArchivesScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ArchivesOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchivesWhereInput>;
};


export type QueryFindFirstBoardArgs = {
  cursor?: InputMaybe<BoardWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardWhereInput>;
};


export type QueryFindFirstBoardMenbershipArgs = {
  cursor?: InputMaybe<BoardMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type QueryFindFirstBoardMenbershipOrThrowArgs = {
  cursor?: InputMaybe<BoardMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type QueryFindFirstBoardOrThrowArgs = {
  cursor?: InputMaybe<BoardWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardWhereInput>;
};


export type QueryFindFirstCardArgs = {
  cursor?: InputMaybe<CardWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardWhereInput>;
};


export type QueryFindFirstCardAssignmentArgs = {
  cursor?: InputMaybe<CardAssignmentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardAssignmentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardAssignmentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type QueryFindFirstCardAssignmentOrThrowArgs = {
  cursor?: InputMaybe<CardAssignmentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardAssignmentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardAssignmentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type QueryFindFirstCardCommentArgs = {
  cursor?: InputMaybe<CardCommentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardCommentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardCommentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardCommentWhereInput>;
};


export type QueryFindFirstCardCommentOrThrowArgs = {
  cursor?: InputMaybe<CardCommentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardCommentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardCommentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardCommentWhereInput>;
};


export type QueryFindFirstCardMovementArgs = {
  cursor?: InputMaybe<CardMovementWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardMovementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type QueryFindFirstCardMovementOrThrowArgs = {
  cursor?: InputMaybe<CardMovementWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardMovementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type QueryFindFirstCardOrThrowArgs = {
  cursor?: InputMaybe<CardWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardWhereInput>;
};


export type QueryFindFirstCardTagsArgs = {
  cursor?: InputMaybe<CardTagsWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardTagsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardTagsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardTagsWhereInput>;
};


export type QueryFindFirstCardTagsOrThrowArgs = {
  cursor?: InputMaybe<CardTagsWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardTagsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardTagsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardTagsWhereInput>;
};


export type QueryFindFirstClientArgs = {
  cursor?: InputMaybe<ClientWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClientScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ClientWhereInput>;
};


export type QueryFindFirstClientOrThrowArgs = {
  cursor?: InputMaybe<ClientWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClientScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ClientWhereInput>;
};


export type QueryFindFirstColumnArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<ColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type QueryFindFirstColumnOrThrowArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<ColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type QueryFindFirstCommentProjectArgs = {
  cursor?: InputMaybe<CommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<CommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type QueryFindFirstCommentProjectOrThrowArgs = {
  cursor?: InputMaybe<CommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<CommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type QueryFindFirstCsatArgs = {
  cursor?: InputMaybe<CsatWhereUniqueInput>;
  distinct?: InputMaybe<Array<CsatScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CsatOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CsatWhereInput>;
};


export type QueryFindFirstCsatOrThrowArgs = {
  cursor?: InputMaybe<CsatWhereUniqueInput>;
  distinct?: InputMaybe<Array<CsatScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CsatOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CsatWhereInput>;
};


export type QueryFindFirstFieldArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldWhereInput>;
};


export type QueryFindFirstFieldColumnArgs = {
  cursor?: InputMaybe<FieldColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type QueryFindFirstFieldColumnOrThrowArgs = {
  cursor?: InputMaybe<FieldColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type QueryFindFirstFieldOrThrowArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldWhereInput>;
};


export type QueryFindFirstFieldsValueArgs = {
  cursor?: InputMaybe<FieldsValueWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldsValueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldsValueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type QueryFindFirstFieldsValueOrThrowArgs = {
  cursor?: InputMaybe<FieldsValueWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldsValueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldsValueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type QueryFindFirstGroupArgs = {
  cursor?: InputMaybe<GroupWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupWhereInput>;
};


export type QueryFindFirstGroupMenbershipArgs = {
  cursor?: InputMaybe<GroupMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type QueryFindFirstGroupMenbershipOrThrowArgs = {
  cursor?: InputMaybe<GroupMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type QueryFindFirstGroupOrThrowArgs = {
  cursor?: InputMaybe<GroupWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupWhereInput>;
};


export type QueryFindFirstGroupUserArgs = {
  cursor?: InputMaybe<GroupUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupUserWhereInput>;
};


export type QueryFindFirstGroupUserOrThrowArgs = {
  cursor?: InputMaybe<GroupUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupUserWhereInput>;
};


export type QueryFindFirstHistoryFlagArgs = {
  cursor?: InputMaybe<HistoryFlagWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryFlagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryFlagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type QueryFindFirstHistoryFlagOrThrowArgs = {
  cursor?: InputMaybe<HistoryFlagWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryFlagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryFlagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type QueryFindFirstHistoryMonthlyRecurringRevenueArgs = {
  cursor?: InputMaybe<HistoryMonthlyRecurringRevenueWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryMonthlyRecurringRevenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type QueryFindFirstHistoryMonthlyRecurringRevenueOrThrowArgs = {
  cursor?: InputMaybe<HistoryMonthlyRecurringRevenueWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryMonthlyRecurringRevenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type QueryFindFirstHistoryStepArgs = {
  cursor?: InputMaybe<HistoryStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type QueryFindFirstHistoryStepOrThrowArgs = {
  cursor?: InputMaybe<HistoryStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type QueryFindFirstInvestArgs = {
  cursor?: InputMaybe<InvestWhereUniqueInput>;
  distinct?: InputMaybe<Array<InvestScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<InvestOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<InvestWhereInput>;
};


export type QueryFindFirstInvestOrThrowArgs = {
  cursor?: InputMaybe<InvestWhereUniqueInput>;
  distinct?: InputMaybe<Array<InvestScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<InvestOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<InvestWhereInput>;
};


export type QueryFindFirstJobFunctionArgs = {
  cursor?: InputMaybe<JobFunctionWhereUniqueInput>;
  distinct?: InputMaybe<Array<JobFunctionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<JobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobFunctionWhereInput>;
};


export type QueryFindFirstJobFunctionOrThrowArgs = {
  cursor?: InputMaybe<JobFunctionWhereUniqueInput>;
  distinct?: InputMaybe<Array<JobFunctionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<JobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobFunctionWhereInput>;
};


export type QueryFindFirstKrArgs = {
  cursor?: InputMaybe<KrWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrWhereInput>;
};


export type QueryFindFirstKrCommentProjectArgs = {
  cursor?: InputMaybe<KrCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type QueryFindFirstKrCommentProjectOrThrowArgs = {
  cursor?: InputMaybe<KrCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type QueryFindFirstKrOrThrowArgs = {
  cursor?: InputMaybe<KrWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrWhereInput>;
};


export type QueryFindFirstNotfyArgs = {
  cursor?: InputMaybe<NotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<NotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<NotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotfyWhereInput>;
};


export type QueryFindFirstNotfyOrThrowArgs = {
  cursor?: InputMaybe<NotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<NotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<NotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotfyWhereInput>;
};


export type QueryFindFirstObjectiveArgs = {
  cursor?: InputMaybe<ObjectiveWhereUniqueInput>;
  distinct?: InputMaybe<Array<ObjectiveScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ObjectiveOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type QueryFindFirstObjectiveOrThrowArgs = {
  cursor?: InputMaybe<ObjectiveWhereUniqueInput>;
  distinct?: InputMaybe<Array<ObjectiveScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ObjectiveOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type QueryFindFirstOkrObjectiveProjectArgs = {
  cursor?: InputMaybe<OkrObjectiveProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrObjectiveProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrObjectiveProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type QueryFindFirstOkrObjectiveProjectOrThrowArgs = {
  cursor?: InputMaybe<OkrObjectiveProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrObjectiveProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrObjectiveProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type QueryFindFirstOkrProjectArgs = {
  cursor?: InputMaybe<OkrProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type QueryFindFirstOkrProjectHistoryArgs = {
  cursor?: InputMaybe<OkrProjectHistoryWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectHistoryScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectHistoryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type QueryFindFirstOkrProjectHistoryOrThrowArgs = {
  cursor?: InputMaybe<OkrProjectHistoryWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectHistoryScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectHistoryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type QueryFindFirstOkrProjectOrThrowArgs = {
  cursor?: InputMaybe<OkrProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type QueryFindFirstOrganizationArgs = {
  cursor?: InputMaybe<OrganizationWhereUniqueInput>;
  distinct?: InputMaybe<Array<OrganizationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OrganizationWhereInput>;
};


export type QueryFindFirstOrganizationOrThrowArgs = {
  cursor?: InputMaybe<OrganizationWhereUniqueInput>;
  distinct?: InputMaybe<Array<OrganizationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OrganizationWhereInput>;
};


export type QueryFindFirstPermissionArgs = {
  cursor?: InputMaybe<PermissionWhereUniqueInput>;
  distinct?: InputMaybe<Array<PermissionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PermissionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PermissionWhereInput>;
};


export type QueryFindFirstPermissionOrThrowArgs = {
  cursor?: InputMaybe<PermissionWhereUniqueInput>;
  distinct?: InputMaybe<Array<PermissionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PermissionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PermissionWhereInput>;
};


export type QueryFindFirstPipefyProjectArgs = {
  cursor?: InputMaybe<PipefyProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<PipefyProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PipefyProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type QueryFindFirstPipefyProjectOrThrowArgs = {
  cursor?: InputMaybe<PipefyProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<PipefyProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PipefyProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type QueryFindFirstPrimitiveFieldsArgs = {
  cursor?: InputMaybe<PrimitiveFieldsWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveFieldsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveFieldsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveFieldsWhereInput>;
};


export type QueryFindFirstPrimitiveFieldsOrThrowArgs = {
  cursor?: InputMaybe<PrimitiveFieldsWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveFieldsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveFieldsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveFieldsWhereInput>;
};


export type QueryFindFirstPrimitiveStreenghtArgs = {
  cursor?: InputMaybe<PrimitiveStreenghtWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveStreenghtScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveStreenghtOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type QueryFindFirstPrimitiveStreenghtOrThrowArgs = {
  cursor?: InputMaybe<PrimitiveStreenghtWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveStreenghtScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveStreenghtOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type QueryFindFirstProjectArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryFindFirstProjectManagerArgs = {
  cursor?: InputMaybe<ProjectManagerWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectManagerScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectManagerOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type QueryFindFirstProjectManagerOrThrowArgs = {
  cursor?: InputMaybe<ProjectManagerWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectManagerScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectManagerOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type QueryFindFirstProjectOrThrowArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryFindFirstProjectsBoardsArgs = {
  cursor?: InputMaybe<ProjectsBoardsWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectsBoardsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectsBoardsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type QueryFindFirstProjectsBoardsOrThrowArgs = {
  cursor?: InputMaybe<ProjectsBoardsWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectsBoardsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectsBoardsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type QueryFindFirstQnpArgs = {
  cursor?: InputMaybe<QnpWhereUniqueInput>;
  distinct?: InputMaybe<Array<QnpScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<QnpOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<QnpWhereInput>;
};


export type QueryFindFirstQnpOrThrowArgs = {
  cursor?: InputMaybe<QnpWhereUniqueInput>;
  distinct?: InputMaybe<Array<QnpScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<QnpOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<QnpWhereInput>;
};


export type QueryFindFirstReceivedClientArgs = {
  cursor?: InputMaybe<ReceivedClientWhereUniqueInput>;
  distinct?: InputMaybe<Array<ReceivedClientScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ReceivedClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ReceivedClientWhereInput>;
};


export type QueryFindFirstReceivedClientOrThrowArgs = {
  cursor?: InputMaybe<ReceivedClientWhereUniqueInput>;
  distinct?: InputMaybe<Array<ReceivedClientScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ReceivedClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ReceivedClientWhereInput>;
};


export type QueryFindFirstSelfStructureArgs = {
  cursor?: InputMaybe<SelfStructureWhereUniqueInput>;
  distinct?: InputMaybe<Array<SelfStructureScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<SelfStructureOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type QueryFindFirstSelfStructureOrThrowArgs = {
  cursor?: InputMaybe<SelfStructureWhereUniqueInput>;
  distinct?: InputMaybe<Array<SelfStructureScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<SelfStructureOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type QueryFindFirstServiceLevelAgreementArgs = {
  cursor?: InputMaybe<ServiceLevelAgreementWhereUniqueInput>;
  distinct?: InputMaybe<Array<ServiceLevelAgreementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ServiceLevelAgreementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type QueryFindFirstServiceLevelAgreementOrThrowArgs = {
  cursor?: InputMaybe<ServiceLevelAgreementWhereUniqueInput>;
  distinct?: InputMaybe<Array<ServiceLevelAgreementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ServiceLevelAgreementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type QueryFindFirstStepArgs = {
  cursor?: InputMaybe<StepWhereUniqueInput>;
  distinct?: InputMaybe<Array<StepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<StepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<StepWhereInput>;
};


export type QueryFindFirstStepOrThrowArgs = {
  cursor?: InputMaybe<StepWhereUniqueInput>;
  distinct?: InputMaybe<Array<StepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<StepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<StepWhereInput>;
};


export type QueryFindFirstTagArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  distinct?: InputMaybe<Array<TagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagWhereInput>;
};


export type QueryFindFirstTagOrThrowArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  distinct?: InputMaybe<Array<TagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagWhereInput>;
};


export type QueryFindFirstTaskArgs = {
  cursor?: InputMaybe<TaskWhereUniqueInput>;
  distinct?: InputMaybe<Array<TaskScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TaskOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TaskWhereInput>;
};


export type QueryFindFirstTaskOrThrowArgs = {
  cursor?: InputMaybe<TaskWhereUniqueInput>;
  distinct?: InputMaybe<Array<TaskScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TaskOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TaskWhereInput>;
};


export type QueryFindFirstTeamArgs = {
  cursor?: InputMaybe<TeamWhereUniqueInput>;
  distinct?: InputMaybe<Array<TeamScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TeamWhereInput>;
};


export type QueryFindFirstTeamOrThrowArgs = {
  cursor?: InputMaybe<TeamWhereUniqueInput>;
  distinct?: InputMaybe<Array<TeamScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TeamWhereInput>;
};


export type QueryFindFirstThrowErrorFrontArgs = {
  cursor?: InputMaybe<ThrowErrorFrontWhereUniqueInput>;
  distinct?: InputMaybe<Array<ThrowErrorFrontScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ThrowErrorFrontOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThrowErrorFrontWhereInput>;
};


export type QueryFindFirstThrowErrorFrontOrThrowArgs = {
  cursor?: InputMaybe<ThrowErrorFrontWhereUniqueInput>;
  distinct?: InputMaybe<Array<ThrowErrorFrontScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ThrowErrorFrontOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThrowErrorFrontWhereInput>;
};


export type QueryFindFirstTokenFirebaseArgs = {
  cursor?: InputMaybe<TokenFirebaseWhereUniqueInput>;
  distinct?: InputMaybe<Array<TokenFirebaseScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TokenFirebaseOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type QueryFindFirstTokenFirebaseOrThrowArgs = {
  cursor?: InputMaybe<TokenFirebaseWhereUniqueInput>;
  distinct?: InputMaybe<Array<TokenFirebaseScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TokenFirebaseOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type QueryFindFirstUserArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryFindFirstUserJobFunctionArgs = {
  cursor?: InputMaybe<UserJobFunctionWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserJobFunctionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserJobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type QueryFindFirstUserJobFunctionOrThrowArgs = {
  cursor?: InputMaybe<UserJobFunctionWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserJobFunctionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserJobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type QueryFindFirstUserNotfyArgs = {
  cursor?: InputMaybe<UserNotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserNotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserNotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type QueryFindFirstUserNotfyOrThrowArgs = {
  cursor?: InputMaybe<UserNotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserNotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserNotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type QueryFindFirstUserOrThrowArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryFindFirstUserOrganizationArgs = {
  cursor?: InputMaybe<UserOrganizationWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserOrganizationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type QueryFindFirstUserOrganizationOrThrowArgs = {
  cursor?: InputMaybe<UserOrganizationWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserOrganizationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type QueryFindFirstUserStepArgs = {
  cursor?: InputMaybe<UserStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserStepWhereInput>;
};


export type QueryFindFirstUserStepOrThrowArgs = {
  cursor?: InputMaybe<UserStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserStepWhereInput>;
};


export type QueryFindFirstUserTeamArgs = {
  cursor?: InputMaybe<UserTeamWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserTeamScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserTeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserTeamWhereInput>;
};


export type QueryFindFirstUserTeamOrThrowArgs = {
  cursor?: InputMaybe<UserTeamWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserTeamScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserTeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserTeamWhereInput>;
};


export type QueryFindFirstViewedCommentProjectArgs = {
  cursor?: InputMaybe<ViewedCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ViewedCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ViewedCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};


export type QueryFindFirstViewedCommentProjectOrThrowArgs = {
  cursor?: InputMaybe<ViewedCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ViewedCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ViewedCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};


export type QueryFindManyArchivesArgs = {
  cursor?: InputMaybe<ArchivesWhereUniqueInput>;
  distinct?: InputMaybe<Array<ArchivesScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ArchivesOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchivesWhereInput>;
};


export type QueryFindManyCardTagsArgs = {
  cursor?: InputMaybe<CardTagsWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardTagsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardTagsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardTagsWhereInput>;
};


export type QueryFindManyPrimitiveFieldsArgs = {
  cursor?: InputMaybe<PrimitiveFieldsWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveFieldsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveFieldsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveFieldsWhereInput>;
};


export type QueryFindManyProjectsBoardsArgs = {
  cursor?: InputMaybe<ProjectsBoardsWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectsBoardsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectsBoardsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type QueryFindUniqueArchivesArgs = {
  where: ArchivesWhereUniqueInput;
};


export type QueryFindUniqueArchivesOrThrowArgs = {
  where: ArchivesWhereUniqueInput;
};


export type QueryFindUniqueCardInHistoryComponentArgs = {
  id: Scalars['String']['input'];
};


export type QueryFindUniqueCardTagsArgs = {
  where: CardTagsWhereUniqueInput;
};


export type QueryFindUniqueCardTagsOrThrowArgs = {
  where: CardTagsWhereUniqueInput;
};


export type QueryFindUniquePrimitiveFieldsArgs = {
  where: PrimitiveFieldsWhereUniqueInput;
};


export type QueryFindUniquePrimitiveFieldsOrThrowArgs = {
  where: PrimitiveFieldsWhereUniqueInput;
};


export type QueryFindUniqueProjectsBoardsArgs = {
  where: ProjectsBoardsWhereUniqueInput;
};


export type QueryFindUniqueProjectsBoardsOrThrowArgs = {
  where: ProjectsBoardsWhereUniqueInput;
};


export type QueryGetAcessHistoryUserArgs = {
  where: AcessHistoryUserWhereUniqueInput;
};


export type QueryGetBoardArgs = {
  where: BoardWhereUniqueInput;
};


export type QueryGetBoardMenbershipArgs = {
  where: BoardMenbershipWhereUniqueInput;
};


export type QueryGetCardArgs = {
  where: CardWhereUniqueInput;
};


export type QueryGetCardAssignmentArgs = {
  where: CardAssignmentWhereUniqueInput;
};


export type QueryGetCardCommentArgs = {
  where: CardCommentWhereUniqueInput;
};


export type QueryGetCardMovementArgs = {
  where: CardMovementWhereUniqueInput;
};


export type QueryGetClientArgs = {
  where: ClientWhereUniqueInput;
};


export type QueryGetColumnArgs = {
  where: ColumnWhereUniqueInput;
};


export type QueryGetCommentProjectArgs = {
  where: CommentProjectWhereUniqueInput;
};


export type QueryGetCsatArgs = {
  where: CsatWhereUniqueInput;
};


export type QueryGetFieldArgs = {
  where: FieldWhereUniqueInput;
};


export type QueryGetFieldColumnArgs = {
  where: FieldColumnWhereUniqueInput;
};


export type QueryGetFieldsValueArgs = {
  where: FieldsValueWhereUniqueInput;
};


export type QueryGetGroupArgs = {
  where: GroupWhereUniqueInput;
};


export type QueryGetGroupMenbershipArgs = {
  where: GroupMenbershipWhereUniqueInput;
};


export type QueryGetGroupUserArgs = {
  where: GroupUserWhereUniqueInput;
};


export type QueryGetHistoryFlagArgs = {
  where: HistoryFlagWhereUniqueInput;
};


export type QueryGetHistoryMonthlyRecurringRevenueArgs = {
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};


export type QueryGetHistoryStepArgs = {
  where: HistoryStepWhereUniqueInput;
};


export type QueryGetInvestArgs = {
  where: InvestWhereUniqueInput;
};


export type QueryGetJobFunctionArgs = {
  where: JobFunctionWhereUniqueInput;
};


export type QueryGetKrArgs = {
  where: KrWhereUniqueInput;
};


export type QueryGetKrCommentProjectArgs = {
  where: KrCommentProjectWhereUniqueInput;
};


export type QueryGetNotfyArgs = {
  where: NotfyWhereUniqueInput;
};


export type QueryGetObjectiveArgs = {
  where: ObjectiveWhereUniqueInput;
};


export type QueryGetOkrObjectiveProjectArgs = {
  where: OkrObjectiveProjectWhereUniqueInput;
};


export type QueryGetOkrProjectArgs = {
  where: OkrProjectWhereUniqueInput;
};


export type QueryGetOkrProjectHistoryArgs = {
  where: OkrProjectHistoryWhereUniqueInput;
};


export type QueryGetOrganizationArgs = {
  where: OrganizationWhereUniqueInput;
};


export type QueryGetPermissionArgs = {
  where: PermissionWhereUniqueInput;
};


export type QueryGetPipefyProjectArgs = {
  where: PipefyProjectWhereUniqueInput;
};


export type QueryGetPrimitiveStreenghtArgs = {
  where: PrimitiveStreenghtWhereUniqueInput;
};


export type QueryGetProjectArgs = {
  where: ProjectWhereUniqueInput;
};


export type QueryGetProjectManagerArgs = {
  where: ProjectManagerWhereUniqueInput;
};


export type QueryGetQnpArgs = {
  where: QnpWhereUniqueInput;
};


export type QueryGetReceivedClientArgs = {
  where: ReceivedClientWhereUniqueInput;
};


export type QueryGetSelfStructureArgs = {
  where: SelfStructureWhereUniqueInput;
};


export type QueryGetServiceLevelAgreementArgs = {
  where: ServiceLevelAgreementWhereUniqueInput;
};


export type QueryGetStepArgs = {
  where: StepWhereUniqueInput;
};


export type QueryGetTagArgs = {
  where: TagWhereUniqueInput;
};


export type QueryGetTaskArgs = {
  where: TaskWhereUniqueInput;
};


export type QueryGetTeamArgs = {
  where: TeamWhereUniqueInput;
};


export type QueryGetThrowErrorFrontArgs = {
  where: ThrowErrorFrontWhereUniqueInput;
};


export type QueryGetTokenFirebaseArgs = {
  where: TokenFirebaseWhereUniqueInput;
};


export type QueryGetUserArgs = {
  where: UserWhereUniqueInput;
};


export type QueryGetUserJobFunctionArgs = {
  where: UserJobFunctionWhereUniqueInput;
};


export type QueryGetUserNotfyArgs = {
  where: UserNotfyWhereUniqueInput;
};


export type QueryGetUserOrganizationArgs = {
  where: UserOrganizationWhereUniqueInput;
};


export type QueryGetUserStepArgs = {
  where: UserStepWhereUniqueInput;
};


export type QueryGetUserTeamArgs = {
  where: UserTeamWhereUniqueInput;
};


export type QueryGetViewedCommentProjectArgs = {
  where: ViewedCommentProjectWhereUniqueInput;
};


export type QueryGroupArgs = {
  where: GroupWhereUniqueInput;
};


export type QueryGroupByAcessHistoryUserArgs = {
  by: Array<AcessHistoryUserScalarFieldEnum>;
  having?: InputMaybe<AcessHistoryUserScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<AcessHistoryUserOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type QueryGroupByArchivesArgs = {
  by: Array<ArchivesScalarFieldEnum>;
  having?: InputMaybe<ArchivesScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ArchivesOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchivesWhereInput>;
};


export type QueryGroupByBoardArgs = {
  by: Array<BoardScalarFieldEnum>;
  having?: InputMaybe<BoardScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<BoardOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardWhereInput>;
};


export type QueryGroupByBoardMenbershipArgs = {
  by: Array<BoardMenbershipScalarFieldEnum>;
  having?: InputMaybe<BoardMenbershipScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<BoardMenbershipOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type QueryGroupByCardArgs = {
  by: Array<CardScalarFieldEnum>;
  having?: InputMaybe<CardScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CardOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardWhereInput>;
};


export type QueryGroupByCardAssignmentArgs = {
  by: Array<CardAssignmentScalarFieldEnum>;
  having?: InputMaybe<CardAssignmentScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CardAssignmentOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type QueryGroupByCardCommentArgs = {
  by: Array<CardCommentScalarFieldEnum>;
  having?: InputMaybe<CardCommentScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CardCommentOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardCommentWhereInput>;
};


export type QueryGroupByCardMovementArgs = {
  by: Array<CardMovementScalarFieldEnum>;
  having?: InputMaybe<CardMovementScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type QueryGroupByCardTagsArgs = {
  by: Array<CardTagsScalarFieldEnum>;
  having?: InputMaybe<CardTagsScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CardTagsOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardTagsWhereInput>;
};


export type QueryGroupByClientArgs = {
  by: Array<ClientScalarFieldEnum>;
  having?: InputMaybe<ClientScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ClientOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ClientWhereInput>;
};


export type QueryGroupByColumnArgs = {
  by: Array<ColumnScalarFieldEnum>;
  having?: InputMaybe<ColumnScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type QueryGroupByCommentProjectArgs = {
  by: Array<CommentProjectScalarFieldEnum>;
  having?: InputMaybe<CommentProjectScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CommentProjectOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type QueryGroupByCsatArgs = {
  by: Array<CsatScalarFieldEnum>;
  having?: InputMaybe<CsatScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<CsatOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CsatWhereInput>;
};


export type QueryGroupByFieldArgs = {
  by: Array<FieldScalarFieldEnum>;
  having?: InputMaybe<FieldScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<FieldOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldWhereInput>;
};


export type QueryGroupByFieldColumnArgs = {
  by: Array<FieldColumnScalarFieldEnum>;
  having?: InputMaybe<FieldColumnScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<FieldColumnOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldColumnWhereInput>;
};


export type QueryGroupByFieldsValueArgs = {
  by: Array<FieldsValueScalarFieldEnum>;
  having?: InputMaybe<FieldsValueScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<FieldsValueOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type QueryGroupByGroupArgs = {
  by: Array<GroupScalarFieldEnum>;
  having?: InputMaybe<GroupScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<GroupOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupWhereInput>;
};


export type QueryGroupByGroupMenbershipArgs = {
  by: Array<GroupMenbershipScalarFieldEnum>;
  having?: InputMaybe<GroupMenbershipScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<GroupMenbershipOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type QueryGroupByGroupUserArgs = {
  by: Array<GroupUserScalarFieldEnum>;
  having?: InputMaybe<GroupUserScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<GroupUserOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupUserWhereInput>;
};


export type QueryGroupByHistoryFlagArgs = {
  by: Array<HistoryFlagScalarFieldEnum>;
  having?: InputMaybe<HistoryFlagScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<HistoryFlagOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type QueryGroupByHistoryMonthlyRecurringRevenueArgs = {
  by: Array<HistoryMonthlyRecurringRevenueScalarFieldEnum>;
  having?: InputMaybe<HistoryMonthlyRecurringRevenueScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<HistoryMonthlyRecurringRevenueOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type QueryGroupByHistoryStepArgs = {
  by: Array<HistoryStepScalarFieldEnum>;
  having?: InputMaybe<HistoryStepScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<HistoryStepOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type QueryGroupByInvestArgs = {
  by: Array<InvestScalarFieldEnum>;
  having?: InputMaybe<InvestScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<InvestOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<InvestWhereInput>;
};


export type QueryGroupByJobFunctionArgs = {
  by: Array<JobFunctionScalarFieldEnum>;
  having?: InputMaybe<JobFunctionScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<JobFunctionOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobFunctionWhereInput>;
};


export type QueryGroupByKrArgs = {
  by: Array<KrScalarFieldEnum>;
  having?: InputMaybe<KrScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<KrOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrWhereInput>;
};


export type QueryGroupByKrCommentProjectArgs = {
  by: Array<KrCommentProjectScalarFieldEnum>;
  having?: InputMaybe<KrCommentProjectScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<KrCommentProjectOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type QueryGroupByNotfyArgs = {
  by: Array<NotfyScalarFieldEnum>;
  having?: InputMaybe<NotfyScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<NotfyOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotfyWhereInput>;
};


export type QueryGroupByObjectiveArgs = {
  by: Array<ObjectiveScalarFieldEnum>;
  having?: InputMaybe<ObjectiveScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ObjectiveOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type QueryGroupByOkrObjectiveProjectArgs = {
  by: Array<OkrObjectiveProjectScalarFieldEnum>;
  having?: InputMaybe<OkrObjectiveProjectScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<OkrObjectiveProjectOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type QueryGroupByOkrProjectArgs = {
  by: Array<OkrProjectScalarFieldEnum>;
  having?: InputMaybe<OkrProjectScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<OkrProjectOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type QueryGroupByOkrProjectHistoryArgs = {
  by: Array<OkrProjectHistoryScalarFieldEnum>;
  having?: InputMaybe<OkrProjectHistoryScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<OkrProjectHistoryOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type QueryGroupByOrganizationArgs = {
  by: Array<OrganizationScalarFieldEnum>;
  having?: InputMaybe<OrganizationScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<OrganizationOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OrganizationWhereInput>;
};


export type QueryGroupByPermissionArgs = {
  by: Array<PermissionScalarFieldEnum>;
  having?: InputMaybe<PermissionScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<PermissionOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PermissionWhereInput>;
};


export type QueryGroupByPipefyProjectArgs = {
  by: Array<PipefyProjectScalarFieldEnum>;
  having?: InputMaybe<PipefyProjectScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<PipefyProjectOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type QueryGroupByPrimitiveFieldsArgs = {
  by: Array<PrimitiveFieldsScalarFieldEnum>;
  having?: InputMaybe<PrimitiveFieldsScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<PrimitiveFieldsOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveFieldsWhereInput>;
};


export type QueryGroupByPrimitiveStreenghtArgs = {
  by: Array<PrimitiveStreenghtScalarFieldEnum>;
  having?: InputMaybe<PrimitiveStreenghtScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<PrimitiveStreenghtOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type QueryGroupByProjectArgs = {
  by: Array<ProjectScalarFieldEnum>;
  having?: InputMaybe<ProjectScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryGroupByProjectManagerArgs = {
  by: Array<ProjectManagerScalarFieldEnum>;
  having?: InputMaybe<ProjectManagerScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ProjectManagerOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type QueryGroupByProjectsBoardsArgs = {
  by: Array<ProjectsBoardsScalarFieldEnum>;
  having?: InputMaybe<ProjectsBoardsScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ProjectsBoardsOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectsBoardsWhereInput>;
};


export type QueryGroupByQnpArgs = {
  by: Array<QnpScalarFieldEnum>;
  having?: InputMaybe<QnpScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<QnpOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<QnpWhereInput>;
};


export type QueryGroupByReceivedClientArgs = {
  by: Array<ReceivedClientScalarFieldEnum>;
  having?: InputMaybe<ReceivedClientScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ReceivedClientOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ReceivedClientWhereInput>;
};


export type QueryGroupBySelfStructureArgs = {
  by: Array<SelfStructureScalarFieldEnum>;
  having?: InputMaybe<SelfStructureScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<SelfStructureOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type QueryGroupByServiceLevelAgreementArgs = {
  by: Array<ServiceLevelAgreementScalarFieldEnum>;
  having?: InputMaybe<ServiceLevelAgreementScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ServiceLevelAgreementOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type QueryGroupByStepArgs = {
  by: Array<StepScalarFieldEnum>;
  having?: InputMaybe<StepScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<StepOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<StepWhereInput>;
};


export type QueryGroupByTagArgs = {
  by: Array<TagScalarFieldEnum>;
  having?: InputMaybe<TagScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<TagOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagWhereInput>;
};


export type QueryGroupByTaskArgs = {
  by: Array<TaskScalarFieldEnum>;
  having?: InputMaybe<TaskScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<TaskOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TaskWhereInput>;
};


export type QueryGroupByTeamArgs = {
  by: Array<TeamScalarFieldEnum>;
  having?: InputMaybe<TeamScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<TeamOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TeamWhereInput>;
};


export type QueryGroupByThrowErrorFrontArgs = {
  by: Array<ThrowErrorFrontScalarFieldEnum>;
  having?: InputMaybe<ThrowErrorFrontScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ThrowErrorFrontOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThrowErrorFrontWhereInput>;
};


export type QueryGroupByTokenFirebaseArgs = {
  by: Array<TokenFirebaseScalarFieldEnum>;
  having?: InputMaybe<TokenFirebaseScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<TokenFirebaseOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type QueryGroupByUserArgs = {
  by: Array<UserScalarFieldEnum>;
  having?: InputMaybe<UserScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UserOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryGroupByUserJobFunctionArgs = {
  by: Array<UserJobFunctionScalarFieldEnum>;
  having?: InputMaybe<UserJobFunctionScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UserJobFunctionOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type QueryGroupByUserNotfyArgs = {
  by: Array<UserNotfyScalarFieldEnum>;
  having?: InputMaybe<UserNotfyScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UserNotfyOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type QueryGroupByUserOrganizationArgs = {
  by: Array<UserOrganizationScalarFieldEnum>;
  having?: InputMaybe<UserOrganizationScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UserOrganizationOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type QueryGroupByUserStepArgs = {
  by: Array<UserStepScalarFieldEnum>;
  having?: InputMaybe<UserStepScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UserStepOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserStepWhereInput>;
};


export type QueryGroupByUserTeamArgs = {
  by: Array<UserTeamScalarFieldEnum>;
  having?: InputMaybe<UserTeamScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<UserTeamOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserTeamWhereInput>;
};


export type QueryGroupByViewedCommentProjectArgs = {
  by: Array<ViewedCommentProjectScalarFieldEnum>;
  having?: InputMaybe<ViewedCommentProjectScalarWhereWithAggregatesInput>;
  orderBy?: InputMaybe<Array<ViewedCommentProjectOrderByWithAggregationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};


export type QueryGroupMenbershipArgs = {
  where: GroupMenbershipWhereUniqueInput;
};


export type QueryGroupMenbershipsArgs = {
  cursor?: InputMaybe<GroupMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupMenbershipWhereInput>;
};


export type QueryGroupUserArgs = {
  where: GroupUserWhereUniqueInput;
};


export type QueryGroupUsersArgs = {
  cursor?: InputMaybe<GroupUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupUserWhereInput>;
};


export type QueryGroupsArgs = {
  cursor?: InputMaybe<GroupWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupWhereInput>;
};


export type QueryHistoryFlagArgs = {
  where: HistoryFlagWhereUniqueInput;
};


export type QueryHistoryFlagsArgs = {
  cursor?: InputMaybe<HistoryFlagWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryFlagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryFlagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type QueryHistoryMonthlyRecurringRevenueArgs = {
  where: HistoryMonthlyRecurringRevenueWhereUniqueInput;
};


export type QueryHistoryMonthlyRecurringRevenuesArgs = {
  cursor?: InputMaybe<HistoryMonthlyRecurringRevenueWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryMonthlyRecurringRevenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type QueryHistoryStepArgs = {
  where: HistoryStepWhereUniqueInput;
};


export type QueryHistoryStepsArgs = {
  cursor?: InputMaybe<HistoryStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type QueryInvestArgs = {
  where: InvestWhereUniqueInput;
};


export type QueryInvestsArgs = {
  cursor?: InputMaybe<InvestWhereUniqueInput>;
  distinct?: InputMaybe<Array<InvestScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<InvestOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<InvestWhereInput>;
};


export type QueryJobFunctionArgs = {
  where: JobFunctionWhereUniqueInput;
};


export type QueryJobFunctionsArgs = {
  cursor?: InputMaybe<JobFunctionWhereUniqueInput>;
  distinct?: InputMaybe<Array<JobFunctionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<JobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<JobFunctionWhereInput>;
};


export type QueryKrArgs = {
  where: KrWhereUniqueInput;
};


export type QueryKrCommentProjectArgs = {
  where: KrCommentProjectWhereUniqueInput;
};


export type QueryKrCommentProjectsArgs = {
  cursor?: InputMaybe<KrCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type QueryKrsArgs = {
  cursor?: InputMaybe<KrWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrWhereInput>;
};


export type QueryMonthCalendarArgs = {
  data: Scalars['DateTimeISO']['input'];
};


export type QueryNotfiesArgs = {
  cursor?: InputMaybe<NotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<NotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<NotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotfyWhereInput>;
};


export type QueryNotfyArgs = {
  where: NotfyWhereUniqueInput;
};


export type QueryObjectiveArgs = {
  where: ObjectiveWhereUniqueInput;
};


export type QueryObjectivesArgs = {
  cursor?: InputMaybe<ObjectiveWhereUniqueInput>;
  distinct?: InputMaybe<Array<ObjectiveScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ObjectiveOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type QueryOkrObjectiveProjectArgs = {
  where: OkrObjectiveProjectWhereUniqueInput;
};


export type QueryOkrObjectiveProjectsArgs = {
  cursor?: InputMaybe<OkrObjectiveProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrObjectiveProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrObjectiveProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type QueryOkrProjectArgs = {
  where: OkrProjectWhereUniqueInput;
};


export type QueryOkrProjectHistoriesArgs = {
  cursor?: InputMaybe<OkrProjectHistoryWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectHistoryScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectHistoryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type QueryOkrProjectHistoryArgs = {
  where: OkrProjectHistoryWhereUniqueInput;
};


export type QueryOkrProjectsArgs = {
  cursor?: InputMaybe<OkrProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type QueryOrganizationArgs = {
  where: OrganizationWhereUniqueInput;
};


export type QueryOrganizationsArgs = {
  cursor?: InputMaybe<OrganizationWhereUniqueInput>;
  distinct?: InputMaybe<Array<OrganizationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OrganizationWhereInput>;
};


export type QueryPermissionArgs = {
  where: PermissionWhereUniqueInput;
};


export type QueryPermissionsArgs = {
  cursor?: InputMaybe<PermissionWhereUniqueInput>;
  distinct?: InputMaybe<Array<PermissionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PermissionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PermissionWhereInput>;
};


export type QueryPipefyProjectArgs = {
  where: PipefyProjectWhereUniqueInput;
};


export type QueryPipefyProjectsArgs = {
  cursor?: InputMaybe<PipefyProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<PipefyProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PipefyProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PipefyProjectWhereInput>;
};


export type QueryPrimitiveStreenghtArgs = {
  where: PrimitiveStreenghtWhereUniqueInput;
};


export type QueryPrimitiveStreenghtsArgs = {
  cursor?: InputMaybe<PrimitiveStreenghtWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveStreenghtScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveStreenghtOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type QueryProjectArgs = {
  where: ProjectWhereUniqueInput;
};


export type QueryProjectManagerArgs = {
  where: ProjectManagerWhereUniqueInput;
};


export type QueryProjectManagersArgs = {
  cursor?: InputMaybe<ProjectManagerWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectManagerScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectManagerOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectManagerWhereInput>;
};


export type QueryProjectsArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type QueryQnpArgs = {
  where: QnpWhereUniqueInput;
};


export type QueryQnpsArgs = {
  cursor?: InputMaybe<QnpWhereUniqueInput>;
  distinct?: InputMaybe<Array<QnpScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<QnpOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<QnpWhereInput>;
};


export type QueryReceivedClientArgs = {
  where: ReceivedClientWhereUniqueInput;
};


export type QueryReceivedClientsArgs = {
  cursor?: InputMaybe<ReceivedClientWhereUniqueInput>;
  distinct?: InputMaybe<Array<ReceivedClientScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ReceivedClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ReceivedClientWhereInput>;
};


export type QuerySelfStructureArgs = {
  where: SelfStructureWhereUniqueInput;
};


export type QuerySelfStructuresArgs = {
  cursor?: InputMaybe<SelfStructureWhereUniqueInput>;
  distinct?: InputMaybe<Array<SelfStructureScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<SelfStructureOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type QueryServiceLevelAgreementArgs = {
  where: ServiceLevelAgreementWhereUniqueInput;
};


export type QueryServiceLevelAgreementsArgs = {
  cursor?: InputMaybe<ServiceLevelAgreementWhereUniqueInput>;
  distinct?: InputMaybe<Array<ServiceLevelAgreementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ServiceLevelAgreementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ServiceLevelAgreementWhereInput>;
};


export type QueryStepArgs = {
  where: StepWhereUniqueInput;
};


export type QueryStepsArgs = {
  cursor?: InputMaybe<StepWhereUniqueInput>;
  distinct?: InputMaybe<Array<StepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<StepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<StepWhereInput>;
};


export type QueryTagArgs = {
  where: TagWhereUniqueInput;
};


export type QueryTagsArgs = {
  cursor?: InputMaybe<TagWhereUniqueInput>;
  distinct?: InputMaybe<Array<TagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TagWhereInput>;
};


export type QueryTaskArgs = {
  where: TaskWhereUniqueInput;
};


export type QueryTasksArgs = {
  cursor?: InputMaybe<TaskWhereUniqueInput>;
  distinct?: InputMaybe<Array<TaskScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TaskOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TaskWhereInput>;
};


export type QueryTeamArgs = {
  where: TeamWhereUniqueInput;
};


export type QueryTeamsArgs = {
  cursor?: InputMaybe<TeamWhereUniqueInput>;
  distinct?: InputMaybe<Array<TeamScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TeamWhereInput>;
};


export type QueryThrowErrorFrontArgs = {
  where: ThrowErrorFrontWhereUniqueInput;
};


export type QueryThrowErrorFrontsArgs = {
  cursor?: InputMaybe<ThrowErrorFrontWhereUniqueInput>;
  distinct?: InputMaybe<Array<ThrowErrorFrontScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ThrowErrorFrontOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ThrowErrorFrontWhereInput>;
};


export type QueryTokenFirebaseArgs = {
  where: TokenFirebaseWhereUniqueInput;
};


export type QueryTokenFirebasesArgs = {
  cursor?: InputMaybe<TokenFirebaseWhereUniqueInput>;
  distinct?: InputMaybe<Array<TokenFirebaseScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TokenFirebaseOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type QueryUserJobFunctionArgs = {
  where: UserJobFunctionWhereUniqueInput;
};


export type QueryUserJobFunctionsArgs = {
  cursor?: InputMaybe<UserJobFunctionWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserJobFunctionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserJobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type QueryUserNotfiesArgs = {
  cursor?: InputMaybe<UserNotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserNotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserNotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type QueryUserNotfyArgs = {
  where: UserNotfyWhereUniqueInput;
};


export type QueryUserOrganizationArgs = {
  where: UserOrganizationWhereUniqueInput;
};


export type QueryUserOrganizationsArgs = {
  cursor?: InputMaybe<UserOrganizationWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserOrganizationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type QueryUserStepArgs = {
  where: UserStepWhereUniqueInput;
};


export type QueryUserStepsArgs = {
  cursor?: InputMaybe<UserStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserStepWhereInput>;
};


export type QueryUserTeamArgs = {
  where: UserTeamWhereUniqueInput;
};


export type QueryUserTeamsArgs = {
  cursor?: InputMaybe<UserTeamWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserTeamScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserTeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserTeamWhereInput>;
};


export type QueryUsersArgs = {
  cursor?: InputMaybe<UserWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserWhereInput>;
};


export type QueryViewedCommentProjectArgs = {
  where: ViewedCommentProjectWhereUniqueInput;
};


export type QueryViewedCommentProjectsArgs = {
  cursor?: InputMaybe<ViewedCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ViewedCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ViewedCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};

export enum QueryMode {
  Default = 'default',
  Insensitive = 'insensitive'
}

export type ReceivedClient = {
  __typename?: 'ReceivedClient';
  address: Scalars['String']['output'];
  bis: Scalars['Int']['output'];
  city: Scalars['String']['output'];
  cnpj: Scalars['String']['output'];
  content: Scalars['JSON']['output'];
  copies: Scalars['Int']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  designs: Scalars['Int']['output'];
  emails: Scalars['Int']['output'];
  fantasyName: Scalars['String']['output'];
  fee: Scalars['Float']['output'];
  id: Scalars['Int']['output'];
  initialDateContract: Scalars['String']['output'];
  lps: Scalars['Int']['output'];
  movies: Scalars['Int']['output'];
  mrr: Scalars['Float']['output'];
  name: Scalars['String']['output'];
  pipefyId?: Maybe<Scalars['Int']['output']>;
  state: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type ReceivedClientAvgAggregate = {
  __typename?: 'ReceivedClientAvgAggregate';
  bis?: Maybe<Scalars['Float']['output']>;
  copies?: Maybe<Scalars['Float']['output']>;
  designs?: Maybe<Scalars['Float']['output']>;
  emails?: Maybe<Scalars['Float']['output']>;
  fee?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Float']['output']>;
  lps?: Maybe<Scalars['Float']['output']>;
  movies?: Maybe<Scalars['Float']['output']>;
  mrr?: Maybe<Scalars['Float']['output']>;
  pipefyId?: Maybe<Scalars['Float']['output']>;
};

export type ReceivedClientAvgOrderByAggregateInput = {
  bis?: InputMaybe<SortOrder>;
  copies?: InputMaybe<SortOrder>;
  designs?: InputMaybe<SortOrder>;
  emails?: InputMaybe<SortOrder>;
  fee?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  lps?: InputMaybe<SortOrder>;
  movies?: InputMaybe<SortOrder>;
  mrr?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
};

export type ReceivedClientCountAggregate = {
  __typename?: 'ReceivedClientCountAggregate';
  _all: Scalars['Int']['output'];
  address: Scalars['Int']['output'];
  bis: Scalars['Int']['output'];
  city: Scalars['Int']['output'];
  cnpj: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  copies: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  designs: Scalars['Int']['output'];
  emails: Scalars['Int']['output'];
  fantasyName: Scalars['Int']['output'];
  fee: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  initialDateContract: Scalars['Int']['output'];
  lps: Scalars['Int']['output'];
  movies: Scalars['Int']['output'];
  mrr: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  pipefyId: Scalars['Int']['output'];
  state: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type ReceivedClientCountOrderByAggregateInput = {
  address?: InputMaybe<SortOrder>;
  bis?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  cnpj?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  copies?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  designs?: InputMaybe<SortOrder>;
  emails?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  fee?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  lps?: InputMaybe<SortOrder>;
  movies?: InputMaybe<SortOrder>;
  mrr?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type ReceivedClientCreateManyInput = {
  address: Scalars['String']['input'];
  bis?: InputMaybe<Scalars['Int']['input']>;
  city: Scalars['String']['input'];
  cnpj: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  copies?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  designs?: InputMaybe<Scalars['Int']['input']>;
  emails?: InputMaybe<Scalars['Int']['input']>;
  fantasyName: Scalars['String']['input'];
  fee?: InputMaybe<Scalars['Float']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract: Scalars['String']['input'];
  lps?: InputMaybe<Scalars['Int']['input']>;
  movies?: InputMaybe<Scalars['Int']['input']>;
  mrr?: InputMaybe<Scalars['Float']['input']>;
  name: Scalars['String']['input'];
  pipefyId?: InputMaybe<Scalars['Int']['input']>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ReceivedClientGroupBy = {
  __typename?: 'ReceivedClientGroupBy';
  _avg?: Maybe<ReceivedClientAvgAggregate>;
  _count?: Maybe<ReceivedClientCountAggregate>;
  _max?: Maybe<ReceivedClientMaxAggregate>;
  _min?: Maybe<ReceivedClientMinAggregate>;
  _sum?: Maybe<ReceivedClientSumAggregate>;
  address: Scalars['String']['output'];
  bis: Scalars['Int']['output'];
  city: Scalars['String']['output'];
  cnpj: Scalars['String']['output'];
  content: Scalars['JSON']['output'];
  copies: Scalars['Int']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  designs: Scalars['Int']['output'];
  emails: Scalars['Int']['output'];
  fantasyName: Scalars['String']['output'];
  fee: Scalars['Float']['output'];
  id: Scalars['Int']['output'];
  initialDateContract: Scalars['String']['output'];
  lps: Scalars['Int']['output'];
  movies: Scalars['Int']['output'];
  mrr: Scalars['Float']['output'];
  name: Scalars['String']['output'];
  pipefyId?: Maybe<Scalars['Int']['output']>;
  state: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type ReceivedClientMaxAggregate = {
  __typename?: 'ReceivedClientMaxAggregate';
  address?: Maybe<Scalars['String']['output']>;
  bis?: Maybe<Scalars['Int']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  cnpj?: Maybe<Scalars['String']['output']>;
  copies?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  designs?: Maybe<Scalars['Int']['output']>;
  emails?: Maybe<Scalars['Int']['output']>;
  fantasyName?: Maybe<Scalars['String']['output']>;
  fee?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  initialDateContract?: Maybe<Scalars['String']['output']>;
  lps?: Maybe<Scalars['Int']['output']>;
  movies?: Maybe<Scalars['Int']['output']>;
  mrr?: Maybe<Scalars['Float']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pipefyId?: Maybe<Scalars['Int']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type ReceivedClientMaxOrderByAggregateInput = {
  address?: InputMaybe<SortOrder>;
  bis?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  cnpj?: InputMaybe<SortOrder>;
  copies?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  designs?: InputMaybe<SortOrder>;
  emails?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  fee?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  lps?: InputMaybe<SortOrder>;
  movies?: InputMaybe<SortOrder>;
  mrr?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type ReceivedClientMinAggregate = {
  __typename?: 'ReceivedClientMinAggregate';
  address?: Maybe<Scalars['String']['output']>;
  bis?: Maybe<Scalars['Int']['output']>;
  city?: Maybe<Scalars['String']['output']>;
  cnpj?: Maybe<Scalars['String']['output']>;
  copies?: Maybe<Scalars['Int']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  designs?: Maybe<Scalars['Int']['output']>;
  emails?: Maybe<Scalars['Int']['output']>;
  fantasyName?: Maybe<Scalars['String']['output']>;
  fee?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  initialDateContract?: Maybe<Scalars['String']['output']>;
  lps?: Maybe<Scalars['Int']['output']>;
  movies?: Maybe<Scalars['Int']['output']>;
  mrr?: Maybe<Scalars['Float']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  pipefyId?: Maybe<Scalars['Int']['output']>;
  state?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type ReceivedClientMinOrderByAggregateInput = {
  address?: InputMaybe<SortOrder>;
  bis?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  cnpj?: InputMaybe<SortOrder>;
  copies?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  designs?: InputMaybe<SortOrder>;
  emails?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  fee?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  lps?: InputMaybe<SortOrder>;
  movies?: InputMaybe<SortOrder>;
  mrr?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type ReceivedClientOrderByWithAggregationInput = {
  _avg?: InputMaybe<ReceivedClientAvgOrderByAggregateInput>;
  _count?: InputMaybe<ReceivedClientCountOrderByAggregateInput>;
  _max?: InputMaybe<ReceivedClientMaxOrderByAggregateInput>;
  _min?: InputMaybe<ReceivedClientMinOrderByAggregateInput>;
  _sum?: InputMaybe<ReceivedClientSumOrderByAggregateInput>;
  address?: InputMaybe<SortOrder>;
  bis?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  cnpj?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  copies?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  designs?: InputMaybe<SortOrder>;
  emails?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  fee?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  lps?: InputMaybe<SortOrder>;
  movies?: InputMaybe<SortOrder>;
  mrr?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrderInput>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type ReceivedClientOrderByWithRelationInput = {
  address?: InputMaybe<SortOrder>;
  bis?: InputMaybe<SortOrder>;
  city?: InputMaybe<SortOrder>;
  cnpj?: InputMaybe<SortOrder>;
  content?: InputMaybe<SortOrder>;
  copies?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  designs?: InputMaybe<SortOrder>;
  emails?: InputMaybe<SortOrder>;
  fantasyName?: InputMaybe<SortOrder>;
  fee?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  initialDateContract?: InputMaybe<SortOrder>;
  lps?: InputMaybe<SortOrder>;
  movies?: InputMaybe<SortOrder>;
  mrr?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrderInput>;
  state?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export enum ReceivedClientScalarFieldEnum {
  Address = 'address',
  Bis = 'bis',
  City = 'city',
  Cnpj = 'cnpj',
  Content = 'content',
  Copies = 'copies',
  CreatedAt = 'createdAt',
  Designs = 'designs',
  Emails = 'emails',
  FantasyName = 'fantasyName',
  Fee = 'fee',
  Id = 'id',
  InitialDateContract = 'initialDateContract',
  Lps = 'lps',
  Movies = 'movies',
  Mrr = 'mrr',
  Name = 'name',
  PipefyId = 'pipefyId',
  State = 'state',
  UpdatedAt = 'updatedAt'
}

export type ReceivedClientScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ReceivedClientScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ReceivedClientScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ReceivedClientScalarWhereWithAggregatesInput>>;
  address?: InputMaybe<StringWithAggregatesFilter>;
  bis?: InputMaybe<IntWithAggregatesFilter>;
  city?: InputMaybe<StringWithAggregatesFilter>;
  cnpj?: InputMaybe<StringWithAggregatesFilter>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  copies?: InputMaybe<IntWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  designs?: InputMaybe<IntWithAggregatesFilter>;
  emails?: InputMaybe<IntWithAggregatesFilter>;
  fantasyName?: InputMaybe<StringWithAggregatesFilter>;
  fee?: InputMaybe<FloatWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  initialDateContract?: InputMaybe<StringWithAggregatesFilter>;
  lps?: InputMaybe<IntWithAggregatesFilter>;
  movies?: InputMaybe<IntWithAggregatesFilter>;
  mrr?: InputMaybe<FloatWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  pipefyId?: InputMaybe<IntNullableWithAggregatesFilter>;
  state?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type ReceivedClientSumAggregate = {
  __typename?: 'ReceivedClientSumAggregate';
  bis?: Maybe<Scalars['Int']['output']>;
  copies?: Maybe<Scalars['Int']['output']>;
  designs?: Maybe<Scalars['Int']['output']>;
  emails?: Maybe<Scalars['Int']['output']>;
  fee?: Maybe<Scalars['Float']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  lps?: Maybe<Scalars['Int']['output']>;
  movies?: Maybe<Scalars['Int']['output']>;
  mrr?: Maybe<Scalars['Float']['output']>;
  pipefyId?: Maybe<Scalars['Int']['output']>;
};

export type ReceivedClientSumOrderByAggregateInput = {
  bis?: InputMaybe<SortOrder>;
  copies?: InputMaybe<SortOrder>;
  designs?: InputMaybe<SortOrder>;
  emails?: InputMaybe<SortOrder>;
  fee?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  lps?: InputMaybe<SortOrder>;
  movies?: InputMaybe<SortOrder>;
  mrr?: InputMaybe<SortOrder>;
  pipefyId?: InputMaybe<SortOrder>;
};

export type ReceivedClientUncheckedCreateInput = {
  address: Scalars['String']['input'];
  bis?: InputMaybe<Scalars['Int']['input']>;
  city: Scalars['String']['input'];
  cnpj: Scalars['String']['input'];
  content: Scalars['JSON']['input'];
  copies?: InputMaybe<Scalars['Int']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  designs?: InputMaybe<Scalars['Int']['input']>;
  emails?: InputMaybe<Scalars['Int']['input']>;
  fantasyName: Scalars['String']['input'];
  fee?: InputMaybe<Scalars['Float']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract: Scalars['String']['input'];
  lps?: InputMaybe<Scalars['Int']['input']>;
  movies?: InputMaybe<Scalars['Int']['input']>;
  mrr?: InputMaybe<Scalars['Float']['input']>;
  name: Scalars['String']['input'];
  pipefyId?: InputMaybe<Scalars['Int']['input']>;
  state: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type ReceivedClientUncheckedUpdateInput = {
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  bis?: InputMaybe<IntFieldUpdateOperationsInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  copies?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  designs?: InputMaybe<IntFieldUpdateOperationsInput>;
  emails?: InputMaybe<IntFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  fee?: InputMaybe<FloatFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<StringFieldUpdateOperationsInput>;
  lps?: InputMaybe<IntFieldUpdateOperationsInput>;
  movies?: InputMaybe<IntFieldUpdateOperationsInput>;
  mrr?: InputMaybe<FloatFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  pipefyId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ReceivedClientUncheckedUpdateManyInput = {
  address?: InputMaybe<StringFieldUpdateOperationsInput>;
  bis?: InputMaybe<IntFieldUpdateOperationsInput>;
  city?: InputMaybe<StringFieldUpdateOperationsInput>;
  cnpj?: InputMaybe<StringFieldUpdateOperationsInput>;
  content?: InputMaybe<Scalars['JSON']['input']>;
  copies?: InputMaybe<IntFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  designs?: InputMaybe<IntFieldUpdateOperationsInput>;
  emails?: InputMaybe<IntFieldUpdateOperationsInput>;
  fantasyName?: InputMaybe<StringFieldUpdateOperationsInput>;
  fee?: InputMaybe<FloatFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  initialDateContract?: InputMaybe<StringFieldUpdateOperationsInput>;
  lps?: InputMaybe<IntFieldUpdateOperationsInput>;
  movies?: InputMaybe<IntFieldUpdateOperationsInput>;
  mrr?: InputMaybe<FloatFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  pipefyId?: InputMaybe<NullableIntFieldUpdateOperationsInput>;
  state?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type ReceivedClientWhereInput = {
  AND?: InputMaybe<Array<ReceivedClientWhereInput>>;
  NOT?: InputMaybe<Array<ReceivedClientWhereInput>>;
  OR?: InputMaybe<Array<ReceivedClientWhereInput>>;
  address?: InputMaybe<StringFilter>;
  bis?: InputMaybe<IntFilter>;
  city?: InputMaybe<StringFilter>;
  cnpj?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  copies?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  designs?: InputMaybe<IntFilter>;
  emails?: InputMaybe<IntFilter>;
  fantasyName?: InputMaybe<StringFilter>;
  fee?: InputMaybe<FloatFilter>;
  id?: InputMaybe<IntFilter>;
  initialDateContract?: InputMaybe<StringFilter>;
  lps?: InputMaybe<IntFilter>;
  movies?: InputMaybe<IntFilter>;
  mrr?: InputMaybe<FloatFilter>;
  name?: InputMaybe<StringFilter>;
  pipefyId?: InputMaybe<IntNullableFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type ReceivedClientWhereUniqueInput = {
  AND?: InputMaybe<Array<ReceivedClientWhereInput>>;
  NOT?: InputMaybe<Array<ReceivedClientWhereInput>>;
  OR?: InputMaybe<Array<ReceivedClientWhereInput>>;
  address?: InputMaybe<StringFilter>;
  bis?: InputMaybe<IntFilter>;
  city?: InputMaybe<StringFilter>;
  cnpj?: InputMaybe<StringFilter>;
  content?: InputMaybe<JsonFilter>;
  copies?: InputMaybe<IntFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  designs?: InputMaybe<IntFilter>;
  emails?: InputMaybe<IntFilter>;
  fantasyName?: InputMaybe<StringFilter>;
  fee?: InputMaybe<FloatFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  initialDateContract?: InputMaybe<StringFilter>;
  lps?: InputMaybe<IntFilter>;
  movies?: InputMaybe<IntFilter>;
  mrr?: InputMaybe<FloatFilter>;
  name?: InputMaybe<StringFilter>;
  pipefyId?: InputMaybe<IntNullableFilter>;
  state?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type RegisterInputManual = {
  adimissionDate: Scalars['String']['input'];
  avatarUrl: Scalars['String']['input'];
  birthDate: Scalars['String']['input'];
  confirmationEmail: Scalars['String']['input'];
  email: Scalars['String']['input'];
  jobFunctionId: Scalars['Int']['input'];
  name: Scalars['String']['input'];
  organizationId: Scalars['Int']['input'];
  password: Scalars['String']['input'];
  passwordConfirmation: Scalars['String']['input'];
  phone: Scalars['String']['input'];
  stepId: Scalars['Int']['input'];
  teamId: Scalars['Int']['input'];
};

export type SelfStructure = {
  __typename?: 'SelfStructure';
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type SelfStructureAvgAggregate = {
  __typename?: 'SelfStructureAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type SelfStructureAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type SelfStructureCountAggregate = {
  __typename?: 'SelfStructureCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type SelfStructureCountOrderByAggregateInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type SelfStructureCreateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type SelfStructureCreateManyUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type SelfStructureCreateManyUserInputEnvelope = {
  data: Array<SelfStructureCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type SelfStructureCreateOrConnectWithoutUserInput = {
  create: SelfStructureUncheckedCreateWithoutUserInput;
  where: SelfStructureWhereUniqueInput;
};

export type SelfStructureCreateWithoutUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type SelfStructureGroupBy = {
  __typename?: 'SelfStructureGroupBy';
  _avg?: Maybe<SelfStructureAvgAggregate>;
  _count?: Maybe<SelfStructureCountAggregate>;
  _max?: Maybe<SelfStructureMaxAggregate>;
  _min?: Maybe<SelfStructureMinAggregate>;
  _sum?: Maybe<SelfStructureSumAggregate>;
  content?: Maybe<Scalars['JSON']['output']>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type SelfStructureListRelationFilter = {
  every?: InputMaybe<SelfStructureWhereInput>;
  none?: InputMaybe<SelfStructureWhereInput>;
  some?: InputMaybe<SelfStructureWhereInput>;
};

export type SelfStructureMaxAggregate = {
  __typename?: 'SelfStructureMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type SelfStructureMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type SelfStructureMinAggregate = {
  __typename?: 'SelfStructureMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type SelfStructureMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type SelfStructureOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type SelfStructureOrderByWithAggregationInput = {
  _avg?: InputMaybe<SelfStructureAvgOrderByAggregateInput>;
  _count?: InputMaybe<SelfStructureCountOrderByAggregateInput>;
  _max?: InputMaybe<SelfStructureMaxOrderByAggregateInput>;
  _min?: InputMaybe<SelfStructureMinOrderByAggregateInput>;
  _sum?: InputMaybe<SelfStructureSumOrderByAggregateInput>;
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type SelfStructureOrderByWithRelationInput = {
  content?: InputMaybe<SortOrderInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum SelfStructureScalarFieldEnum {
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid'
}

export type SelfStructureScalarWhereInput = {
  AND?: InputMaybe<Array<SelfStructureScalarWhereInput>>;
  NOT?: InputMaybe<Array<SelfStructureScalarWhereInput>>;
  OR?: InputMaybe<Array<SelfStructureScalarWhereInput>>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type SelfStructureScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<SelfStructureScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<SelfStructureScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<SelfStructureScalarWhereWithAggregatesInput>>;
  content?: InputMaybe<JsonNullableWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type SelfStructureSumAggregate = {
  __typename?: 'SelfStructureSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type SelfStructureSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type SelfStructureUncheckedCreateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type SelfStructureUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<SelfStructureCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<SelfStructureCreateWithoutUserInput>>;
  createMany?: InputMaybe<SelfStructureCreateManyUserInputEnvelope>;
};

export type SelfStructureUncheckedCreateWithoutUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type SelfStructureUncheckedUpdateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type SelfStructureUncheckedUpdateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type SelfStructureUncheckedUpdateManyWithoutUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type SelfStructureUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<SelfStructureCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<SelfStructureCreateWithoutUserInput>>;
  createMany?: InputMaybe<SelfStructureCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<SelfStructureScalarWhereInput>>;
  disconnect?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  set?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  update?: InputMaybe<Array<SelfStructureUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<SelfStructureUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<SelfStructureUpsertWithWhereUniqueWithoutUserInput>>;
};

export type SelfStructureUncheckedUpdateWithoutUserInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type SelfStructureUpdateManyWithWhereWithoutUserInput = {
  data: SelfStructureUncheckedUpdateManyWithoutUserInput;
  where: SelfStructureScalarWhereInput;
};

export type SelfStructureUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<SelfStructureCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<SelfStructureCreateWithoutUserInput>>;
  createMany?: InputMaybe<SelfStructureCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<SelfStructureScalarWhereInput>>;
  disconnect?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  set?: InputMaybe<Array<SelfStructureWhereUniqueInput>>;
  update?: InputMaybe<Array<SelfStructureUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<SelfStructureUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<SelfStructureUpsertWithWhereUniqueWithoutUserInput>>;
};

export type SelfStructureUpdateWithWhereUniqueWithoutUserInput = {
  data: SelfStructureUncheckedUpdateWithoutUserInput;
  where: SelfStructureWhereUniqueInput;
};

export type SelfStructureUpsertWithWhereUniqueWithoutUserInput = {
  create: SelfStructureUncheckedCreateWithoutUserInput;
  update: SelfStructureUncheckedUpdateWithoutUserInput;
  where: SelfStructureWhereUniqueInput;
};

export type SelfStructureWhereInput = {
  AND?: InputMaybe<Array<SelfStructureWhereInput>>;
  NOT?: InputMaybe<Array<SelfStructureWhereInput>>;
  OR?: InputMaybe<Array<SelfStructureWhereInput>>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type SelfStructureWhereUniqueInput = {
  AND?: InputMaybe<Array<SelfStructureWhereInput>>;
  NOT?: InputMaybe<Array<SelfStructureWhereInput>>;
  OR?: InputMaybe<Array<SelfStructureWhereInput>>;
  content?: InputMaybe<JsonNullableFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<Scalars['String']['input']>;
};

export type ServiceLevelAgreement = {
  __typename?: 'ServiceLevelAgreement';
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  project: Project;
  projectId: Scalars['Int']['output'];
  quantity: Scalars['Int']['output'];
  service: TypeService;
  target: Scalars['Int']['output'];
};

export type ServiceLevelAgreementAvgAggregate = {
  __typename?: 'ServiceLevelAgreementAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
  projectId?: Maybe<Scalars['Float']['output']>;
  quantity?: Maybe<Scalars['Float']['output']>;
  target?: Maybe<Scalars['Float']['output']>;
};

export type ServiceLevelAgreementAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  quantity?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type ServiceLevelAgreementCountAggregate = {
  __typename?: 'ServiceLevelAgreementCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  quantity: Scalars['Int']['output'];
  service: Scalars['Int']['output'];
  target: Scalars['Int']['output'];
};

export type ServiceLevelAgreementCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  quantity?: InputMaybe<SortOrder>;
  service?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type ServiceLevelAgreementCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
  quantity: Scalars['Int']['input'];
  service: TypeService;
  target: Scalars['Int']['input'];
};

export type ServiceLevelAgreementCreateManyProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  quantity: Scalars['Int']['input'];
  service: TypeService;
  target: Scalars['Int']['input'];
};

export type ServiceLevelAgreementCreateManyProjectInputEnvelope = {
  data: Array<ServiceLevelAgreementCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ServiceLevelAgreementCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ServiceLevelAgreementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ServiceLevelAgreementCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ServiceLevelAgreementCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ServiceLevelAgreementCreateManyProjectInputEnvelope>;
};

export type ServiceLevelAgreementCreateOrConnectWithoutProjectInput = {
  create: ServiceLevelAgreementUncheckedCreateWithoutProjectInput;
  where: ServiceLevelAgreementWhereUniqueInput;
};

export type ServiceLevelAgreementCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  name: Scalars['String']['input'];
  quantity: Scalars['Int']['input'];
  service: TypeService;
  target: Scalars['Int']['input'];
};

export type ServiceLevelAgreementGroupBy = {
  __typename?: 'ServiceLevelAgreementGroupBy';
  _avg?: Maybe<ServiceLevelAgreementAvgAggregate>;
  _count?: Maybe<ServiceLevelAgreementCountAggregate>;
  _max?: Maybe<ServiceLevelAgreementMaxAggregate>;
  _min?: Maybe<ServiceLevelAgreementMinAggregate>;
  _sum?: Maybe<ServiceLevelAgreementSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  projectId: Scalars['Int']['output'];
  quantity: Scalars['Int']['output'];
  service: TypeService;
  target: Scalars['Int']['output'];
};

export type ServiceLevelAgreementListRelationFilter = {
  every?: InputMaybe<ServiceLevelAgreementWhereInput>;
  none?: InputMaybe<ServiceLevelAgreementWhereInput>;
  some?: InputMaybe<ServiceLevelAgreementWhereInput>;
};

export type ServiceLevelAgreementMaxAggregate = {
  __typename?: 'ServiceLevelAgreementMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  quantity?: Maybe<Scalars['Int']['output']>;
  service?: Maybe<TypeService>;
  target?: Maybe<Scalars['Int']['output']>;
};

export type ServiceLevelAgreementMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  quantity?: InputMaybe<SortOrder>;
  service?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type ServiceLevelAgreementMinAggregate = {
  __typename?: 'ServiceLevelAgreementMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  quantity?: Maybe<Scalars['Int']['output']>;
  service?: Maybe<TypeService>;
  target?: Maybe<Scalars['Int']['output']>;
};

export type ServiceLevelAgreementMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  quantity?: InputMaybe<SortOrder>;
  service?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type ServiceLevelAgreementOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ServiceLevelAgreementOrderByWithAggregationInput = {
  _avg?: InputMaybe<ServiceLevelAgreementAvgOrderByAggregateInput>;
  _count?: InputMaybe<ServiceLevelAgreementCountOrderByAggregateInput>;
  _max?: InputMaybe<ServiceLevelAgreementMaxOrderByAggregateInput>;
  _min?: InputMaybe<ServiceLevelAgreementMinOrderByAggregateInput>;
  _sum?: InputMaybe<ServiceLevelAgreementSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  quantity?: InputMaybe<SortOrder>;
  service?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type ServiceLevelAgreementOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
  quantity?: InputMaybe<SortOrder>;
  service?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export enum ServiceLevelAgreementScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Name = 'name',
  ProjectId = 'projectId',
  Quantity = 'quantity',
  Service = 'service',
  Target = 'target'
}

export type ServiceLevelAgreementScalarWhereInput = {
  AND?: InputMaybe<Array<ServiceLevelAgreementScalarWhereInput>>;
  NOT?: InputMaybe<Array<ServiceLevelAgreementScalarWhereInput>>;
  OR?: InputMaybe<Array<ServiceLevelAgreementScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  projectId?: InputMaybe<IntFilter>;
  quantity?: InputMaybe<IntFilter>;
  service?: InputMaybe<EnumTypeServiceFilter>;
  target?: InputMaybe<IntFilter>;
};

export type ServiceLevelAgreementScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ServiceLevelAgreementScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ServiceLevelAgreementScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ServiceLevelAgreementScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
  quantity?: InputMaybe<IntWithAggregatesFilter>;
  service?: InputMaybe<EnumTypeServiceWithAggregatesFilter>;
  target?: InputMaybe<IntWithAggregatesFilter>;
};

export type ServiceLevelAgreementSumAggregate = {
  __typename?: 'ServiceLevelAgreementSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
  projectId?: Maybe<Scalars['Int']['output']>;
  quantity?: Maybe<Scalars['Int']['output']>;
  target?: Maybe<Scalars['Int']['output']>;
};

export type ServiceLevelAgreementSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
  projectId?: InputMaybe<SortOrder>;
  quantity?: InputMaybe<SortOrder>;
  target?: InputMaybe<SortOrder>;
};

export type ServiceLevelAgreementUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  projectId: Scalars['Int']['input'];
  quantity: Scalars['Int']['input'];
  service: TypeService;
  target: Scalars['Int']['input'];
};

export type ServiceLevelAgreementUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ServiceLevelAgreementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ServiceLevelAgreementCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ServiceLevelAgreementCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ServiceLevelAgreementCreateManyProjectInputEnvelope>;
};

export type ServiceLevelAgreementUncheckedCreateWithoutProjectInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  quantity: Scalars['Int']['input'];
  service: TypeService;
  target: Scalars['Int']['input'];
};

export type ServiceLevelAgreementUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  quantity?: InputMaybe<IntFieldUpdateOperationsInput>;
  service?: InputMaybe<EnumTypeServiceFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ServiceLevelAgreementUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  quantity?: InputMaybe<IntFieldUpdateOperationsInput>;
  service?: InputMaybe<EnumTypeServiceFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ServiceLevelAgreementUncheckedUpdateManyWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  quantity?: InputMaybe<IntFieldUpdateOperationsInput>;
  service?: InputMaybe<EnumTypeServiceFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ServiceLevelAgreementUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<ServiceLevelAgreementWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ServiceLevelAgreementCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ServiceLevelAgreementCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ServiceLevelAgreementCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<ServiceLevelAgreementWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ServiceLevelAgreementScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ServiceLevelAgreementWhereUniqueInput>>;
  set?: InputMaybe<Array<ServiceLevelAgreementWhereUniqueInput>>;
  update?: InputMaybe<Array<ServiceLevelAgreementUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<ServiceLevelAgreementUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<ServiceLevelAgreementUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type ServiceLevelAgreementUncheckedUpdateWithoutProjectInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  quantity?: InputMaybe<IntFieldUpdateOperationsInput>;
  service?: InputMaybe<EnumTypeServiceFieldUpdateOperationsInput>;
  target?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ServiceLevelAgreementUpdateManyWithWhereWithoutProjectInput = {
  data: ServiceLevelAgreementUncheckedUpdateManyWithoutProjectInput;
  where: ServiceLevelAgreementScalarWhereInput;
};

export type ServiceLevelAgreementUpdateWithWhereUniqueWithoutProjectInput = {
  data: ServiceLevelAgreementUncheckedUpdateWithoutProjectInput;
  where: ServiceLevelAgreementWhereUniqueInput;
};

export type ServiceLevelAgreementUpsertWithWhereUniqueWithoutProjectInput = {
  create: ServiceLevelAgreementUncheckedCreateWithoutProjectInput;
  update: ServiceLevelAgreementUncheckedUpdateWithoutProjectInput;
  where: ServiceLevelAgreementWhereUniqueInput;
};

export type ServiceLevelAgreementWhereInput = {
  AND?: InputMaybe<Array<ServiceLevelAgreementWhereInput>>;
  NOT?: InputMaybe<Array<ServiceLevelAgreementWhereInput>>;
  OR?: InputMaybe<Array<ServiceLevelAgreementWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  quantity?: InputMaybe<IntFilter>;
  service?: InputMaybe<EnumTypeServiceFilter>;
  target?: InputMaybe<IntFilter>;
};

export type ServiceLevelAgreementWhereUniqueInput = {
  AND?: InputMaybe<Array<ServiceLevelAgreementWhereInput>>;
  NOT?: InputMaybe<Array<ServiceLevelAgreementWhereInput>>;
  OR?: InputMaybe<Array<ServiceLevelAgreementWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<StringFilter>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  quantity?: InputMaybe<IntFilter>;
  service?: InputMaybe<EnumTypeServiceFilter>;
  target?: InputMaybe<IntFilter>;
};

export enum SortOrder {
  Asc = 'asc',
  Desc = 'desc'
}

export type SortOrderInput = {
  nulls?: InputMaybe<NullsOrder>;
  sort: SortOrder;
};

export type Step = {
  __typename?: 'Step';
  UserStep: Array<UserStep>;
  _count?: Maybe<StepCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};


export type StepUserStepArgs = {
  cursor?: InputMaybe<UserStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserStepWhereInput>;
};

export type StepAvgAggregate = {
  __typename?: 'StepAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type StepAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type StepCount = {
  __typename?: 'StepCount';
  UserStep: Scalars['Int']['output'];
};


export type StepCountUserStepArgs = {
  where?: InputMaybe<UserStepWhereInput>;
};

export type StepCountAggregate = {
  __typename?: 'StepCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type StepCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type StepCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type StepCreateNestedOneWithoutUserStepInput = {
  connect?: InputMaybe<StepWhereUniqueInput>;
  connectOrCreate?: InputMaybe<StepCreateOrConnectWithoutUserStepInput>;
  create?: InputMaybe<StepUncheckedCreateWithoutUserStepInput>;
};

export type StepCreateOrConnectWithoutUserStepInput = {
  create: StepUncheckedCreateWithoutUserStepInput;
  where: StepWhereUniqueInput;
};

export type StepGroupBy = {
  __typename?: 'StepGroupBy';
  _avg?: Maybe<StepAvgAggregate>;
  _count?: Maybe<StepCountAggregate>;
  _max?: Maybe<StepMaxAggregate>;
  _min?: Maybe<StepMinAggregate>;
  _sum?: Maybe<StepSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type StepMaxAggregate = {
  __typename?: 'StepMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type StepMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type StepMinAggregate = {
  __typename?: 'StepMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type StepMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type StepOrderByWithAggregationInput = {
  _avg?: InputMaybe<StepAvgOrderByAggregateInput>;
  _count?: InputMaybe<StepCountOrderByAggregateInput>;
  _max?: InputMaybe<StepMaxOrderByAggregateInput>;
  _min?: InputMaybe<StepMinOrderByAggregateInput>;
  _sum?: InputMaybe<StepSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type StepOrderByWithRelationInput = {
  UserStep?: InputMaybe<UserStepOrderByRelationAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type StepRelationFilter = {
  is?: InputMaybe<StepWhereInput>;
  isNot?: InputMaybe<StepWhereInput>;
};

export enum StepScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Name = 'name',
  UpdatedAt = 'updatedAt'
}

export type StepScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<StepScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<StepScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<StepScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type StepSumAggregate = {
  __typename?: 'StepSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type StepSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type StepUncheckedCreateInput = {
  UserStep?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutStepInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type StepUncheckedCreateWithoutUserStepInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type StepUncheckedUpdateInput = {
  UserStep?: InputMaybe<UserStepUncheckedUpdateManyWithoutStepNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type StepUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type StepWhereInput = {
  AND?: InputMaybe<Array<StepWhereInput>>;
  NOT?: InputMaybe<Array<StepWhereInput>>;
  OR?: InputMaybe<Array<StepWhereInput>>;
  UserStep?: InputMaybe<UserStepListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type StepWhereUniqueInput = {
  AND?: InputMaybe<Array<StepWhereInput>>;
  NOT?: InputMaybe<Array<StepWhereInput>>;
  OR?: InputMaybe<Array<StepWhereInput>>;
  UserStep?: InputMaybe<UserStepListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type StringFieldUpdateOperationsInput = {
  set?: InputMaybe<Scalars['String']['input']>;
};

export type StringFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringNullableFilter = {
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringNullableListFilter = {
  equals?: InputMaybe<Array<Scalars['String']['input']>>;
  has?: InputMaybe<Scalars['String']['input']>;
  hasEvery?: InputMaybe<Array<Scalars['String']['input']>>;
  hasSome?: InputMaybe<Array<Scalars['String']['input']>>;
  isEmpty?: InputMaybe<Scalars['Boolean']['input']>;
};

export type StringNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedStringNullableFilter>;
  _min?: InputMaybe<NestedStringNullableFilter>;
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type StringWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedStringFilter>;
  _min?: InputMaybe<NestedStringFilter>;
  contains?: InputMaybe<Scalars['String']['input']>;
  endsWith?: InputMaybe<Scalars['String']['input']>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedStringWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
  startsWith?: InputMaybe<Scalars['String']['input']>;
};

export type Subscription = {
  __typename?: 'Subscription';
  eventChangeCommentProject: SubscriptionPayloadComment;
  eventConnectionUser: ObjectNotification;
  eventUserExitKanban: ObjectNotification;
  eventUserUpdateKanban: ObjectNotification;
  eventUsersInKanban: SubscriptionPayload;
};

export type SubscriptionPayload = {
  __typename?: 'SubscriptionPayload';
  message?: Maybe<Scalars['String']['output']>;
  users?: Maybe<Array<User>>;
};

export type SubscriptionPayloadComment = {
  __typename?: 'SubscriptionPayloadComment';
  projectId: Scalars['ID']['output'];
};

export type Tag = {
  __typename?: 'Tag';
  _count?: Maybe<TagCount>;
  board: Board;
  boardId: Scalars['String']['output'];
  cardTags: Array<CardTags>;
  color: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};


export type TagCardTagsArgs = {
  cursor?: InputMaybe<CardTagsWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardTagsScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardTagsOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardTagsWhereInput>;
};

export type TagAvgAggregate = {
  __typename?: 'TagAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type TagAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type TagCount = {
  __typename?: 'TagCount';
  cardTags: Scalars['Int']['output'];
};


export type TagCountCardTagsArgs = {
  where?: InputMaybe<CardTagsWhereInput>;
};

export type TagCountAggregate = {
  __typename?: 'TagCountAggregate';
  _all: Scalars['Int']['output'];
  boardId: Scalars['Int']['output'];
  color: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type TagCountOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  color?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TagCreateManyBoardInput = {
  color: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TagCreateManyBoardInputEnvelope = {
  data: Array<TagCreateManyBoardInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TagCreateManyInput = {
  boardId: Scalars['String']['input'];
  color: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TagCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<TagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<TagCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<TagCreateWithoutBoardInput>>;
  createMany?: InputMaybe<TagCreateManyBoardInputEnvelope>;
};

export type TagCreateNestedOneWithoutCardTagsInput = {
  connect?: InputMaybe<TagWhereUniqueInput>;
  connectOrCreate?: InputMaybe<TagCreateOrConnectWithoutCardTagsInput>;
  create?: InputMaybe<TagUncheckedCreateWithoutCardTagsInput>;
};

export type TagCreateOrConnectWithoutBoardInput = {
  create: TagUncheckedCreateWithoutBoardInput;
  where: TagWhereUniqueInput;
};

export type TagCreateOrConnectWithoutCardTagsInput = {
  create: TagUncheckedCreateWithoutCardTagsInput;
  where: TagWhereUniqueInput;
};

export type TagCreateWithoutBoardInput = {
  cardTags?: InputMaybe<CardTagsCreateNestedManyWithoutTagInput>;
  color: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TagGroupBy = {
  __typename?: 'TagGroupBy';
  _avg?: Maybe<TagAvgAggregate>;
  _count?: Maybe<TagCountAggregate>;
  _max?: Maybe<TagMaxAggregate>;
  _min?: Maybe<TagMinAggregate>;
  _sum?: Maybe<TagSumAggregate>;
  boardId: Scalars['String']['output'];
  color: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type TagListRelationFilter = {
  every?: InputMaybe<TagWhereInput>;
  none?: InputMaybe<TagWhereInput>;
  some?: InputMaybe<TagWhereInput>;
};

export type TagMaxAggregate = {
  __typename?: 'TagMaxAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type TagMaxOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  color?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TagMinAggregate = {
  __typename?: 'TagMinAggregate';
  boardId?: Maybe<Scalars['String']['output']>;
  color?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type TagMinOrderByAggregateInput = {
  boardId?: InputMaybe<SortOrder>;
  color?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TagOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type TagOrderByWithAggregationInput = {
  _avg?: InputMaybe<TagAvgOrderByAggregateInput>;
  _count?: InputMaybe<TagCountOrderByAggregateInput>;
  _max?: InputMaybe<TagMaxOrderByAggregateInput>;
  _min?: InputMaybe<TagMinOrderByAggregateInput>;
  _sum?: InputMaybe<TagSumOrderByAggregateInput>;
  boardId?: InputMaybe<SortOrder>;
  color?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TagOrderByWithRelationInput = {
  board?: InputMaybe<BoardOrderByWithRelationInput>;
  boardId?: InputMaybe<SortOrder>;
  cardTags?: InputMaybe<CardTagsOrderByRelationAggregateInput>;
  color?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TagRelationFilter = {
  is?: InputMaybe<TagWhereInput>;
  isNot?: InputMaybe<TagWhereInput>;
};

export enum TagScalarFieldEnum {
  BoardId = 'boardId',
  Color = 'color',
  CreatedAt = 'createdAt',
  Id = 'id',
  Title = 'title',
  UpdatedAt = 'updatedAt'
}

export type TagScalarWhereInput = {
  AND?: InputMaybe<Array<TagScalarWhereInput>>;
  NOT?: InputMaybe<Array<TagScalarWhereInput>>;
  OR?: InputMaybe<Array<TagScalarWhereInput>>;
  boardId?: InputMaybe<StringFilter>;
  color?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type TagScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<TagScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<TagScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<TagScalarWhereWithAggregatesInput>>;
  boardId?: InputMaybe<StringWithAggregatesFilter>;
  color?: InputMaybe<StringWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type TagSumAggregate = {
  __typename?: 'TagSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type TagSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type TagUncheckedCreateInput = {
  boardId: Scalars['String']['input'];
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutTagInput>;
  color: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TagUncheckedCreateNestedManyWithoutBoardInput = {
  connect?: InputMaybe<Array<TagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<TagCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<TagCreateWithoutBoardInput>>;
  createMany?: InputMaybe<TagCreateManyBoardInputEnvelope>;
};

export type TagUncheckedCreateWithoutBoardInput = {
  cardTags?: InputMaybe<CardTagsUncheckedCreateNestedManyWithoutTagInput>;
  color: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TagUncheckedCreateWithoutCardTagsInput = {
  boardId: Scalars['String']['input'];
  color: Scalars['String']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TagUncheckedUpdateInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  cardTags?: InputMaybe<CardTagsUncheckedUpdateManyWithoutTagNestedInput>;
  color?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TagUncheckedUpdateManyInput = {
  boardId?: InputMaybe<StringFieldUpdateOperationsInput>;
  color?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TagUncheckedUpdateManyWithoutBoardInput = {
  color?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TagUncheckedUpdateManyWithoutBoardNestedInput = {
  connect?: InputMaybe<Array<TagWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<TagCreateOrConnectWithoutBoardInput>>;
  create?: InputMaybe<Array<TagCreateWithoutBoardInput>>;
  createMany?: InputMaybe<TagCreateManyBoardInputEnvelope>;
  delete?: InputMaybe<Array<TagWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<TagScalarWhereInput>>;
  disconnect?: InputMaybe<Array<TagWhereUniqueInput>>;
  set?: InputMaybe<Array<TagWhereUniqueInput>>;
  update?: InputMaybe<Array<TagUpdateWithWhereUniqueWithoutBoardInput>>;
  updateMany?: InputMaybe<Array<TagUpdateManyWithWhereWithoutBoardInput>>;
  upsert?: InputMaybe<Array<TagUpsertWithWhereUniqueWithoutBoardInput>>;
};

export type TagUncheckedUpdateWithoutBoardInput = {
  cardTags?: InputMaybe<CardTagsUncheckedUpdateManyWithoutTagNestedInput>;
  color?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TagUpdateManyWithWhereWithoutBoardInput = {
  data: TagUncheckedUpdateManyWithoutBoardInput;
  where: TagScalarWhereInput;
};

export type TagUpdateWithWhereUniqueWithoutBoardInput = {
  data: TagUncheckedUpdateWithoutBoardInput;
  where: TagWhereUniqueInput;
};

export type TagUpsertWithWhereUniqueWithoutBoardInput = {
  create: TagUncheckedCreateWithoutBoardInput;
  update: TagUncheckedUpdateWithoutBoardInput;
  where: TagWhereUniqueInput;
};

export type TagWhereInput = {
  AND?: InputMaybe<Array<TagWhereInput>>;
  NOT?: InputMaybe<Array<TagWhereInput>>;
  OR?: InputMaybe<Array<TagWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  cardTags?: InputMaybe<CardTagsListRelationFilter>;
  color?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type TagWhereUniqueInput = {
  AND?: InputMaybe<Array<TagWhereInput>>;
  NOT?: InputMaybe<Array<TagWhereInput>>;
  OR?: InputMaybe<Array<TagWhereInput>>;
  board?: InputMaybe<BoardRelationFilter>;
  boardId?: InputMaybe<StringFilter>;
  cardTags?: InputMaybe<CardTagsListRelationFilter>;
  color?: InputMaybe<StringFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
};

export type Task = {
  __typename?: 'Task';
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type TaskAvgAggregate = {
  __typename?: 'TaskAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type TaskAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type TaskCountAggregate = {
  __typename?: 'TaskCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type TaskCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type TaskCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type TaskGroupBy = {
  __typename?: 'TaskGroupBy';
  _avg?: Maybe<TaskAvgAggregate>;
  _count?: Maybe<TaskCountAggregate>;
  _max?: Maybe<TaskMaxAggregate>;
  _min?: Maybe<TaskMinAggregate>;
  _sum?: Maybe<TaskSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  title: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type TaskMaxAggregate = {
  __typename?: 'TaskMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type TaskMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type TaskMinAggregate = {
  __typename?: 'TaskMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  title?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type TaskMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type TaskOrderByWithAggregationInput = {
  _avg?: InputMaybe<TaskAvgOrderByAggregateInput>;
  _count?: InputMaybe<TaskCountOrderByAggregateInput>;
  _max?: InputMaybe<TaskMaxOrderByAggregateInput>;
  _min?: InputMaybe<TaskMinOrderByAggregateInput>;
  _sum?: InputMaybe<TaskSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type TaskOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  title?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum TaskScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Title = 'title',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid'
}

export type TaskScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<TaskScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<TaskScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<TaskScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  title?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type TaskSumAggregate = {
  __typename?: 'TaskSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type TaskSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type TaskUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type TaskUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type TaskUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  title?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type TaskWhereInput = {
  AND?: InputMaybe<Array<TaskWhereInput>>;
  NOT?: InputMaybe<Array<TaskWhereInput>>;
  OR?: InputMaybe<Array<TaskWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type TaskWhereUniqueInput = {
  AND?: InputMaybe<Array<TaskWhereInput>>;
  NOT?: InputMaybe<Array<TaskWhereInput>>;
  OR?: InputMaybe<Array<TaskWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  title?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type Team = {
  __typename?: 'Team';
  _count?: Maybe<TeamCount>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  thumbUrl: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userTeam: Array<UserTeam>;
};


export type TeamUserTeamArgs = {
  cursor?: InputMaybe<UserTeamWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserTeamScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserTeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserTeamWhereInput>;
};

export type TeamAvgAggregate = {
  __typename?: 'TeamAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type TeamAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type TeamCount = {
  __typename?: 'TeamCount';
  userTeam: Scalars['Int']['output'];
};


export type TeamCountUserTeamArgs = {
  where?: InputMaybe<UserTeamWhereInput>;
};

export type TeamCountAggregate = {
  __typename?: 'TeamCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  thumbUrl: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
};

export type TeamCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TeamCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TeamCreateNestedOneWithoutUserTeamInput = {
  connect?: InputMaybe<TeamWhereUniqueInput>;
  connectOrCreate?: InputMaybe<TeamCreateOrConnectWithoutUserTeamInput>;
  create?: InputMaybe<TeamUncheckedCreateWithoutUserTeamInput>;
};

export type TeamCreateOrConnectWithoutUserTeamInput = {
  create: TeamUncheckedCreateWithoutUserTeamInput;
  where: TeamWhereUniqueInput;
};

export type TeamGroupBy = {
  __typename?: 'TeamGroupBy';
  _avg?: Maybe<TeamAvgAggregate>;
  _count?: Maybe<TeamCountAggregate>;
  _max?: Maybe<TeamMaxAggregate>;
  _min?: Maybe<TeamMinAggregate>;
  _sum?: Maybe<TeamSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  name: Scalars['String']['output'];
  thumbUrl: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
};

export type TeamMaxAggregate = {
  __typename?: 'TeamMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  thumbUrl?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type TeamMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TeamMinAggregate = {
  __typename?: 'TeamMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  name?: Maybe<Scalars['String']['output']>;
  thumbUrl?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
};

export type TeamMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TeamOrderByWithAggregationInput = {
  _avg?: InputMaybe<TeamAvgOrderByAggregateInput>;
  _count?: InputMaybe<TeamCountOrderByAggregateInput>;
  _max?: InputMaybe<TeamMaxOrderByAggregateInput>;
  _min?: InputMaybe<TeamMinOrderByAggregateInput>;
  _sum?: InputMaybe<TeamSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
};

export type TeamOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userTeam?: InputMaybe<UserTeamOrderByRelationAggregateInput>;
};

export type TeamRelationFilter = {
  is?: InputMaybe<TeamWhereInput>;
  isNot?: InputMaybe<TeamWhereInput>;
};

export enum TeamScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Name = 'name',
  ThumbUrl = 'thumbUrl',
  UpdatedAt = 'updatedAt'
}

export type TeamScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<TeamScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<TeamScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<TeamScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  thumbUrl?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
};

export type TeamSumAggregate = {
  __typename?: 'TeamSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type TeamSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type TeamUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutTeamInput>;
};

export type TeamUncheckedCreateWithoutUserTeamInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name: Scalars['String']['input'];
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TeamUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  thumbUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userTeam?: InputMaybe<UserTeamUncheckedUpdateManyWithoutTeamNestedInput>;
};

export type TeamUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  thumbUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TeamWhereInput = {
  AND?: InputMaybe<Array<TeamWhereInput>>;
  NOT?: InputMaybe<Array<TeamWhereInput>>;
  OR?: InputMaybe<Array<TeamWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  name?: InputMaybe<StringFilter>;
  thumbUrl?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userTeam?: InputMaybe<UserTeamListRelationFilter>;
};

export type TeamWhereUniqueInput = {
  AND?: InputMaybe<Array<TeamWhereInput>>;
  NOT?: InputMaybe<Array<TeamWhereInput>>;
  OR?: InputMaybe<Array<TeamWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  name?: InputMaybe<Scalars['String']['input']>;
  thumbUrl?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userTeam?: InputMaybe<UserTeamListRelationFilter>;
};

export type ThrowErrorFront = {
  __typename?: 'ThrowErrorFront';
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
};

export type ThrowErrorFrontAvgAggregate = {
  __typename?: 'ThrowErrorFrontAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type ThrowErrorFrontAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type ThrowErrorFrontCountAggregate = {
  __typename?: 'ThrowErrorFrontCountAggregate';
  _all: Scalars['Int']['output'];
  content: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
};

export type ThrowErrorFrontCountOrderByAggregateInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type ThrowErrorFrontCreateManyInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type ThrowErrorFrontGroupBy = {
  __typename?: 'ThrowErrorFrontGroupBy';
  _avg?: Maybe<ThrowErrorFrontAvgAggregate>;
  _count?: Maybe<ThrowErrorFrontCountAggregate>;
  _max?: Maybe<ThrowErrorFrontMaxAggregate>;
  _min?: Maybe<ThrowErrorFrontMinAggregate>;
  _sum?: Maybe<ThrowErrorFrontSumAggregate>;
  content: Scalars['JSON']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
};

export type ThrowErrorFrontMaxAggregate = {
  __typename?: 'ThrowErrorFrontMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type ThrowErrorFrontMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type ThrowErrorFrontMinAggregate = {
  __typename?: 'ThrowErrorFrontMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
};

export type ThrowErrorFrontMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type ThrowErrorFrontOrderByWithAggregationInput = {
  _avg?: InputMaybe<ThrowErrorFrontAvgOrderByAggregateInput>;
  _count?: InputMaybe<ThrowErrorFrontCountOrderByAggregateInput>;
  _max?: InputMaybe<ThrowErrorFrontMaxOrderByAggregateInput>;
  _min?: InputMaybe<ThrowErrorFrontMinOrderByAggregateInput>;
  _sum?: InputMaybe<ThrowErrorFrontSumOrderByAggregateInput>;
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export type ThrowErrorFrontOrderByWithRelationInput = {
  content?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
};

export enum ThrowErrorFrontScalarFieldEnum {
  Content = 'content',
  CreatedAt = 'createdAt',
  Id = 'id'
}

export type ThrowErrorFrontScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ThrowErrorFrontScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ThrowErrorFrontScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ThrowErrorFrontScalarWhereWithAggregatesInput>>;
  content?: InputMaybe<JsonWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
};

export type ThrowErrorFrontSumAggregate = {
  __typename?: 'ThrowErrorFrontSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type ThrowErrorFrontSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type ThrowErrorFrontUncheckedCreateInput = {
  content: Scalars['JSON']['input'];
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type ThrowErrorFrontUncheckedUpdateInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ThrowErrorFrontUncheckedUpdateManyInput = {
  content?: InputMaybe<Scalars['JSON']['input']>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ThrowErrorFrontWhereInput = {
  AND?: InputMaybe<Array<ThrowErrorFrontWhereInput>>;
  NOT?: InputMaybe<Array<ThrowErrorFrontWhereInput>>;
  OR?: InputMaybe<Array<ThrowErrorFrontWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
};

export type ThrowErrorFrontWhereUniqueInput = {
  AND?: InputMaybe<Array<ThrowErrorFrontWhereInput>>;
  NOT?: InputMaybe<Array<ThrowErrorFrontWhereInput>>;
  OR?: InputMaybe<Array<ThrowErrorFrontWhereInput>>;
  content?: InputMaybe<JsonFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
};

export type TokenFirebase = {
  __typename?: 'TokenFirebase';
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  token: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type TokenFirebaseAvgAggregate = {
  __typename?: 'TokenFirebaseAvgAggregate';
  id?: Maybe<Scalars['Float']['output']>;
};

export type TokenFirebaseAvgOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type TokenFirebaseCountAggregate = {
  __typename?: 'TokenFirebaseCountAggregate';
  _all: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  id: Scalars['Int']['output'];
  token: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type TokenFirebaseCountOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  token?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type TokenFirebaseCreateManyInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  token: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type TokenFirebaseCreateManyUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  token: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TokenFirebaseCreateManyUserInputEnvelope = {
  data: Array<TokenFirebaseCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type TokenFirebaseCreateOrConnectWithoutUserInput = {
  create: TokenFirebaseUncheckedCreateWithoutUserInput;
  where: TokenFirebaseWhereUniqueInput;
};

export type TokenFirebaseCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  token: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TokenFirebaseGroupBy = {
  __typename?: 'TokenFirebaseGroupBy';
  _avg?: Maybe<TokenFirebaseAvgAggregate>;
  _count?: Maybe<TokenFirebaseCountAggregate>;
  _max?: Maybe<TokenFirebaseMaxAggregate>;
  _min?: Maybe<TokenFirebaseMinAggregate>;
  _sum?: Maybe<TokenFirebaseSumAggregate>;
  createdAt: Scalars['DateTimeISO']['output'];
  id: Scalars['Int']['output'];
  token: Scalars['String']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
};

export type TokenFirebaseListRelationFilter = {
  every?: InputMaybe<TokenFirebaseWhereInput>;
  none?: InputMaybe<TokenFirebaseWhereInput>;
  some?: InputMaybe<TokenFirebaseWhereInput>;
};

export type TokenFirebaseMaxAggregate = {
  __typename?: 'TokenFirebaseMaxAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type TokenFirebaseMaxOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  token?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type TokenFirebaseMinAggregate = {
  __typename?: 'TokenFirebaseMinAggregate';
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  id?: Maybe<Scalars['Int']['output']>;
  token?: Maybe<Scalars['String']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type TokenFirebaseMinOrderByAggregateInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  token?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type TokenFirebaseOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type TokenFirebaseOrderByWithAggregationInput = {
  _avg?: InputMaybe<TokenFirebaseAvgOrderByAggregateInput>;
  _count?: InputMaybe<TokenFirebaseCountOrderByAggregateInput>;
  _max?: InputMaybe<TokenFirebaseMaxOrderByAggregateInput>;
  _min?: InputMaybe<TokenFirebaseMinOrderByAggregateInput>;
  _sum?: InputMaybe<TokenFirebaseSumOrderByAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  token?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type TokenFirebaseOrderByWithRelationInput = {
  createdAt?: InputMaybe<SortOrder>;
  id?: InputMaybe<SortOrder>;
  token?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum TokenFirebaseScalarFieldEnum {
  CreatedAt = 'createdAt',
  Id = 'id',
  Token = 'token',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid'
}

export type TokenFirebaseScalarWhereInput = {
  AND?: InputMaybe<Array<TokenFirebaseScalarWhereInput>>;
  NOT?: InputMaybe<Array<TokenFirebaseScalarWhereInput>>;
  OR?: InputMaybe<Array<TokenFirebaseScalarWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  token?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type TokenFirebaseScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<TokenFirebaseScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<TokenFirebaseScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<TokenFirebaseScalarWhereWithAggregatesInput>>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  id?: InputMaybe<IntWithAggregatesFilter>;
  token?: InputMaybe<StringWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type TokenFirebaseSumAggregate = {
  __typename?: 'TokenFirebaseSumAggregate';
  id?: Maybe<Scalars['Int']['output']>;
};

export type TokenFirebaseSumOrderByAggregateInput = {
  id?: InputMaybe<SortOrder>;
};

export type TokenFirebaseUncheckedCreateInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  token: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
};

export type TokenFirebaseUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<TokenFirebaseCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<TokenFirebaseCreateWithoutUserInput>>;
  createMany?: InputMaybe<TokenFirebaseCreateManyUserInputEnvelope>;
};

export type TokenFirebaseUncheckedCreateWithoutUserInput = {
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  id?: InputMaybe<Scalars['Int']['input']>;
  token: Scalars['String']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
};

export type TokenFirebaseUncheckedUpdateInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  token?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type TokenFirebaseUncheckedUpdateManyInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  token?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type TokenFirebaseUncheckedUpdateManyWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  token?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TokenFirebaseUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<TokenFirebaseCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<TokenFirebaseCreateWithoutUserInput>>;
  createMany?: InputMaybe<TokenFirebaseCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<TokenFirebaseScalarWhereInput>>;
  disconnect?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  set?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  update?: InputMaybe<Array<TokenFirebaseUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<TokenFirebaseUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<TokenFirebaseUpsertWithWhereUniqueWithoutUserInput>>;
};

export type TokenFirebaseUncheckedUpdateWithoutUserInput = {
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  id?: InputMaybe<IntFieldUpdateOperationsInput>;
  token?: InputMaybe<StringFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
};

export type TokenFirebaseUpdateManyWithWhereWithoutUserInput = {
  data: TokenFirebaseUncheckedUpdateManyWithoutUserInput;
  where: TokenFirebaseScalarWhereInput;
};

export type TokenFirebaseUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<TokenFirebaseCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<TokenFirebaseCreateWithoutUserInput>>;
  createMany?: InputMaybe<TokenFirebaseCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<TokenFirebaseScalarWhereInput>>;
  disconnect?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  set?: InputMaybe<Array<TokenFirebaseWhereUniqueInput>>;
  update?: InputMaybe<Array<TokenFirebaseUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<TokenFirebaseUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<TokenFirebaseUpsertWithWhereUniqueWithoutUserInput>>;
};

export type TokenFirebaseUpdateWithWhereUniqueWithoutUserInput = {
  data: TokenFirebaseUncheckedUpdateWithoutUserInput;
  where: TokenFirebaseWhereUniqueInput;
};

export type TokenFirebaseUpsertWithWhereUniqueWithoutUserInput = {
  create: TokenFirebaseUncheckedCreateWithoutUserInput;
  update: TokenFirebaseUncheckedUpdateWithoutUserInput;
  where: TokenFirebaseWhereUniqueInput;
};

export type TokenFirebaseWhereInput = {
  AND?: InputMaybe<Array<TokenFirebaseWhereInput>>;
  NOT?: InputMaybe<Array<TokenFirebaseWhereInput>>;
  OR?: InputMaybe<Array<TokenFirebaseWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<IntFilter>;
  token?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type TokenFirebaseWhereUniqueInput = {
  AND?: InputMaybe<Array<TokenFirebaseWhereInput>>;
  NOT?: InputMaybe<Array<TokenFirebaseWhereInput>>;
  OR?: InputMaybe<Array<TokenFirebaseWhereInput>>;
  createdAt?: InputMaybe<DateTimeFilter>;
  id?: InputMaybe<Scalars['Int']['input']>;
  token?: InputMaybe<StringFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export enum TypeService {
  Copywriting = 'copywriting',
  Creatives = 'creatives',
  DevelopmentCopywriter = 'developmentCopywriter',
  HoursMaintenance = 'hoursMaintenance',
  HoursSetup = 'hoursSetup',
  LandingPage = 'landingPage',
  TestAbc = 'testABC',
  Videos = 'videos'
}

export type User = {
  __typename?: 'User';
  AcessHistoryUser: Array<AcessHistoryUser>;
  _count?: Maybe<UserCount>;
  active: Scalars['Boolean']['output'];
  archives: Array<Archives>;
  avatarUrl: Scalars['String']['output'];
  boardCreatedBy: Array<Board>;
  boardUpdatedBy: Array<Board>;
  cardAssignment: Array<CardAssignment>;
  cardComment: Array<CardComment>;
  cardCreatedBy: Array<Card>;
  cardMovements: Array<CardMovement>;
  cardUpdatedBy: Array<Card>;
  client: Array<Client>;
  coardMenbership: Array<BoardMenbership>;
  columnCreatedBy: Array<Column>;
  columnUpdatedBy: Array<Column>;
  commentProjects: Array<CommentProject>;
  createdAt: Scalars['DateTimeISO']['output'];
  email: Scalars['String']['output'];
  fieldValueCreated: Array<Field>;
  fieldValueCreatedBy: Array<FieldsValue>;
  fieldValueUpdated: Array<Field>;
  groupCreatedBy: Array<Group>;
  groupUpdatedBy: Array<Group>;
  groupUser: Array<GroupUser>;
  historyFlagCreatedBy: Array<HistoryFlag>;
  historyMonthlyRecurringRevenue: Array<HistoryMonthlyRecurringRevenue>;
  historyStepCreatedBy: Array<HistoryStep>;
  invest: Array<Invest>;
  investStatus: InvestStatus;
  kr: Array<Kr>;
  krCommentProject: Array<KrCommentProject>;
  krCreatedBy: Array<Kr>;
  name: Scalars['String']['output'];
  nickName: Scalars['String']['output'];
  notfyCreatedBy: Array<Notfy>;
  notfyUpdateddBy: Array<Notfy>;
  objectiveCreatedBy: Array<Objective>;
  objectiveUpdatedBy: Array<Objective>;
  okrObjectiveProject: Array<OkrObjectiveProject>;
  okrProject: Array<OkrProject>;
  okrProjectHistory: Array<OkrProjectHistory>;
  personalInfo?: Maybe<Scalars['JSON']['output']>;
  primitiveStreenghtCreatedBy: Array<PrimitiveStreenght>;
  primitiveStreenghtUpdatedBy: Array<PrimitiveStreenght>;
  projectCreatedBy: Array<Project>;
  projectUpdatedBy: Array<Project>;
  role: Role;
  selfStructure: Array<SelfStructure>;
  tokenFirebase: Array<TokenFirebase>;
  typeUser: TypeUser;
  updatedAt: Scalars['DateTimeISO']['output'];
  userJobFunction: Array<UserJobFunction>;
  userNotfy: Array<UserNotfy>;
  userOrganization: Array<UserOrganization>;
  userSteps: Array<UserStep>;
  userTeam: Array<UserTeam>;
  uuid: Scalars['String']['output'];
  viewedCommentProject: Array<ViewedCommentProject>;
};


export type UserAcessHistoryUserArgs = {
  cursor?: InputMaybe<AcessHistoryUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<AcessHistoryUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<AcessHistoryUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type UserArchivesArgs = {
  cursor?: InputMaybe<ArchivesWhereUniqueInput>;
  distinct?: InputMaybe<Array<ArchivesScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ArchivesOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ArchivesWhereInput>;
};


export type UserBoardCreatedByArgs = {
  cursor?: InputMaybe<BoardWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardWhereInput>;
};


export type UserBoardUpdatedByArgs = {
  cursor?: InputMaybe<BoardWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardWhereInput>;
};


export type UserCardAssignmentArgs = {
  cursor?: InputMaybe<CardAssignmentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardAssignmentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardAssignmentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type UserCardCommentArgs = {
  cursor?: InputMaybe<CardCommentWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardCommentScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardCommentOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardCommentWhereInput>;
};


export type UserCardCreatedByArgs = {
  cursor?: InputMaybe<CardWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardWhereInput>;
};


export type UserCardMovementsArgs = {
  cursor?: InputMaybe<CardMovementWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardMovementScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardMovementOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardMovementWhereInput>;
};


export type UserCardUpdatedByArgs = {
  cursor?: InputMaybe<CardWhereUniqueInput>;
  distinct?: InputMaybe<Array<CardScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CardOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CardWhereInput>;
};


export type UserClientArgs = {
  cursor?: InputMaybe<ClientWhereUniqueInput>;
  distinct?: InputMaybe<Array<ClientScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ClientOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ClientWhereInput>;
};


export type UserCoardMenbershipArgs = {
  cursor?: InputMaybe<BoardMenbershipWhereUniqueInput>;
  distinct?: InputMaybe<Array<BoardMenbershipScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<BoardMenbershipOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type UserColumnCreatedByArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<ColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type UserColumnUpdatedByArgs = {
  cursor?: InputMaybe<ColumnWhereUniqueInput>;
  distinct?: InputMaybe<Array<ColumnScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ColumnOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ColumnWhereInput>;
};


export type UserCommentProjectsArgs = {
  cursor?: InputMaybe<CommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<CommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<CommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type UserFieldValueCreatedArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldWhereInput>;
};


export type UserFieldValueCreatedByArgs = {
  cursor?: InputMaybe<FieldsValueWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldsValueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldsValueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type UserFieldValueUpdatedArgs = {
  cursor?: InputMaybe<FieldWhereUniqueInput>;
  distinct?: InputMaybe<Array<FieldScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<FieldOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<FieldWhereInput>;
};


export type UserGroupCreatedByArgs = {
  cursor?: InputMaybe<GroupWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupWhereInput>;
};


export type UserGroupUpdatedByArgs = {
  cursor?: InputMaybe<GroupWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupWhereInput>;
};


export type UserGroupUserArgs = {
  cursor?: InputMaybe<GroupUserWhereUniqueInput>;
  distinct?: InputMaybe<Array<GroupUserScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<GroupUserOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<GroupUserWhereInput>;
};


export type UserHistoryFlagCreatedByArgs = {
  cursor?: InputMaybe<HistoryFlagWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryFlagScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryFlagOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type UserHistoryMonthlyRecurringRevenueArgs = {
  cursor?: InputMaybe<HistoryMonthlyRecurringRevenueWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryMonthlyRecurringRevenueScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryMonthlyRecurringRevenueOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type UserHistoryStepCreatedByArgs = {
  cursor?: InputMaybe<HistoryStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<HistoryStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<HistoryStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type UserInvestArgs = {
  cursor?: InputMaybe<InvestWhereUniqueInput>;
  distinct?: InputMaybe<Array<InvestScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<InvestOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<InvestWhereInput>;
};


export type UserKrArgs = {
  cursor?: InputMaybe<KrWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrWhereInput>;
};


export type UserKrCommentProjectArgs = {
  cursor?: InputMaybe<KrCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type UserKrCreatedByArgs = {
  cursor?: InputMaybe<KrWhereUniqueInput>;
  distinct?: InputMaybe<Array<KrScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<KrOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<KrWhereInput>;
};


export type UserNotfyCreatedByArgs = {
  cursor?: InputMaybe<NotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<NotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<NotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotfyWhereInput>;
};


export type UserNotfyUpdateddByArgs = {
  cursor?: InputMaybe<NotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<NotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<NotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<NotfyWhereInput>;
};


export type UserObjectiveCreatedByArgs = {
  cursor?: InputMaybe<ObjectiveWhereUniqueInput>;
  distinct?: InputMaybe<Array<ObjectiveScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ObjectiveOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type UserObjectiveUpdatedByArgs = {
  cursor?: InputMaybe<ObjectiveWhereUniqueInput>;
  distinct?: InputMaybe<Array<ObjectiveScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ObjectiveOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type UserOkrObjectiveProjectArgs = {
  cursor?: InputMaybe<OkrObjectiveProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrObjectiveProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrObjectiveProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type UserOkrProjectArgs = {
  cursor?: InputMaybe<OkrProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type UserOkrProjectHistoryArgs = {
  cursor?: InputMaybe<OkrProjectHistoryWhereUniqueInput>;
  distinct?: InputMaybe<Array<OkrProjectHistoryScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<OkrProjectHistoryOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type UserPrimitiveStreenghtCreatedByArgs = {
  cursor?: InputMaybe<PrimitiveStreenghtWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveStreenghtScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveStreenghtOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type UserPrimitiveStreenghtUpdatedByArgs = {
  cursor?: InputMaybe<PrimitiveStreenghtWhereUniqueInput>;
  distinct?: InputMaybe<Array<PrimitiveStreenghtScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<PrimitiveStreenghtOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type UserProjectCreatedByArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type UserProjectUpdatedByArgs = {
  cursor?: InputMaybe<ProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ProjectWhereInput>;
};


export type UserSelfStructureArgs = {
  cursor?: InputMaybe<SelfStructureWhereUniqueInput>;
  distinct?: InputMaybe<Array<SelfStructureScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<SelfStructureOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type UserTokenFirebaseArgs = {
  cursor?: InputMaybe<TokenFirebaseWhereUniqueInput>;
  distinct?: InputMaybe<Array<TokenFirebaseScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<TokenFirebaseOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type UserUserJobFunctionArgs = {
  cursor?: InputMaybe<UserJobFunctionWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserJobFunctionScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserJobFunctionOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type UserUserNotfyArgs = {
  cursor?: InputMaybe<UserNotfyWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserNotfyScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserNotfyOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type UserUserOrganizationArgs = {
  cursor?: InputMaybe<UserOrganizationWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserOrganizationScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserOrganizationOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type UserUserStepsArgs = {
  cursor?: InputMaybe<UserStepWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserStepScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserStepOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserStepWhereInput>;
};


export type UserUserTeamArgs = {
  cursor?: InputMaybe<UserTeamWhereUniqueInput>;
  distinct?: InputMaybe<Array<UserTeamScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<UserTeamOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<UserTeamWhereInput>;
};


export type UserViewedCommentProjectArgs = {
  cursor?: InputMaybe<ViewedCommentProjectWhereUniqueInput>;
  distinct?: InputMaybe<Array<ViewedCommentProjectScalarFieldEnum>>;
  orderBy?: InputMaybe<Array<ViewedCommentProjectOrderByWithRelationInput>>;
  skip?: InputMaybe<Scalars['Int']['input']>;
  take?: InputMaybe<Scalars['Int']['input']>;
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};

export type UserCount = {
  __typename?: 'UserCount';
  AcessHistoryUser: Scalars['Int']['output'];
  archives: Scalars['Int']['output'];
  boardCreatedBy: Scalars['Int']['output'];
  boardUpdatedBy: Scalars['Int']['output'];
  cardAssignment: Scalars['Int']['output'];
  cardComment: Scalars['Int']['output'];
  cardCreatedBy: Scalars['Int']['output'];
  cardMovements: Scalars['Int']['output'];
  cardUpdatedBy: Scalars['Int']['output'];
  client: Scalars['Int']['output'];
  coardMenbership: Scalars['Int']['output'];
  columnCreatedBy: Scalars['Int']['output'];
  columnUpdatedBy: Scalars['Int']['output'];
  commentProjects: Scalars['Int']['output'];
  fieldValueCreated: Scalars['Int']['output'];
  fieldValueCreatedBy: Scalars['Int']['output'];
  fieldValueUpdated: Scalars['Int']['output'];
  groupCreatedBy: Scalars['Int']['output'];
  groupUpdatedBy: Scalars['Int']['output'];
  groupUser: Scalars['Int']['output'];
  historyFlagCreatedBy: Scalars['Int']['output'];
  historyMonthlyRecurringRevenue: Scalars['Int']['output'];
  historyStepCreatedBy: Scalars['Int']['output'];
  invest: Scalars['Int']['output'];
  kr: Scalars['Int']['output'];
  krCommentProject: Scalars['Int']['output'];
  krCreatedBy: Scalars['Int']['output'];
  notfyCreatedBy: Scalars['Int']['output'];
  notfyUpdateddBy: Scalars['Int']['output'];
  objectiveCreatedBy: Scalars['Int']['output'];
  objectiveUpdatedBy: Scalars['Int']['output'];
  okrObjectiveProject: Scalars['Int']['output'];
  okrProject: Scalars['Int']['output'];
  okrProjectHistory: Scalars['Int']['output'];
  primitiveStreenghtCreatedBy: Scalars['Int']['output'];
  primitiveStreenghtUpdatedBy: Scalars['Int']['output'];
  projectCreatedBy: Scalars['Int']['output'];
  projectUpdatedBy: Scalars['Int']['output'];
  selfStructure: Scalars['Int']['output'];
  tokenFirebase: Scalars['Int']['output'];
  userJobFunction: Scalars['Int']['output'];
  userNotfy: Scalars['Int']['output'];
  userOrganization: Scalars['Int']['output'];
  userSteps: Scalars['Int']['output'];
  userTeam: Scalars['Int']['output'];
  viewedCommentProject: Scalars['Int']['output'];
};


export type UserCountAcessHistoryUserArgs = {
  where?: InputMaybe<AcessHistoryUserWhereInput>;
};


export type UserCountArchivesArgs = {
  where?: InputMaybe<ArchivesWhereInput>;
};


export type UserCountBoardCreatedByArgs = {
  where?: InputMaybe<BoardWhereInput>;
};


export type UserCountBoardUpdatedByArgs = {
  where?: InputMaybe<BoardWhereInput>;
};


export type UserCountCardAssignmentArgs = {
  where?: InputMaybe<CardAssignmentWhereInput>;
};


export type UserCountCardCommentArgs = {
  where?: InputMaybe<CardCommentWhereInput>;
};


export type UserCountCardCreatedByArgs = {
  where?: InputMaybe<CardWhereInput>;
};


export type UserCountCardMovementsArgs = {
  where?: InputMaybe<CardMovementWhereInput>;
};


export type UserCountCardUpdatedByArgs = {
  where?: InputMaybe<CardWhereInput>;
};


export type UserCountClientArgs = {
  where?: InputMaybe<ClientWhereInput>;
};


export type UserCountCoardMenbershipArgs = {
  where?: InputMaybe<BoardMenbershipWhereInput>;
};


export type UserCountColumnCreatedByArgs = {
  where?: InputMaybe<ColumnWhereInput>;
};


export type UserCountColumnUpdatedByArgs = {
  where?: InputMaybe<ColumnWhereInput>;
};


export type UserCountCommentProjectsArgs = {
  where?: InputMaybe<CommentProjectWhereInput>;
};


export type UserCountFieldValueCreatedArgs = {
  where?: InputMaybe<FieldWhereInput>;
};


export type UserCountFieldValueCreatedByArgs = {
  where?: InputMaybe<FieldsValueWhereInput>;
};


export type UserCountFieldValueUpdatedArgs = {
  where?: InputMaybe<FieldWhereInput>;
};


export type UserCountGroupCreatedByArgs = {
  where?: InputMaybe<GroupWhereInput>;
};


export type UserCountGroupUpdatedByArgs = {
  where?: InputMaybe<GroupWhereInput>;
};


export type UserCountGroupUserArgs = {
  where?: InputMaybe<GroupUserWhereInput>;
};


export type UserCountHistoryFlagCreatedByArgs = {
  where?: InputMaybe<HistoryFlagWhereInput>;
};


export type UserCountHistoryMonthlyRecurringRevenueArgs = {
  where?: InputMaybe<HistoryMonthlyRecurringRevenueWhereInput>;
};


export type UserCountHistoryStepCreatedByArgs = {
  where?: InputMaybe<HistoryStepWhereInput>;
};


export type UserCountInvestArgs = {
  where?: InputMaybe<InvestWhereInput>;
};


export type UserCountKrArgs = {
  where?: InputMaybe<KrWhereInput>;
};


export type UserCountKrCommentProjectArgs = {
  where?: InputMaybe<KrCommentProjectWhereInput>;
};


export type UserCountKrCreatedByArgs = {
  where?: InputMaybe<KrWhereInput>;
};


export type UserCountNotfyCreatedByArgs = {
  where?: InputMaybe<NotfyWhereInput>;
};


export type UserCountNotfyUpdateddByArgs = {
  where?: InputMaybe<NotfyWhereInput>;
};


export type UserCountObjectiveCreatedByArgs = {
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type UserCountObjectiveUpdatedByArgs = {
  where?: InputMaybe<ObjectiveWhereInput>;
};


export type UserCountOkrObjectiveProjectArgs = {
  where?: InputMaybe<OkrObjectiveProjectWhereInput>;
};


export type UserCountOkrProjectArgs = {
  where?: InputMaybe<OkrProjectWhereInput>;
};


export type UserCountOkrProjectHistoryArgs = {
  where?: InputMaybe<OkrProjectHistoryWhereInput>;
};


export type UserCountPrimitiveStreenghtCreatedByArgs = {
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type UserCountPrimitiveStreenghtUpdatedByArgs = {
  where?: InputMaybe<PrimitiveStreenghtWhereInput>;
};


export type UserCountProjectCreatedByArgs = {
  where?: InputMaybe<ProjectWhereInput>;
};


export type UserCountProjectUpdatedByArgs = {
  where?: InputMaybe<ProjectWhereInput>;
};


export type UserCountSelfStructureArgs = {
  where?: InputMaybe<SelfStructureWhereInput>;
};


export type UserCountTokenFirebaseArgs = {
  where?: InputMaybe<TokenFirebaseWhereInput>;
};


export type UserCountUserJobFunctionArgs = {
  where?: InputMaybe<UserJobFunctionWhereInput>;
};


export type UserCountUserNotfyArgs = {
  where?: InputMaybe<UserNotfyWhereInput>;
};


export type UserCountUserOrganizationArgs = {
  where?: InputMaybe<UserOrganizationWhereInput>;
};


export type UserCountUserStepsArgs = {
  where?: InputMaybe<UserStepWhereInput>;
};


export type UserCountUserTeamArgs = {
  where?: InputMaybe<UserTeamWhereInput>;
};


export type UserCountViewedCommentProjectArgs = {
  where?: InputMaybe<ViewedCommentProjectWhereInput>;
};

export type UserCountAggregate = {
  __typename?: 'UserCountAggregate';
  _all: Scalars['Int']['output'];
  active: Scalars['Int']['output'];
  avatarUrl: Scalars['Int']['output'];
  createdAt: Scalars['Int']['output'];
  email: Scalars['Int']['output'];
  investStatus: Scalars['Int']['output'];
  name: Scalars['Int']['output'];
  nickName: Scalars['Int']['output'];
  password: Scalars['Int']['output'];
  personalInfo: Scalars['Int']['output'];
  role: Scalars['Int']['output'];
  typeUser: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  uuid: Scalars['Int']['output'];
};

export type UserCountOrderByAggregateInput = {
  active?: InputMaybe<SortOrder>;
  avatarUrl?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrder>;
  investStatus?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  nickName?: InputMaybe<SortOrder>;
  password?: InputMaybe<SortOrder>;
  personalInfo?: InputMaybe<SortOrder>;
  role?: InputMaybe<SortOrder>;
  typeUser?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  uuid?: InputMaybe<SortOrder>;
};

export type UserCreateManyInput = {
  active?: InputMaybe<Scalars['Boolean']['input']>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  investStatus?: InputMaybe<InvestStatus>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  role?: InputMaybe<Role>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  uuid?: InputMaybe<Scalars['String']['input']>;
};

export type UserCreateNestedOneWithoutArchivesInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutArchivesInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutArchivesInput>;
};

export type UserCreateNestedOneWithoutBoardCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutBoardCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutBoardCreatedByInput>;
};

export type UserCreateNestedOneWithoutBoardUpdatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutBoardUpdatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutBoardUpdatedByInput>;
};

export type UserCreateNestedOneWithoutCardAssignmentInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutCardAssignmentInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutCardAssignmentInput>;
};

export type UserCreateNestedOneWithoutCardCommentInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutCardCommentInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutCardCommentInput>;
};

export type UserCreateNestedOneWithoutCardCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutCardCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutCardCreatedByInput>;
};

export type UserCreateNestedOneWithoutCardMovementsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutCardMovementsInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutCardMovementsInput>;
};

export type UserCreateNestedOneWithoutCardUpdatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutCardUpdatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutCardUpdatedByInput>;
};

export type UserCreateNestedOneWithoutCoardMenbershipInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutCoardMenbershipInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutCoardMenbershipInput>;
};

export type UserCreateNestedOneWithoutColumnCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutColumnCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutColumnCreatedByInput>;
};

export type UserCreateNestedOneWithoutColumnUpdatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutColumnUpdatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutColumnUpdatedByInput>;
};

export type UserCreateNestedOneWithoutCommentProjectsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutCommentProjectsInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutCommentProjectsInput>;
};

export type UserCreateNestedOneWithoutFieldValueCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutFieldValueCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutFieldValueCreatedByInput>;
};

export type UserCreateNestedOneWithoutFieldValueCreatedInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutFieldValueCreatedInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutFieldValueCreatedInput>;
};

export type UserCreateNestedOneWithoutFieldValueUpdatedInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutFieldValueUpdatedInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutFieldValueUpdatedInput>;
};

export type UserCreateNestedOneWithoutGroupCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutGroupCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutGroupCreatedByInput>;
};

export type UserCreateNestedOneWithoutGroupUpdatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutGroupUpdatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutGroupUpdatedByInput>;
};

export type UserCreateNestedOneWithoutGroupUserInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutGroupUserInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutGroupUserInput>;
};

export type UserCreateNestedOneWithoutHistoryFlagCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutHistoryFlagCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutHistoryFlagCreatedByInput>;
};

export type UserCreateNestedOneWithoutHistoryMonthlyRecurringRevenueInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutHistoryMonthlyRecurringRevenueInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutHistoryMonthlyRecurringRevenueInput>;
};

export type UserCreateNestedOneWithoutHistoryStepCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutHistoryStepCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutHistoryStepCreatedByInput>;
};

export type UserCreateNestedOneWithoutInvestInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutInvestInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutInvestInput>;
};

export type UserCreateNestedOneWithoutKrCommentProjectInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutKrCommentProjectInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutKrCommentProjectInput>;
};

export type UserCreateNestedOneWithoutKrCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutKrCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutKrCreatedByInput>;
};

export type UserCreateNestedOneWithoutKrInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutKrInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutKrInput>;
};

export type UserCreateNestedOneWithoutNotfyCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutNotfyCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutNotfyCreatedByInput>;
};

export type UserCreateNestedOneWithoutNotfyUpdateddByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutNotfyUpdateddByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutNotfyUpdateddByInput>;
};

export type UserCreateNestedOneWithoutObjectiveCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutObjectiveCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutObjectiveCreatedByInput>;
};

export type UserCreateNestedOneWithoutObjectiveUpdatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutObjectiveUpdatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutObjectiveUpdatedByInput>;
};

export type UserCreateNestedOneWithoutOkrObjectiveProjectInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutOkrObjectiveProjectInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutOkrObjectiveProjectInput>;
};

export type UserCreateNestedOneWithoutOkrProjectHistoryInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutOkrProjectHistoryInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutOkrProjectHistoryInput>;
};

export type UserCreateNestedOneWithoutOkrProjectInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutOkrProjectInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutOkrProjectInput>;
};

export type UserCreateNestedOneWithoutPrimitiveStreenghtCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutPrimitiveStreenghtCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutPrimitiveStreenghtCreatedByInput>;
};

export type UserCreateNestedOneWithoutPrimitiveStreenghtUpdatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutPrimitiveStreenghtUpdatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutPrimitiveStreenghtUpdatedByInput>;
};

export type UserCreateNestedOneWithoutProjectCreatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutProjectCreatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutProjectCreatedByInput>;
};

export type UserCreateNestedOneWithoutProjectUpdatedByInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutProjectUpdatedByInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutProjectUpdatedByInput>;
};

export type UserCreateNestedOneWithoutUserJobFunctionInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserJobFunctionInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutUserJobFunctionInput>;
};

export type UserCreateNestedOneWithoutUserNotfyInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserNotfyInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutUserNotfyInput>;
};

export type UserCreateNestedOneWithoutUserOrganizationInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserOrganizationInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutUserOrganizationInput>;
};

export type UserCreateNestedOneWithoutUserStepsInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserStepsInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutUserStepsInput>;
};

export type UserCreateNestedOneWithoutUserTeamInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutUserTeamInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutUserTeamInput>;
};

export type UserCreateNestedOneWithoutViewedCommentProjectInput = {
  connect?: InputMaybe<UserWhereUniqueInput>;
  connectOrCreate?: InputMaybe<UserCreateOrConnectWithoutViewedCommentProjectInput>;
  create?: InputMaybe<UserUncheckedCreateWithoutViewedCommentProjectInput>;
};

export type UserCreateOrConnectWithoutArchivesInput = {
  create: UserUncheckedCreateWithoutArchivesInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutBoardCreatedByInput = {
  create: UserUncheckedCreateWithoutBoardCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutBoardUpdatedByInput = {
  create: UserUncheckedCreateWithoutBoardUpdatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutCardAssignmentInput = {
  create: UserUncheckedCreateWithoutCardAssignmentInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutCardCommentInput = {
  create: UserUncheckedCreateWithoutCardCommentInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutCardCreatedByInput = {
  create: UserUncheckedCreateWithoutCardCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutCardMovementsInput = {
  create: UserUncheckedCreateWithoutCardMovementsInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutCardUpdatedByInput = {
  create: UserUncheckedCreateWithoutCardUpdatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutCoardMenbershipInput = {
  create: UserUncheckedCreateWithoutCoardMenbershipInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutColumnCreatedByInput = {
  create: UserUncheckedCreateWithoutColumnCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutColumnUpdatedByInput = {
  create: UserUncheckedCreateWithoutColumnUpdatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutCommentProjectsInput = {
  create: UserUncheckedCreateWithoutCommentProjectsInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutFieldValueCreatedByInput = {
  create: UserUncheckedCreateWithoutFieldValueCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutFieldValueCreatedInput = {
  create: UserUncheckedCreateWithoutFieldValueCreatedInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutFieldValueUpdatedInput = {
  create: UserUncheckedCreateWithoutFieldValueUpdatedInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutGroupCreatedByInput = {
  create: UserUncheckedCreateWithoutGroupCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutGroupUpdatedByInput = {
  create: UserUncheckedCreateWithoutGroupUpdatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutGroupUserInput = {
  create: UserUncheckedCreateWithoutGroupUserInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutHistoryFlagCreatedByInput = {
  create: UserUncheckedCreateWithoutHistoryFlagCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutHistoryMonthlyRecurringRevenueInput = {
  create: UserUncheckedCreateWithoutHistoryMonthlyRecurringRevenueInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutHistoryStepCreatedByInput = {
  create: UserUncheckedCreateWithoutHistoryStepCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutInvestInput = {
  create: UserUncheckedCreateWithoutInvestInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutKrCommentProjectInput = {
  create: UserUncheckedCreateWithoutKrCommentProjectInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutKrCreatedByInput = {
  create: UserUncheckedCreateWithoutKrCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutKrInput = {
  create: UserUncheckedCreateWithoutKrInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutNotfyCreatedByInput = {
  create: UserUncheckedCreateWithoutNotfyCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutNotfyUpdateddByInput = {
  create: UserUncheckedCreateWithoutNotfyUpdateddByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutObjectiveCreatedByInput = {
  create: UserUncheckedCreateWithoutObjectiveCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutObjectiveUpdatedByInput = {
  create: UserUncheckedCreateWithoutObjectiveUpdatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutOkrObjectiveProjectInput = {
  create: UserUncheckedCreateWithoutOkrObjectiveProjectInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutOkrProjectHistoryInput = {
  create: UserUncheckedCreateWithoutOkrProjectHistoryInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutOkrProjectInput = {
  create: UserUncheckedCreateWithoutOkrProjectInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutPrimitiveStreenghtCreatedByInput = {
  create: UserUncheckedCreateWithoutPrimitiveStreenghtCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutPrimitiveStreenghtUpdatedByInput = {
  create: UserUncheckedCreateWithoutPrimitiveStreenghtUpdatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutProjectCreatedByInput = {
  create: UserUncheckedCreateWithoutProjectCreatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutProjectUpdatedByInput = {
  create: UserUncheckedCreateWithoutProjectUpdatedByInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutUserJobFunctionInput = {
  create: UserUncheckedCreateWithoutUserJobFunctionInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutUserNotfyInput = {
  create: UserUncheckedCreateWithoutUserNotfyInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutUserOrganizationInput = {
  create: UserUncheckedCreateWithoutUserOrganizationInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutUserStepsInput = {
  create: UserUncheckedCreateWithoutUserStepsInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutUserTeamInput = {
  create: UserUncheckedCreateWithoutUserTeamInput;
  where: UserWhereUniqueInput;
};

export type UserCreateOrConnectWithoutViewedCommentProjectInput = {
  create: UserUncheckedCreateWithoutViewedCommentProjectInput;
  where: UserWhereUniqueInput;
};

export type UserGroupBy = {
  __typename?: 'UserGroupBy';
  _count?: Maybe<UserCountAggregate>;
  _max?: Maybe<UserMaxAggregate>;
  _min?: Maybe<UserMinAggregate>;
  active: Scalars['Boolean']['output'];
  avatarUrl: Scalars['String']['output'];
  createdAt: Scalars['DateTimeISO']['output'];
  email: Scalars['String']['output'];
  investStatus: InvestStatus;
  name: Scalars['String']['output'];
  nickName: Scalars['String']['output'];
  password: Scalars['String']['output'];
  personalInfo?: Maybe<Scalars['JSON']['output']>;
  role: Role;
  typeUser: TypeUser;
  updatedAt: Scalars['DateTimeISO']['output'];
  uuid: Scalars['String']['output'];
};

export type UserJobFunction = {
  __typename?: 'UserJobFunction';
  jobFunction: JobFunction;
  jobFunctionId: Scalars['Int']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
  weight: Scalars['Float']['output'];
};

export type UserJobFunctionAvgAggregate = {
  __typename?: 'UserJobFunctionAvgAggregate';
  jobFunctionId?: Maybe<Scalars['Float']['output']>;
  weight?: Maybe<Scalars['Float']['output']>;
};

export type UserJobFunctionAvgOrderByAggregateInput = {
  jobFunctionId?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserJobFunctionCountAggregate = {
  __typename?: 'UserJobFunctionCountAggregate';
  _all: Scalars['Int']['output'];
  jobFunctionId: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
  weight: Scalars['Int']['output'];
};

export type UserJobFunctionCountOrderByAggregateInput = {
  jobFunctionId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserJobFunctionCreateManyInput = {
  jobFunctionId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UserJobFunctionCreateManyJobFunctionInput = {
  userUuid: Scalars['String']['input'];
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UserJobFunctionCreateManyJobFunctionInputEnvelope = {
  data: Array<UserJobFunctionCreateManyJobFunctionInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserJobFunctionCreateManyUserInput = {
  jobFunctionId: Scalars['Int']['input'];
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UserJobFunctionCreateManyUserInputEnvelope = {
  data: Array<UserJobFunctionCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserJobFunctionCreateOrConnectWithoutJobFunctionInput = {
  create: UserJobFunctionUncheckedCreateWithoutJobFunctionInput;
  where: UserJobFunctionWhereUniqueInput;
};

export type UserJobFunctionCreateOrConnectWithoutUserInput = {
  create: UserJobFunctionUncheckedCreateWithoutUserInput;
  where: UserJobFunctionWhereUniqueInput;
};

export type UserJobFunctionCreateWithoutJobFunctionInput = {
  user: UserCreateNestedOneWithoutUserJobFunctionInput;
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UserJobFunctionCreateWithoutUserInput = {
  jobFunction: JobFunctionCreateNestedOneWithoutUserJobFunctionInput;
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UserJobFunctionGroupBy = {
  __typename?: 'UserJobFunctionGroupBy';
  _avg?: Maybe<UserJobFunctionAvgAggregate>;
  _count?: Maybe<UserJobFunctionCountAggregate>;
  _max?: Maybe<UserJobFunctionMaxAggregate>;
  _min?: Maybe<UserJobFunctionMinAggregate>;
  _sum?: Maybe<UserJobFunctionSumAggregate>;
  jobFunctionId: Scalars['Int']['output'];
  userUuid: Scalars['String']['output'];
  weight: Scalars['Float']['output'];
};

export type UserJobFunctionListRelationFilter = {
  every?: InputMaybe<UserJobFunctionWhereInput>;
  none?: InputMaybe<UserJobFunctionWhereInput>;
  some?: InputMaybe<UserJobFunctionWhereInput>;
};

export type UserJobFunctionMaxAggregate = {
  __typename?: 'UserJobFunctionMaxAggregate';
  jobFunctionId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
  weight?: Maybe<Scalars['Float']['output']>;
};

export type UserJobFunctionMaxOrderByAggregateInput = {
  jobFunctionId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserJobFunctionMinAggregate = {
  __typename?: 'UserJobFunctionMinAggregate';
  jobFunctionId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
  weight?: Maybe<Scalars['Float']['output']>;
};

export type UserJobFunctionMinOrderByAggregateInput = {
  jobFunctionId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserJobFunctionOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserJobFunctionOrderByWithAggregationInput = {
  _avg?: InputMaybe<UserJobFunctionAvgOrderByAggregateInput>;
  _count?: InputMaybe<UserJobFunctionCountOrderByAggregateInput>;
  _max?: InputMaybe<UserJobFunctionMaxOrderByAggregateInput>;
  _min?: InputMaybe<UserJobFunctionMinOrderByAggregateInput>;
  _sum?: InputMaybe<UserJobFunctionSumOrderByAggregateInput>;
  jobFunctionId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserJobFunctionOrderByWithRelationInput = {
  jobFunction?: InputMaybe<JobFunctionOrderByWithRelationInput>;
  jobFunctionId?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export enum UserJobFunctionScalarFieldEnum {
  JobFunctionId = 'jobFunctionId',
  UserUuid = 'userUuid',
  Weight = 'weight'
}

export type UserJobFunctionScalarWhereInput = {
  AND?: InputMaybe<Array<UserJobFunctionScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserJobFunctionScalarWhereInput>>;
  OR?: InputMaybe<Array<UserJobFunctionScalarWhereInput>>;
  jobFunctionId?: InputMaybe<IntFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  weight?: InputMaybe<FloatFilter>;
};

export type UserJobFunctionScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UserJobFunctionScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UserJobFunctionScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UserJobFunctionScalarWhereWithAggregatesInput>>;
  jobFunctionId?: InputMaybe<IntWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
  weight?: InputMaybe<FloatWithAggregatesFilter>;
};

export type UserJobFunctionSumAggregate = {
  __typename?: 'UserJobFunctionSumAggregate';
  jobFunctionId?: Maybe<Scalars['Int']['output']>;
  weight?: Maybe<Scalars['Float']['output']>;
};

export type UserJobFunctionSumOrderByAggregateInput = {
  jobFunctionId?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserJobFunctionUncheckedCreateInput = {
  jobFunctionId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UserJobFunctionUncheckedCreateNestedManyWithoutJobFunctionInput = {
  connect?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserJobFunctionCreateOrConnectWithoutJobFunctionInput>>;
  create?: InputMaybe<Array<UserJobFunctionCreateWithoutJobFunctionInput>>;
  createMany?: InputMaybe<UserJobFunctionCreateManyJobFunctionInputEnvelope>;
};

export type UserJobFunctionUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserJobFunctionCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserJobFunctionCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserJobFunctionCreateManyUserInputEnvelope>;
};

export type UserJobFunctionUncheckedCreateWithoutJobFunctionInput = {
  userUuid: Scalars['String']['input'];
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UserJobFunctionUncheckedCreateWithoutUserInput = {
  jobFunctionId: Scalars['Int']['input'];
  weight?: InputMaybe<Scalars['Float']['input']>;
};

export type UserJobFunctionUncheckedUpdateInput = {
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  weight?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type UserJobFunctionUncheckedUpdateManyInput = {
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  weight?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type UserJobFunctionUncheckedUpdateManyWithoutJobFunctionInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  weight?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type UserJobFunctionUncheckedUpdateManyWithoutJobFunctionNestedInput = {
  connect?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserJobFunctionCreateOrConnectWithoutJobFunctionInput>>;
  create?: InputMaybe<Array<UserJobFunctionCreateWithoutJobFunctionInput>>;
  createMany?: InputMaybe<UserJobFunctionCreateManyJobFunctionInputEnvelope>;
  delete?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserJobFunctionScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  set?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  update?: InputMaybe<Array<UserJobFunctionUpdateWithWhereUniqueWithoutJobFunctionInput>>;
  updateMany?: InputMaybe<Array<UserJobFunctionUpdateManyWithWhereWithoutJobFunctionInput>>;
  upsert?: InputMaybe<Array<UserJobFunctionUpsertWithWhereUniqueWithoutJobFunctionInput>>;
};

export type UserJobFunctionUncheckedUpdateManyWithoutUserInput = {
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  weight?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type UserJobFunctionUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserJobFunctionCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserJobFunctionCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserJobFunctionCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserJobFunctionScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  set?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  update?: InputMaybe<Array<UserJobFunctionUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserJobFunctionUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserJobFunctionUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserJobFunctionUncheckedUpdateWithoutJobFunctionInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  weight?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type UserJobFunctionUncheckedUpdateWithoutUserInput = {
  jobFunctionId?: InputMaybe<IntFieldUpdateOperationsInput>;
  weight?: InputMaybe<FloatFieldUpdateOperationsInput>;
};

export type UserJobFunctionUpdateManyWithWhereWithoutJobFunctionInput = {
  data: UserJobFunctionUncheckedUpdateManyWithoutJobFunctionInput;
  where: UserJobFunctionScalarWhereInput;
};

export type UserJobFunctionUpdateManyWithWhereWithoutUserInput = {
  data: UserJobFunctionUncheckedUpdateManyWithoutUserInput;
  where: UserJobFunctionScalarWhereInput;
};

export type UserJobFunctionUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserJobFunctionCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserJobFunctionCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserJobFunctionCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserJobFunctionScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  set?: InputMaybe<Array<UserJobFunctionWhereUniqueInput>>;
  update?: InputMaybe<Array<UserJobFunctionUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserJobFunctionUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserJobFunctionUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserJobFunctionUpdateWithWhereUniqueWithoutJobFunctionInput = {
  data: UserJobFunctionUncheckedUpdateWithoutJobFunctionInput;
  where: UserJobFunctionWhereUniqueInput;
};

export type UserJobFunctionUpdateWithWhereUniqueWithoutUserInput = {
  data: UserJobFunctionUncheckedUpdateWithoutUserInput;
  where: UserJobFunctionWhereUniqueInput;
};

export type UserJobFunctionUpsertWithWhereUniqueWithoutJobFunctionInput = {
  create: UserJobFunctionUncheckedCreateWithoutJobFunctionInput;
  update: UserJobFunctionUncheckedUpdateWithoutJobFunctionInput;
  where: UserJobFunctionWhereUniqueInput;
};

export type UserJobFunctionUpsertWithWhereUniqueWithoutUserInput = {
  create: UserJobFunctionUncheckedCreateWithoutUserInput;
  update: UserJobFunctionUncheckedUpdateWithoutUserInput;
  where: UserJobFunctionWhereUniqueInput;
};

export type UserJobFunctionUserUuidJobFunctionIdCompoundUniqueInput = {
  jobFunctionId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type UserJobFunctionWhereInput = {
  AND?: InputMaybe<Array<UserJobFunctionWhereInput>>;
  NOT?: InputMaybe<Array<UserJobFunctionWhereInput>>;
  OR?: InputMaybe<Array<UserJobFunctionWhereInput>>;
  jobFunction?: InputMaybe<JobFunctionRelationFilter>;
  jobFunctionId?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  weight?: InputMaybe<FloatFilter>;
};

export type UserJobFunctionWhereUniqueInput = {
  AND?: InputMaybe<Array<UserJobFunctionWhereInput>>;
  NOT?: InputMaybe<Array<UserJobFunctionWhereInput>>;
  OR?: InputMaybe<Array<UserJobFunctionWhereInput>>;
  jobFunction?: InputMaybe<JobFunctionRelationFilter>;
  jobFunctionId?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  userUuid_jobFunctionId?: InputMaybe<UserJobFunctionUserUuidJobFunctionIdCompoundUniqueInput>;
  weight?: InputMaybe<FloatFilter>;
};

export type UserMaxAggregate = {
  __typename?: 'UserMaxAggregate';
  active?: Maybe<Scalars['Boolean']['output']>;
  avatarUrl?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  investStatus?: Maybe<InvestStatus>;
  name?: Maybe<Scalars['String']['output']>;
  nickName?: Maybe<Scalars['String']['output']>;
  password?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Role>;
  typeUser?: Maybe<TypeUser>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  uuid?: Maybe<Scalars['String']['output']>;
};

export type UserMaxOrderByAggregateInput = {
  active?: InputMaybe<SortOrder>;
  avatarUrl?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrder>;
  investStatus?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  nickName?: InputMaybe<SortOrder>;
  password?: InputMaybe<SortOrder>;
  role?: InputMaybe<SortOrder>;
  typeUser?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  uuid?: InputMaybe<SortOrder>;
};

export type UserMinAggregate = {
  __typename?: 'UserMinAggregate';
  active?: Maybe<Scalars['Boolean']['output']>;
  avatarUrl?: Maybe<Scalars['String']['output']>;
  createdAt?: Maybe<Scalars['DateTimeISO']['output']>;
  email?: Maybe<Scalars['String']['output']>;
  investStatus?: Maybe<InvestStatus>;
  name?: Maybe<Scalars['String']['output']>;
  nickName?: Maybe<Scalars['String']['output']>;
  password?: Maybe<Scalars['String']['output']>;
  role?: Maybe<Role>;
  typeUser?: Maybe<TypeUser>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  uuid?: Maybe<Scalars['String']['output']>;
};

export type UserMinOrderByAggregateInput = {
  active?: InputMaybe<SortOrder>;
  avatarUrl?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrder>;
  investStatus?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  nickName?: InputMaybe<SortOrder>;
  password?: InputMaybe<SortOrder>;
  role?: InputMaybe<SortOrder>;
  typeUser?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  uuid?: InputMaybe<SortOrder>;
};

export type UserNotfy = {
  __typename?: 'UserNotfy';
  notfy: Notfy;
  notfyId: Scalars['Int']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type UserNotfyAvgAggregate = {
  __typename?: 'UserNotfyAvgAggregate';
  notfyId?: Maybe<Scalars['Float']['output']>;
};

export type UserNotfyAvgOrderByAggregateInput = {
  notfyId?: InputMaybe<SortOrder>;
};

export type UserNotfyCountAggregate = {
  __typename?: 'UserNotfyCountAggregate';
  _all: Scalars['Int']['output'];
  notfyId: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type UserNotfyCountOrderByAggregateInput = {
  notfyId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserNotfyCreateManyInput = {
  notfyId?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type UserNotfyCreateManyNotfyInput = {
  userUuid: Scalars['String']['input'];
};

export type UserNotfyCreateManyNotfyInputEnvelope = {
  data: Array<UserNotfyCreateManyNotfyInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserNotfyCreateManyUserInput = {
  notfyId?: InputMaybe<Scalars['Int']['input']>;
};

export type UserNotfyCreateManyUserInputEnvelope = {
  data: Array<UserNotfyCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserNotfyCreateNestedManyWithoutNotfyInput = {
  connect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserNotfyCreateOrConnectWithoutNotfyInput>>;
  create?: InputMaybe<Array<UserNotfyCreateWithoutNotfyInput>>;
  createMany?: InputMaybe<UserNotfyCreateManyNotfyInputEnvelope>;
};

export type UserNotfyCreateOrConnectWithoutNotfyInput = {
  create: UserNotfyUncheckedCreateWithoutNotfyInput;
  where: UserNotfyWhereUniqueInput;
};

export type UserNotfyCreateOrConnectWithoutUserInput = {
  create: UserNotfyUncheckedCreateWithoutUserInput;
  where: UserNotfyWhereUniqueInput;
};

export type UserNotfyCreateWithoutNotfyInput = {
  user: UserCreateNestedOneWithoutUserNotfyInput;
};

export type UserNotfyCreateWithoutUserInput = {
  notfy?: InputMaybe<NotfyCreateNestedOneWithoutUserInput>;
};

export type UserNotfyGroupBy = {
  __typename?: 'UserNotfyGroupBy';
  _avg?: Maybe<UserNotfyAvgAggregate>;
  _count?: Maybe<UserNotfyCountAggregate>;
  _max?: Maybe<UserNotfyMaxAggregate>;
  _min?: Maybe<UserNotfyMinAggregate>;
  _sum?: Maybe<UserNotfySumAggregate>;
  notfyId: Scalars['Int']['output'];
  userUuid: Scalars['String']['output'];
};

export type UserNotfyListRelationFilter = {
  every?: InputMaybe<UserNotfyWhereInput>;
  none?: InputMaybe<UserNotfyWhereInput>;
  some?: InputMaybe<UserNotfyWhereInput>;
};

export type UserNotfyMaxAggregate = {
  __typename?: 'UserNotfyMaxAggregate';
  notfyId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type UserNotfyMaxOrderByAggregateInput = {
  notfyId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserNotfyMinAggregate = {
  __typename?: 'UserNotfyMinAggregate';
  notfyId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type UserNotfyMinOrderByAggregateInput = {
  notfyId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserNotfyNotfyIdUserUuidCompoundUniqueInput = {
  notfyId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type UserNotfyOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserNotfyOrderByWithAggregationInput = {
  _avg?: InputMaybe<UserNotfyAvgOrderByAggregateInput>;
  _count?: InputMaybe<UserNotfyCountOrderByAggregateInput>;
  _max?: InputMaybe<UserNotfyMaxOrderByAggregateInput>;
  _min?: InputMaybe<UserNotfyMinOrderByAggregateInput>;
  _sum?: InputMaybe<UserNotfySumOrderByAggregateInput>;
  notfyId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserNotfyOrderByWithRelationInput = {
  notfy?: InputMaybe<NotfyOrderByWithRelationInput>;
  notfyId?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum UserNotfyScalarFieldEnum {
  NotfyId = 'notfyId',
  UserUuid = 'userUuid'
}

export type UserNotfyScalarWhereInput = {
  AND?: InputMaybe<Array<UserNotfyScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserNotfyScalarWhereInput>>;
  OR?: InputMaybe<Array<UserNotfyScalarWhereInput>>;
  notfyId?: InputMaybe<IntFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type UserNotfyScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UserNotfyScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UserNotfyScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UserNotfyScalarWhereWithAggregatesInput>>;
  notfyId?: InputMaybe<IntWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type UserNotfySumAggregate = {
  __typename?: 'UserNotfySumAggregate';
  notfyId?: Maybe<Scalars['Int']['output']>;
};

export type UserNotfySumOrderByAggregateInput = {
  notfyId?: InputMaybe<SortOrder>;
};

export type UserNotfyUncheckedCreateInput = {
  notfyId?: InputMaybe<Scalars['Int']['input']>;
  userUuid: Scalars['String']['input'];
};

export type UserNotfyUncheckedCreateNestedManyWithoutNotfyInput = {
  connect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserNotfyCreateOrConnectWithoutNotfyInput>>;
  create?: InputMaybe<Array<UserNotfyCreateWithoutNotfyInput>>;
  createMany?: InputMaybe<UserNotfyCreateManyNotfyInputEnvelope>;
};

export type UserNotfyUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserNotfyCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserNotfyCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserNotfyCreateManyUserInputEnvelope>;
};

export type UserNotfyUncheckedCreateWithoutNotfyInput = {
  userUuid: Scalars['String']['input'];
};

export type UserNotfyUncheckedCreateWithoutUserInput = {
  notfyId?: InputMaybe<Scalars['Int']['input']>;
};

export type UserNotfyUncheckedUpdateInput = {
  notfyId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserNotfyUncheckedUpdateManyInput = {
  notfyId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserNotfyUncheckedUpdateManyWithoutNotfyInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserNotfyUncheckedUpdateManyWithoutNotfyNestedInput = {
  connect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserNotfyCreateOrConnectWithoutNotfyInput>>;
  create?: InputMaybe<Array<UserNotfyCreateWithoutNotfyInput>>;
  createMany?: InputMaybe<UserNotfyCreateManyNotfyInputEnvelope>;
  delete?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserNotfyScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  set?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  update?: InputMaybe<Array<UserNotfyUpdateWithWhereUniqueWithoutNotfyInput>>;
  updateMany?: InputMaybe<Array<UserNotfyUpdateManyWithWhereWithoutNotfyInput>>;
  upsert?: InputMaybe<Array<UserNotfyUpsertWithWhereUniqueWithoutNotfyInput>>;
};

export type UserNotfyUncheckedUpdateManyWithoutUserInput = {
  notfyId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserNotfyUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserNotfyCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserNotfyCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserNotfyCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserNotfyScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  set?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  update?: InputMaybe<Array<UserNotfyUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserNotfyUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserNotfyUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserNotfyUncheckedUpdateWithoutNotfyInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserNotfyUncheckedUpdateWithoutUserInput = {
  notfyId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserNotfyUpdateManyWithWhereWithoutNotfyInput = {
  data: UserNotfyUncheckedUpdateManyWithoutNotfyInput;
  where: UserNotfyScalarWhereInput;
};

export type UserNotfyUpdateManyWithWhereWithoutUserInput = {
  data: UserNotfyUncheckedUpdateManyWithoutUserInput;
  where: UserNotfyScalarWhereInput;
};

export type UserNotfyUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserNotfyCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserNotfyCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserNotfyCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserNotfyScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  set?: InputMaybe<Array<UserNotfyWhereUniqueInput>>;
  update?: InputMaybe<Array<UserNotfyUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserNotfyUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserNotfyUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserNotfyUpdateWithWhereUniqueWithoutNotfyInput = {
  data: UserNotfyUncheckedUpdateWithoutNotfyInput;
  where: UserNotfyWhereUniqueInput;
};

export type UserNotfyUpdateWithWhereUniqueWithoutUserInput = {
  data: UserNotfyUncheckedUpdateWithoutUserInput;
  where: UserNotfyWhereUniqueInput;
};

export type UserNotfyUpsertWithWhereUniqueWithoutNotfyInput = {
  create: UserNotfyUncheckedCreateWithoutNotfyInput;
  update: UserNotfyUncheckedUpdateWithoutNotfyInput;
  where: UserNotfyWhereUniqueInput;
};

export type UserNotfyUpsertWithWhereUniqueWithoutUserInput = {
  create: UserNotfyUncheckedCreateWithoutUserInput;
  update: UserNotfyUncheckedUpdateWithoutUserInput;
  where: UserNotfyWhereUniqueInput;
};

export type UserNotfyWhereInput = {
  AND?: InputMaybe<Array<UserNotfyWhereInput>>;
  NOT?: InputMaybe<Array<UserNotfyWhereInput>>;
  OR?: InputMaybe<Array<UserNotfyWhereInput>>;
  notfy?: InputMaybe<NotfyRelationFilter>;
  notfyId?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type UserNotfyWhereUniqueInput = {
  AND?: InputMaybe<Array<UserNotfyWhereInput>>;
  NOT?: InputMaybe<Array<UserNotfyWhereInput>>;
  OR?: InputMaybe<Array<UserNotfyWhereInput>>;
  notfy?: InputMaybe<NotfyRelationFilter>;
  notfyId?: InputMaybe<IntFilter>;
  notfyId_userUuid?: InputMaybe<UserNotfyNotfyIdUserUuidCompoundUniqueInput>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type UserNullableRelationFilter = {
  is?: InputMaybe<UserWhereInput>;
  isNot?: InputMaybe<UserWhereInput>;
};

export type UserOrderByWithAggregationInput = {
  _count?: InputMaybe<UserCountOrderByAggregateInput>;
  _max?: InputMaybe<UserMaxOrderByAggregateInput>;
  _min?: InputMaybe<UserMinOrderByAggregateInput>;
  active?: InputMaybe<SortOrder>;
  avatarUrl?: InputMaybe<SortOrder>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrder>;
  investStatus?: InputMaybe<SortOrder>;
  name?: InputMaybe<SortOrder>;
  nickName?: InputMaybe<SortOrder>;
  password?: InputMaybe<SortOrder>;
  personalInfo?: InputMaybe<SortOrderInput>;
  role?: InputMaybe<SortOrder>;
  typeUser?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  uuid?: InputMaybe<SortOrder>;
};

export type UserOrderByWithRelationInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserOrderByRelationAggregateInput>;
  active?: InputMaybe<SortOrder>;
  archives?: InputMaybe<ArchivesOrderByRelationAggregateInput>;
  avatarUrl?: InputMaybe<SortOrder>;
  boardCreatedBy?: InputMaybe<BoardOrderByRelationAggregateInput>;
  boardUpdatedBy?: InputMaybe<BoardOrderByRelationAggregateInput>;
  cardAssignment?: InputMaybe<CardAssignmentOrderByRelationAggregateInput>;
  cardComment?: InputMaybe<CardCommentOrderByRelationAggregateInput>;
  cardCreatedBy?: InputMaybe<CardOrderByRelationAggregateInput>;
  cardMovements?: InputMaybe<CardMovementOrderByRelationAggregateInput>;
  cardUpdatedBy?: InputMaybe<CardOrderByRelationAggregateInput>;
  client?: InputMaybe<ClientOrderByRelationAggregateInput>;
  coardMenbership?: InputMaybe<BoardMenbershipOrderByRelationAggregateInput>;
  columnCreatedBy?: InputMaybe<ColumnOrderByRelationAggregateInput>;
  columnUpdatedBy?: InputMaybe<ColumnOrderByRelationAggregateInput>;
  commentProjects?: InputMaybe<CommentProjectOrderByRelationAggregateInput>;
  createdAt?: InputMaybe<SortOrder>;
  email?: InputMaybe<SortOrder>;
  fieldValueCreated?: InputMaybe<FieldOrderByRelationAggregateInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueOrderByRelationAggregateInput>;
  fieldValueUpdated?: InputMaybe<FieldOrderByRelationAggregateInput>;
  groupCreatedBy?: InputMaybe<GroupOrderByRelationAggregateInput>;
  groupUpdatedBy?: InputMaybe<GroupOrderByRelationAggregateInput>;
  groupUser?: InputMaybe<GroupUserOrderByRelationAggregateInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagOrderByRelationAggregateInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueOrderByRelationAggregateInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepOrderByRelationAggregateInput>;
  invest?: InputMaybe<InvestOrderByRelationAggregateInput>;
  investStatus?: InputMaybe<SortOrder>;
  kr?: InputMaybe<KrOrderByRelationAggregateInput>;
  krCommentProject?: InputMaybe<KrCommentProjectOrderByRelationAggregateInput>;
  krCreatedBy?: InputMaybe<KrOrderByRelationAggregateInput>;
  name?: InputMaybe<SortOrder>;
  nickName?: InputMaybe<SortOrder>;
  notfyCreatedBy?: InputMaybe<NotfyOrderByRelationAggregateInput>;
  notfyUpdateddBy?: InputMaybe<NotfyOrderByRelationAggregateInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveOrderByRelationAggregateInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveOrderByRelationAggregateInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectOrderByRelationAggregateInput>;
  okrProject?: InputMaybe<OkrProjectOrderByRelationAggregateInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryOrderByRelationAggregateInput>;
  password?: InputMaybe<SortOrder>;
  personalInfo?: InputMaybe<SortOrderInput>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtOrderByRelationAggregateInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtOrderByRelationAggregateInput>;
  projectCreatedBy?: InputMaybe<ProjectOrderByRelationAggregateInput>;
  projectUpdatedBy?: InputMaybe<ProjectOrderByRelationAggregateInput>;
  role?: InputMaybe<SortOrder>;
  selfStructure?: InputMaybe<SelfStructureOrderByRelationAggregateInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseOrderByRelationAggregateInput>;
  typeUser?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userJobFunction?: InputMaybe<UserJobFunctionOrderByRelationAggregateInput>;
  userNotfy?: InputMaybe<UserNotfyOrderByRelationAggregateInput>;
  userOrganization?: InputMaybe<UserOrganizationOrderByRelationAggregateInput>;
  userSteps?: InputMaybe<UserStepOrderByRelationAggregateInput>;
  userTeam?: InputMaybe<UserTeamOrderByRelationAggregateInput>;
  uuid?: InputMaybe<SortOrder>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectOrderByRelationAggregateInput>;
};

export type UserOrganization = {
  __typename?: 'UserOrganization';
  organization: Organization;
  organizationId: Scalars['Int']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type UserOrganizationAvgAggregate = {
  __typename?: 'UserOrganizationAvgAggregate';
  organizationId?: Maybe<Scalars['Float']['output']>;
};

export type UserOrganizationAvgOrderByAggregateInput = {
  organizationId?: InputMaybe<SortOrder>;
};

export type UserOrganizationCountAggregate = {
  __typename?: 'UserOrganizationCountAggregate';
  _all: Scalars['Int']['output'];
  organizationId: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type UserOrganizationCountOrderByAggregateInput = {
  organizationId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserOrganizationCreateManyInput = {
  organizationId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type UserOrganizationCreateManyOrganizationInput = {
  userUuid: Scalars['String']['input'];
};

export type UserOrganizationCreateManyOrganizationInputEnvelope = {
  data: Array<UserOrganizationCreateManyOrganizationInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserOrganizationCreateManyUserInput = {
  organizationId: Scalars['Int']['input'];
};

export type UserOrganizationCreateManyUserInputEnvelope = {
  data: Array<UserOrganizationCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserOrganizationCreateOrConnectWithoutOrganizationInput = {
  create: UserOrganizationUncheckedCreateWithoutOrganizationInput;
  where: UserOrganizationWhereUniqueInput;
};

export type UserOrganizationCreateOrConnectWithoutUserInput = {
  create: UserOrganizationUncheckedCreateWithoutUserInput;
  where: UserOrganizationWhereUniqueInput;
};

export type UserOrganizationCreateWithoutOrganizationInput = {
  user: UserCreateNestedOneWithoutUserOrganizationInput;
};

export type UserOrganizationCreateWithoutUserInput = {
  organization: OrganizationCreateNestedOneWithoutUserOrganizationInput;
};

export type UserOrganizationGroupBy = {
  __typename?: 'UserOrganizationGroupBy';
  _avg?: Maybe<UserOrganizationAvgAggregate>;
  _count?: Maybe<UserOrganizationCountAggregate>;
  _max?: Maybe<UserOrganizationMaxAggregate>;
  _min?: Maybe<UserOrganizationMinAggregate>;
  _sum?: Maybe<UserOrganizationSumAggregate>;
  organizationId: Scalars['Int']['output'];
  userUuid: Scalars['String']['output'];
};

export type UserOrganizationListRelationFilter = {
  every?: InputMaybe<UserOrganizationWhereInput>;
  none?: InputMaybe<UserOrganizationWhereInput>;
  some?: InputMaybe<UserOrganizationWhereInput>;
};

export type UserOrganizationMaxAggregate = {
  __typename?: 'UserOrganizationMaxAggregate';
  organizationId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type UserOrganizationMaxOrderByAggregateInput = {
  organizationId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserOrganizationMinAggregate = {
  __typename?: 'UserOrganizationMinAggregate';
  organizationId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type UserOrganizationMinOrderByAggregateInput = {
  organizationId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserOrganizationOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserOrganizationOrderByWithAggregationInput = {
  _avg?: InputMaybe<UserOrganizationAvgOrderByAggregateInput>;
  _count?: InputMaybe<UserOrganizationCountOrderByAggregateInput>;
  _max?: InputMaybe<UserOrganizationMaxOrderByAggregateInput>;
  _min?: InputMaybe<UserOrganizationMinOrderByAggregateInput>;
  _sum?: InputMaybe<UserOrganizationSumOrderByAggregateInput>;
  organizationId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserOrganizationOrderByWithRelationInput = {
  organization?: InputMaybe<OrganizationOrderByWithRelationInput>;
  organizationId?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum UserOrganizationScalarFieldEnum {
  OrganizationId = 'organizationId',
  UserUuid = 'userUuid'
}

export type UserOrganizationScalarWhereInput = {
  AND?: InputMaybe<Array<UserOrganizationScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserOrganizationScalarWhereInput>>;
  OR?: InputMaybe<Array<UserOrganizationScalarWhereInput>>;
  organizationId?: InputMaybe<IntFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type UserOrganizationScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UserOrganizationScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UserOrganizationScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UserOrganizationScalarWhereWithAggregatesInput>>;
  organizationId?: InputMaybe<IntWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type UserOrganizationSumAggregate = {
  __typename?: 'UserOrganizationSumAggregate';
  organizationId?: Maybe<Scalars['Int']['output']>;
};

export type UserOrganizationSumOrderByAggregateInput = {
  organizationId?: InputMaybe<SortOrder>;
};

export type UserOrganizationUncheckedCreateInput = {
  organizationId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type UserOrganizationUncheckedCreateNestedManyWithoutOrganizationInput = {
  connect?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserOrganizationCreateOrConnectWithoutOrganizationInput>>;
  create?: InputMaybe<Array<UserOrganizationCreateWithoutOrganizationInput>>;
  createMany?: InputMaybe<UserOrganizationCreateManyOrganizationInputEnvelope>;
};

export type UserOrganizationUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserOrganizationCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserOrganizationCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserOrganizationCreateManyUserInputEnvelope>;
};

export type UserOrganizationUncheckedCreateWithoutOrganizationInput = {
  userUuid: Scalars['String']['input'];
};

export type UserOrganizationUncheckedCreateWithoutUserInput = {
  organizationId: Scalars['Int']['input'];
};

export type UserOrganizationUncheckedUpdateInput = {
  organizationId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserOrganizationUncheckedUpdateManyInput = {
  organizationId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserOrganizationUncheckedUpdateManyWithoutOrganizationInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserOrganizationUncheckedUpdateManyWithoutOrganizationNestedInput = {
  connect?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserOrganizationCreateOrConnectWithoutOrganizationInput>>;
  create?: InputMaybe<Array<UserOrganizationCreateWithoutOrganizationInput>>;
  createMany?: InputMaybe<UserOrganizationCreateManyOrganizationInputEnvelope>;
  delete?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserOrganizationScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  set?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  update?: InputMaybe<Array<UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInput>>;
  updateMany?: InputMaybe<Array<UserOrganizationUpdateManyWithWhereWithoutOrganizationInput>>;
  upsert?: InputMaybe<Array<UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInput>>;
};

export type UserOrganizationUncheckedUpdateManyWithoutUserInput = {
  organizationId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserOrganizationUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserOrganizationCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserOrganizationCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserOrganizationCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserOrganizationScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  set?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  update?: InputMaybe<Array<UserOrganizationUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserOrganizationUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserOrganizationUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserOrganizationUncheckedUpdateWithoutOrganizationInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserOrganizationUncheckedUpdateWithoutUserInput = {
  organizationId?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserOrganizationUpdateManyWithWhereWithoutOrganizationInput = {
  data: UserOrganizationUncheckedUpdateManyWithoutOrganizationInput;
  where: UserOrganizationScalarWhereInput;
};

export type UserOrganizationUpdateManyWithWhereWithoutUserInput = {
  data: UserOrganizationUncheckedUpdateManyWithoutUserInput;
  where: UserOrganizationScalarWhereInput;
};

export type UserOrganizationUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserOrganizationCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserOrganizationCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserOrganizationCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserOrganizationScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  set?: InputMaybe<Array<UserOrganizationWhereUniqueInput>>;
  update?: InputMaybe<Array<UserOrganizationUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserOrganizationUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserOrganizationUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserOrganizationUpdateWithWhereUniqueWithoutOrganizationInput = {
  data: UserOrganizationUncheckedUpdateWithoutOrganizationInput;
  where: UserOrganizationWhereUniqueInput;
};

export type UserOrganizationUpdateWithWhereUniqueWithoutUserInput = {
  data: UserOrganizationUncheckedUpdateWithoutUserInput;
  where: UserOrganizationWhereUniqueInput;
};

export type UserOrganizationUpsertWithWhereUniqueWithoutOrganizationInput = {
  create: UserOrganizationUncheckedCreateWithoutOrganizationInput;
  update: UserOrganizationUncheckedUpdateWithoutOrganizationInput;
  where: UserOrganizationWhereUniqueInput;
};

export type UserOrganizationUpsertWithWhereUniqueWithoutUserInput = {
  create: UserOrganizationUncheckedCreateWithoutUserInput;
  update: UserOrganizationUncheckedUpdateWithoutUserInput;
  where: UserOrganizationWhereUniqueInput;
};

export type UserOrganizationUserUuidOrganizationIdCompoundUniqueInput = {
  organizationId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type UserOrganizationWhereInput = {
  AND?: InputMaybe<Array<UserOrganizationWhereInput>>;
  NOT?: InputMaybe<Array<UserOrganizationWhereInput>>;
  OR?: InputMaybe<Array<UserOrganizationWhereInput>>;
  organization?: InputMaybe<OrganizationRelationFilter>;
  organizationId?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type UserOrganizationWhereUniqueInput = {
  AND?: InputMaybe<Array<UserOrganizationWhereInput>>;
  NOT?: InputMaybe<Array<UserOrganizationWhereInput>>;
  OR?: InputMaybe<Array<UserOrganizationWhereInput>>;
  organization?: InputMaybe<OrganizationRelationFilter>;
  organizationId?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  userUuid_organizationId?: InputMaybe<UserOrganizationUserUuidOrganizationIdCompoundUniqueInput>;
};

export type UserRelationFilter = {
  is?: InputMaybe<UserWhereInput>;
  isNot?: InputMaybe<UserWhereInput>;
};

export enum UserScalarFieldEnum {
  Active = 'active',
  AvatarUrl = 'avatarUrl',
  CreatedAt = 'createdAt',
  Email = 'email',
  InvestStatus = 'investStatus',
  Name = 'name',
  NickName = 'nickName',
  Password = 'password',
  PersonalInfo = 'personalInfo',
  Role = 'role',
  TypeUser = 'typeUser',
  UpdatedAt = 'updatedAt',
  Uuid = 'uuid'
}

export type UserScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UserScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UserScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UserScalarWhereWithAggregatesInput>>;
  active?: InputMaybe<BoolWithAggregatesFilter>;
  avatarUrl?: InputMaybe<StringWithAggregatesFilter>;
  createdAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  email?: InputMaybe<StringWithAggregatesFilter>;
  investStatus?: InputMaybe<EnuminvestStatusWithAggregatesFilter>;
  name?: InputMaybe<StringWithAggregatesFilter>;
  nickName?: InputMaybe<StringWithAggregatesFilter>;
  password?: InputMaybe<StringWithAggregatesFilter>;
  personalInfo?: InputMaybe<JsonNullableWithAggregatesFilter>;
  role?: InputMaybe<EnumroleWithAggregatesFilter>;
  typeUser?: InputMaybe<EnumtypeUserWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  uuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type UserStep = {
  __typename?: 'UserStep';
  step: Step;
  stepId: Scalars['Int']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
  weight: Scalars['Int']['output'];
};

export type UserStepAvgAggregate = {
  __typename?: 'UserStepAvgAggregate';
  stepId?: Maybe<Scalars['Float']['output']>;
  weight?: Maybe<Scalars['Float']['output']>;
};

export type UserStepAvgOrderByAggregateInput = {
  stepId?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserStepCountAggregate = {
  __typename?: 'UserStepCountAggregate';
  _all: Scalars['Int']['output'];
  stepId: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
  weight: Scalars['Int']['output'];
};

export type UserStepCountOrderByAggregateInput = {
  stepId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserStepCreateManyInput = {
  stepId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
  weight?: InputMaybe<Scalars['Int']['input']>;
};

export type UserStepCreateManyStepInput = {
  userUuid: Scalars['String']['input'];
  weight?: InputMaybe<Scalars['Int']['input']>;
};

export type UserStepCreateManyStepInputEnvelope = {
  data: Array<UserStepCreateManyStepInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserStepCreateManyUserInput = {
  stepId: Scalars['Int']['input'];
  weight?: InputMaybe<Scalars['Int']['input']>;
};

export type UserStepCreateManyUserInputEnvelope = {
  data: Array<UserStepCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserStepCreateOrConnectWithoutStepInput = {
  create: UserStepUncheckedCreateWithoutStepInput;
  where: UserStepWhereUniqueInput;
};

export type UserStepCreateOrConnectWithoutUserInput = {
  create: UserStepUncheckedCreateWithoutUserInput;
  where: UserStepWhereUniqueInput;
};

export type UserStepCreateWithoutStepInput = {
  user: UserCreateNestedOneWithoutUserStepsInput;
  weight?: InputMaybe<Scalars['Int']['input']>;
};

export type UserStepCreateWithoutUserInput = {
  step: StepCreateNestedOneWithoutUserStepInput;
  weight?: InputMaybe<Scalars['Int']['input']>;
};

export type UserStepGroupBy = {
  __typename?: 'UserStepGroupBy';
  _avg?: Maybe<UserStepAvgAggregate>;
  _count?: Maybe<UserStepCountAggregate>;
  _max?: Maybe<UserStepMaxAggregate>;
  _min?: Maybe<UserStepMinAggregate>;
  _sum?: Maybe<UserStepSumAggregate>;
  stepId: Scalars['Int']['output'];
  userUuid: Scalars['String']['output'];
  weight: Scalars['Int']['output'];
};

export type UserStepListRelationFilter = {
  every?: InputMaybe<UserStepWhereInput>;
  none?: InputMaybe<UserStepWhereInput>;
  some?: InputMaybe<UserStepWhereInput>;
};

export type UserStepMaxAggregate = {
  __typename?: 'UserStepMaxAggregate';
  stepId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
  weight?: Maybe<Scalars['Int']['output']>;
};

export type UserStepMaxOrderByAggregateInput = {
  stepId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserStepMinAggregate = {
  __typename?: 'UserStepMinAggregate';
  stepId?: Maybe<Scalars['Int']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
  weight?: Maybe<Scalars['Int']['output']>;
};

export type UserStepMinOrderByAggregateInput = {
  stepId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserStepOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserStepOrderByWithAggregationInput = {
  _avg?: InputMaybe<UserStepAvgOrderByAggregateInput>;
  _count?: InputMaybe<UserStepCountOrderByAggregateInput>;
  _max?: InputMaybe<UserStepMaxOrderByAggregateInput>;
  _min?: InputMaybe<UserStepMinOrderByAggregateInput>;
  _sum?: InputMaybe<UserStepSumOrderByAggregateInput>;
  stepId?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserStepOrderByWithRelationInput = {
  step?: InputMaybe<StepOrderByWithRelationInput>;
  stepId?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export enum UserStepScalarFieldEnum {
  StepId = 'stepId',
  UserUuid = 'userUuid',
  Weight = 'weight'
}

export type UserStepScalarWhereInput = {
  AND?: InputMaybe<Array<UserStepScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserStepScalarWhereInput>>;
  OR?: InputMaybe<Array<UserStepScalarWhereInput>>;
  stepId?: InputMaybe<IntFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  weight?: InputMaybe<IntFilter>;
};

export type UserStepScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UserStepScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UserStepScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UserStepScalarWhereWithAggregatesInput>>;
  stepId?: InputMaybe<IntWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
  weight?: InputMaybe<IntWithAggregatesFilter>;
};

export type UserStepSumAggregate = {
  __typename?: 'UserStepSumAggregate';
  stepId?: Maybe<Scalars['Int']['output']>;
  weight?: Maybe<Scalars['Int']['output']>;
};

export type UserStepSumOrderByAggregateInput = {
  stepId?: InputMaybe<SortOrder>;
  weight?: InputMaybe<SortOrder>;
};

export type UserStepUncheckedCreateInput = {
  stepId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
  weight?: InputMaybe<Scalars['Int']['input']>;
};

export type UserStepUncheckedCreateNestedManyWithoutStepInput = {
  connect?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserStepCreateOrConnectWithoutStepInput>>;
  create?: InputMaybe<Array<UserStepCreateWithoutStepInput>>;
  createMany?: InputMaybe<UserStepCreateManyStepInputEnvelope>;
};

export type UserStepUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserStepCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserStepCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserStepCreateManyUserInputEnvelope>;
};

export type UserStepUncheckedCreateWithoutStepInput = {
  userUuid: Scalars['String']['input'];
  weight?: InputMaybe<Scalars['Int']['input']>;
};

export type UserStepUncheckedCreateWithoutUserInput = {
  stepId: Scalars['Int']['input'];
  weight?: InputMaybe<Scalars['Int']['input']>;
};

export type UserStepUncheckedUpdateInput = {
  stepId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  weight?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserStepUncheckedUpdateManyInput = {
  stepId?: InputMaybe<IntFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  weight?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserStepUncheckedUpdateManyWithoutStepInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  weight?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserStepUncheckedUpdateManyWithoutStepNestedInput = {
  connect?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserStepCreateOrConnectWithoutStepInput>>;
  create?: InputMaybe<Array<UserStepCreateWithoutStepInput>>;
  createMany?: InputMaybe<UserStepCreateManyStepInputEnvelope>;
  delete?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserStepScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  set?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  update?: InputMaybe<Array<UserStepUpdateWithWhereUniqueWithoutStepInput>>;
  updateMany?: InputMaybe<Array<UserStepUpdateManyWithWhereWithoutStepInput>>;
  upsert?: InputMaybe<Array<UserStepUpsertWithWhereUniqueWithoutStepInput>>;
};

export type UserStepUncheckedUpdateManyWithoutUserInput = {
  stepId?: InputMaybe<IntFieldUpdateOperationsInput>;
  weight?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserStepUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserStepCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserStepCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserStepCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserStepScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  set?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  update?: InputMaybe<Array<UserStepUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserStepUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserStepUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserStepUncheckedUpdateWithoutStepInput = {
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  weight?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserStepUncheckedUpdateWithoutUserInput = {
  stepId?: InputMaybe<IntFieldUpdateOperationsInput>;
  weight?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type UserStepUpdateManyWithWhereWithoutStepInput = {
  data: UserStepUncheckedUpdateManyWithoutStepInput;
  where: UserStepScalarWhereInput;
};

export type UserStepUpdateManyWithWhereWithoutUserInput = {
  data: UserStepUncheckedUpdateManyWithoutUserInput;
  where: UserStepScalarWhereInput;
};

export type UserStepUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserStepCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserStepCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserStepCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserStepScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  set?: InputMaybe<Array<UserStepWhereUniqueInput>>;
  update?: InputMaybe<Array<UserStepUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserStepUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserStepUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserStepUpdateWithWhereUniqueWithoutStepInput = {
  data: UserStepUncheckedUpdateWithoutStepInput;
  where: UserStepWhereUniqueInput;
};

export type UserStepUpdateWithWhereUniqueWithoutUserInput = {
  data: UserStepUncheckedUpdateWithoutUserInput;
  where: UserStepWhereUniqueInput;
};

export type UserStepUpsertWithWhereUniqueWithoutStepInput = {
  create: UserStepUncheckedCreateWithoutStepInput;
  update: UserStepUncheckedUpdateWithoutStepInput;
  where: UserStepWhereUniqueInput;
};

export type UserStepUpsertWithWhereUniqueWithoutUserInput = {
  create: UserStepUncheckedCreateWithoutUserInput;
  update: UserStepUncheckedUpdateWithoutUserInput;
  where: UserStepWhereUniqueInput;
};

export type UserStepUserUuidStepIdCompoundUniqueInput = {
  stepId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type UserStepWhereInput = {
  AND?: InputMaybe<Array<UserStepWhereInput>>;
  NOT?: InputMaybe<Array<UserStepWhereInput>>;
  OR?: InputMaybe<Array<UserStepWhereInput>>;
  step?: InputMaybe<StepRelationFilter>;
  stepId?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  weight?: InputMaybe<IntFilter>;
};

export type UserStepWhereUniqueInput = {
  AND?: InputMaybe<Array<UserStepWhereInput>>;
  NOT?: InputMaybe<Array<UserStepWhereInput>>;
  OR?: InputMaybe<Array<UserStepWhereInput>>;
  step?: InputMaybe<StepRelationFilter>;
  stepId?: InputMaybe<IntFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  userUuid_stepId?: InputMaybe<UserStepUserUuidStepIdCompoundUniqueInput>;
  weight?: InputMaybe<IntFilter>;
};

export type UserTeam = {
  __typename?: 'UserTeam';
  team: Team;
  teamId: Scalars['Int']['output'];
  thumbUrl: Scalars['String']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
};

export type UserTeamAvgAggregate = {
  __typename?: 'UserTeamAvgAggregate';
  teamId?: Maybe<Scalars['Float']['output']>;
};

export type UserTeamAvgOrderByAggregateInput = {
  teamId?: InputMaybe<SortOrder>;
};

export type UserTeamCountAggregate = {
  __typename?: 'UserTeamCountAggregate';
  _all: Scalars['Int']['output'];
  teamId: Scalars['Int']['output'];
  thumbUrl: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
};

export type UserTeamCountOrderByAggregateInput = {
  teamId?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserTeamCreateManyInput = {
  teamId: Scalars['Int']['input'];
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
  userUuid: Scalars['String']['input'];
};

export type UserTeamCreateManyTeamInput = {
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
  userUuid: Scalars['String']['input'];
};

export type UserTeamCreateManyTeamInputEnvelope = {
  data: Array<UserTeamCreateManyTeamInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserTeamCreateManyUserInput = {
  teamId: Scalars['Int']['input'];
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
};

export type UserTeamCreateManyUserInputEnvelope = {
  data: Array<UserTeamCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type UserTeamCreateOrConnectWithoutTeamInput = {
  create: UserTeamUncheckedCreateWithoutTeamInput;
  where: UserTeamWhereUniqueInput;
};

export type UserTeamCreateOrConnectWithoutUserInput = {
  create: UserTeamUncheckedCreateWithoutUserInput;
  where: UserTeamWhereUniqueInput;
};

export type UserTeamCreateWithoutTeamInput = {
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
  user: UserCreateNestedOneWithoutUserTeamInput;
};

export type UserTeamCreateWithoutUserInput = {
  team: TeamCreateNestedOneWithoutUserTeamInput;
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
};

export type UserTeamGroupBy = {
  __typename?: 'UserTeamGroupBy';
  _avg?: Maybe<UserTeamAvgAggregate>;
  _count?: Maybe<UserTeamCountAggregate>;
  _max?: Maybe<UserTeamMaxAggregate>;
  _min?: Maybe<UserTeamMinAggregate>;
  _sum?: Maybe<UserTeamSumAggregate>;
  teamId: Scalars['Int']['output'];
  thumbUrl: Scalars['String']['output'];
  userUuid: Scalars['String']['output'];
};

export type UserTeamListRelationFilter = {
  every?: InputMaybe<UserTeamWhereInput>;
  none?: InputMaybe<UserTeamWhereInput>;
  some?: InputMaybe<UserTeamWhereInput>;
};

export type UserTeamMaxAggregate = {
  __typename?: 'UserTeamMaxAggregate';
  teamId?: Maybe<Scalars['Int']['output']>;
  thumbUrl?: Maybe<Scalars['String']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type UserTeamMaxOrderByAggregateInput = {
  teamId?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserTeamMinAggregate = {
  __typename?: 'UserTeamMinAggregate';
  teamId?: Maybe<Scalars['Int']['output']>;
  thumbUrl?: Maybe<Scalars['String']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
};

export type UserTeamMinOrderByAggregateInput = {
  teamId?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserTeamOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type UserTeamOrderByWithAggregationInput = {
  _avg?: InputMaybe<UserTeamAvgOrderByAggregateInput>;
  _count?: InputMaybe<UserTeamCountOrderByAggregateInput>;
  _max?: InputMaybe<UserTeamMaxOrderByAggregateInput>;
  _min?: InputMaybe<UserTeamMinOrderByAggregateInput>;
  _sum?: InputMaybe<UserTeamSumOrderByAggregateInput>;
  teamId?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
};

export type UserTeamOrderByWithRelationInput = {
  team?: InputMaybe<TeamOrderByWithRelationInput>;
  teamId?: InputMaybe<SortOrder>;
  thumbUrl?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
};

export enum UserTeamScalarFieldEnum {
  TeamId = 'teamId',
  ThumbUrl = 'thumbUrl',
  UserUuid = 'userUuid'
}

export type UserTeamScalarWhereInput = {
  AND?: InputMaybe<Array<UserTeamScalarWhereInput>>;
  NOT?: InputMaybe<Array<UserTeamScalarWhereInput>>;
  OR?: InputMaybe<Array<UserTeamScalarWhereInput>>;
  teamId?: InputMaybe<IntFilter>;
  thumbUrl?: InputMaybe<StringFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type UserTeamScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<UserTeamScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<UserTeamScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<UserTeamScalarWhereWithAggregatesInput>>;
  teamId?: InputMaybe<IntWithAggregatesFilter>;
  thumbUrl?: InputMaybe<StringWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
};

export type UserTeamSumAggregate = {
  __typename?: 'UserTeamSumAggregate';
  teamId?: Maybe<Scalars['Int']['output']>;
};

export type UserTeamSumOrderByAggregateInput = {
  teamId?: InputMaybe<SortOrder>;
};

export type UserTeamUncheckedCreateInput = {
  teamId: Scalars['Int']['input'];
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
  userUuid: Scalars['String']['input'];
};

export type UserTeamUncheckedCreateNestedManyWithoutTeamInput = {
  connect?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserTeamCreateOrConnectWithoutTeamInput>>;
  create?: InputMaybe<Array<UserTeamCreateWithoutTeamInput>>;
  createMany?: InputMaybe<UserTeamCreateManyTeamInputEnvelope>;
};

export type UserTeamUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserTeamCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserTeamCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserTeamCreateManyUserInputEnvelope>;
};

export type UserTeamUncheckedCreateWithoutTeamInput = {
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
  userUuid: Scalars['String']['input'];
};

export type UserTeamUncheckedCreateWithoutUserInput = {
  teamId: Scalars['Int']['input'];
  thumbUrl?: InputMaybe<Scalars['String']['input']>;
};

export type UserTeamUncheckedUpdateInput = {
  teamId?: InputMaybe<IntFieldUpdateOperationsInput>;
  thumbUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserTeamUncheckedUpdateManyInput = {
  teamId?: InputMaybe<IntFieldUpdateOperationsInput>;
  thumbUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserTeamUncheckedUpdateManyWithoutTeamInput = {
  thumbUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserTeamUncheckedUpdateManyWithoutTeamNestedInput = {
  connect?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserTeamCreateOrConnectWithoutTeamInput>>;
  create?: InputMaybe<Array<UserTeamCreateWithoutTeamInput>>;
  createMany?: InputMaybe<UserTeamCreateManyTeamInputEnvelope>;
  delete?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserTeamScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  set?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  update?: InputMaybe<Array<UserTeamUpdateWithWhereUniqueWithoutTeamInput>>;
  updateMany?: InputMaybe<Array<UserTeamUpdateManyWithWhereWithoutTeamInput>>;
  upsert?: InputMaybe<Array<UserTeamUpsertWithWhereUniqueWithoutTeamInput>>;
};

export type UserTeamUncheckedUpdateManyWithoutUserInput = {
  teamId?: InputMaybe<IntFieldUpdateOperationsInput>;
  thumbUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserTeamUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserTeamCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserTeamCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserTeamCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserTeamScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  set?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  update?: InputMaybe<Array<UserTeamUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserTeamUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserTeamUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserTeamUncheckedUpdateWithoutTeamInput = {
  thumbUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserTeamUncheckedUpdateWithoutUserInput = {
  teamId?: InputMaybe<IntFieldUpdateOperationsInput>;
  thumbUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserTeamUpdateManyWithWhereWithoutTeamInput = {
  data: UserTeamUncheckedUpdateManyWithoutTeamInput;
  where: UserTeamScalarWhereInput;
};

export type UserTeamUpdateManyWithWhereWithoutUserInput = {
  data: UserTeamUncheckedUpdateManyWithoutUserInput;
  where: UserTeamScalarWhereInput;
};

export type UserTeamUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<UserTeamCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<UserTeamCreateWithoutUserInput>>;
  createMany?: InputMaybe<UserTeamCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<UserTeamScalarWhereInput>>;
  disconnect?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  set?: InputMaybe<Array<UserTeamWhereUniqueInput>>;
  update?: InputMaybe<Array<UserTeamUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<UserTeamUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<UserTeamUpsertWithWhereUniqueWithoutUserInput>>;
};

export type UserTeamUpdateWithWhereUniqueWithoutTeamInput = {
  data: UserTeamUncheckedUpdateWithoutTeamInput;
  where: UserTeamWhereUniqueInput;
};

export type UserTeamUpdateWithWhereUniqueWithoutUserInput = {
  data: UserTeamUncheckedUpdateWithoutUserInput;
  where: UserTeamWhereUniqueInput;
};

export type UserTeamUpsertWithWhereUniqueWithoutTeamInput = {
  create: UserTeamUncheckedCreateWithoutTeamInput;
  update: UserTeamUncheckedUpdateWithoutTeamInput;
  where: UserTeamWhereUniqueInput;
};

export type UserTeamUpsertWithWhereUniqueWithoutUserInput = {
  create: UserTeamUncheckedCreateWithoutUserInput;
  update: UserTeamUncheckedUpdateWithoutUserInput;
  where: UserTeamWhereUniqueInput;
};

export type UserTeamUserUuidTeamIdCompoundUniqueInput = {
  teamId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type UserTeamWhereInput = {
  AND?: InputMaybe<Array<UserTeamWhereInput>>;
  NOT?: InputMaybe<Array<UserTeamWhereInput>>;
  OR?: InputMaybe<Array<UserTeamWhereInput>>;
  team?: InputMaybe<TeamRelationFilter>;
  teamId?: InputMaybe<IntFilter>;
  thumbUrl?: InputMaybe<StringFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
};

export type UserTeamWhereUniqueInput = {
  AND?: InputMaybe<Array<UserTeamWhereInput>>;
  NOT?: InputMaybe<Array<UserTeamWhereInput>>;
  OR?: InputMaybe<Array<UserTeamWhereInput>>;
  team?: InputMaybe<TeamRelationFilter>;
  teamId?: InputMaybe<IntFilter>;
  thumbUrl?: InputMaybe<StringFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  userUuid_teamId?: InputMaybe<UserTeamUserUuidTeamIdCompoundUniqueInput>;
};

export type UserToken = {
  __typename?: 'UserToken';
  token?: Maybe<Scalars['String']['output']>;
  user: User;
};

export type UserTokenLogin = {
  __typename?: 'UserTokenLogin';
  token?: Maybe<Scalars['String']['output']>;
  user?: Maybe<User>;
};

export type UserUncheckedCreateInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutArchivesInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutBoardCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutBoardUpdatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutCardAssignmentInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutCardCommentInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutCardCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutCardMovementsInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutCardUpdatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutCoardMenbershipInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutColumnCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutColumnUpdatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutCommentProjectsInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutFieldValueCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutFieldValueCreatedInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutFieldValueUpdatedInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutGroupCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutGroupUpdatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutGroupUserInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutHistoryFlagCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutHistoryMonthlyRecurringRevenueInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutHistoryStepCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutInvestInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutKrCommentProjectInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutKrCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutKrInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutNotfyCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutNotfyUpdateddByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutObjectiveCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutObjectiveUpdatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutOkrObjectiveProjectInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutOkrProjectHistoryInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutOkrProjectInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutPrimitiveStreenghtCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutPrimitiveStreenghtUpdatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutProjectCreatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutProjectUpdatedByInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutUserJobFunctionInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutUserNotfyInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutUserOrganizationInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutUserStepsInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutUserTeamInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
};

export type UserUncheckedCreateWithoutViewedCommentProjectInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedCreateNestedManyWithoutUserInput>;
  active?: InputMaybe<Scalars['Boolean']['input']>;
  archives?: InputMaybe<ArchivesUncheckedCreateNestedManyWithoutUserInput>;
  avatarUrl?: InputMaybe<Scalars['String']['input']>;
  boardCreatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedCreateNestedManyWithoutUserInput>;
  cardComment?: InputMaybe<CardCommentUncheckedCreateNestedManyWithoutUserInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedCreateNestedManyWithoutUserInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  client?: InputMaybe<ClientUncheckedCreateNestedManyWithoutUserInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedCreateNestedManyWithoutUserInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  createdAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  email: Scalars['String']['input'];
  fieldValueCreated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutCreatedUserInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedCreateNestedManyWithoutUserInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutCreatedUserInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  groupUser?: InputMaybe<GroupUserUncheckedCreateNestedManyWithoutUserInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  invest?: InputMaybe<InvestUncheckedCreateNestedManyWithoutUserInput>;
  investStatus?: InputMaybe<InvestStatus>;
  kr?: InputMaybe<KrUncheckedCreateNestedManyWithoutUserInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedCreateNestedManyWithoutUserInput>;
  krCreatedBy?: InputMaybe<KrUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  name: Scalars['String']['input'];
  nickName: Scalars['String']['input'];
  notfyCreatedBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedCreateNestedManyWithoutUserInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedCreateNestedManyWithoutUserInput>;
  password: Scalars['String']['input'];
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutCreatedUserInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedCreateNestedManyWithoutUpdatedUserInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutCreatedByUserInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedCreateNestedManyWithoutUpdatedByUserInput>;
  role?: InputMaybe<Role>;
  selfStructure?: InputMaybe<SelfStructureUncheckedCreateNestedManyWithoutUserInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedCreateNestedManyWithoutUserInput>;
  typeUser?: InputMaybe<TypeUser>;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedCreateNestedManyWithoutUserInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedCreateNestedManyWithoutUserInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedCreateNestedManyWithoutUserInput>;
  userSteps?: InputMaybe<UserStepUncheckedCreateNestedManyWithoutUserInput>;
  userTeam?: InputMaybe<UserTeamUncheckedCreateNestedManyWithoutUserInput>;
  uuid?: InputMaybe<Scalars['String']['input']>;
};

export type UserUncheckedUpdateInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUncheckedUpdateManyWithoutUserNestedInput>;
  active?: InputMaybe<BoolFieldUpdateOperationsInput>;
  archives?: InputMaybe<ArchivesUncheckedUpdateManyWithoutUserNestedInput>;
  avatarUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  boardCreatedBy?: InputMaybe<BoardUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  boardUpdatedBy?: InputMaybe<BoardUncheckedUpdateManyWithoutUpdatedByUserNestedInput>;
  cardAssignment?: InputMaybe<CardAssignmentUncheckedUpdateManyWithoutUserNestedInput>;
  cardComment?: InputMaybe<CardCommentUncheckedUpdateManyWithoutUserNestedInput>;
  cardCreatedBy?: InputMaybe<CardUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  cardMovements?: InputMaybe<CardMovementUncheckedUpdateManyWithoutUserNestedInput>;
  cardUpdatedBy?: InputMaybe<CardUncheckedUpdateManyWithoutUpdatedByUserNestedInput>;
  client?: InputMaybe<ClientUncheckedUpdateManyWithoutUserNestedInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUncheckedUpdateManyWithoutUserNestedInput>;
  columnCreatedBy?: InputMaybe<ColumnUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  columnUpdatedBy?: InputMaybe<ColumnUncheckedUpdateManyWithoutUpdatedByUserNestedInput>;
  commentProjects?: InputMaybe<CommentProjectUncheckedUpdateManyWithoutUserNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldValueCreated?: InputMaybe<FieldUncheckedUpdateManyWithoutCreatedUserNestedInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUncheckedUpdateManyWithoutUserNestedInput>;
  fieldValueUpdated?: InputMaybe<FieldUncheckedUpdateManyWithoutUpdatedUserNestedInput>;
  groupCreatedBy?: InputMaybe<GroupUncheckedUpdateManyWithoutCreatedUserNestedInput>;
  groupUpdatedBy?: InputMaybe<GroupUncheckedUpdateManyWithoutUpdatedUserNestedInput>;
  groupUser?: InputMaybe<GroupUserUncheckedUpdateManyWithoutUserNestedInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  invest?: InputMaybe<InvestUncheckedUpdateManyWithoutUserNestedInput>;
  investStatus?: InputMaybe<EnuminvestStatusFieldUpdateOperationsInput>;
  kr?: InputMaybe<KrUncheckedUpdateManyWithoutUserNestedInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUncheckedUpdateManyWithoutUserNestedInput>;
  krCreatedBy?: InputMaybe<KrUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  nickName?: InputMaybe<StringFieldUpdateOperationsInput>;
  notfyCreatedBy?: InputMaybe<NotfyUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUncheckedUpdateManyWithoutUpdatedByUserNestedInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUncheckedUpdateManyWithoutUpdatedByUserNestedInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUncheckedUpdateManyWithoutUserNestedInput>;
  okrProject?: InputMaybe<OkrProjectUncheckedUpdateManyWithoutUserNestedInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUncheckedUpdateManyWithoutUserNestedInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUncheckedUpdateManyWithoutCreatedUserNestedInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUncheckedUpdateManyWithoutUpdatedUserNestedInput>;
  projectCreatedBy?: InputMaybe<ProjectUncheckedUpdateManyWithoutCreatedByUserNestedInput>;
  projectUpdatedBy?: InputMaybe<ProjectUncheckedUpdateManyWithoutUpdatedByUserNestedInput>;
  role?: InputMaybe<EnumroleFieldUpdateOperationsInput>;
  selfStructure?: InputMaybe<SelfStructureUncheckedUpdateManyWithoutUserNestedInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUncheckedUpdateManyWithoutUserNestedInput>;
  typeUser?: InputMaybe<EnumtypeUserFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userJobFunction?: InputMaybe<UserJobFunctionUncheckedUpdateManyWithoutUserNestedInput>;
  userNotfy?: InputMaybe<UserNotfyUncheckedUpdateManyWithoutUserNestedInput>;
  userOrganization?: InputMaybe<UserOrganizationUncheckedUpdateManyWithoutUserNestedInput>;
  userSteps?: InputMaybe<UserStepUncheckedUpdateManyWithoutUserNestedInput>;
  userTeam?: InputMaybe<UserTeamUncheckedUpdateManyWithoutUserNestedInput>;
  uuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUncheckedUpdateManyWithoutUserNestedInput>;
};

export type UserUncheckedUpdateManyInput = {
  active?: InputMaybe<BoolFieldUpdateOperationsInput>;
  avatarUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<StringFieldUpdateOperationsInput>;
  investStatus?: InputMaybe<EnuminvestStatusFieldUpdateOperationsInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  nickName?: InputMaybe<StringFieldUpdateOperationsInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  role?: InputMaybe<EnumroleFieldUpdateOperationsInput>;
  typeUser?: InputMaybe<EnumtypeUserFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  uuid?: InputMaybe<StringFieldUpdateOperationsInput>;
};

export type UserUpdateInput = {
  AcessHistoryUser?: InputMaybe<AcessHistoryUserUpdateManyWithoutUserNestedInput>;
  active?: InputMaybe<BoolFieldUpdateOperationsInput>;
  archives?: InputMaybe<ArchivesUpdateManyWithoutUserNestedInput>;
  avatarUrl?: InputMaybe<StringFieldUpdateOperationsInput>;
  boardCreatedBy?: InputMaybe<BoardUpdateManyWithoutCreatedByUserNestedInput>;
  boardUpdatedBy?: InputMaybe<BoardUpdateManyWithoutUpdatedByUserNestedInput>;
  cardAssignment?: InputMaybe<CardAssignmentUpdateManyWithoutUserNestedInput>;
  cardComment?: InputMaybe<CardCommentUpdateManyWithoutUserNestedInput>;
  cardCreatedBy?: InputMaybe<CardUpdateManyWithoutCreatedByUserNestedInput>;
  cardMovements?: InputMaybe<CardMovementUpdateManyWithoutUserNestedInput>;
  cardUpdatedBy?: InputMaybe<CardUpdateManyWithoutUpdatedByUserNestedInput>;
  client?: InputMaybe<ClientUpdateManyWithoutUserNestedInput>;
  coardMenbership?: InputMaybe<BoardMenbershipUpdateManyWithoutUserNestedInput>;
  columnCreatedBy?: InputMaybe<ColumnUpdateManyWithoutCreatedByUserNestedInput>;
  columnUpdatedBy?: InputMaybe<ColumnUpdateManyWithoutUpdatedByUserNestedInput>;
  commentProjects?: InputMaybe<CommentProjectUpdateManyWithoutUserNestedInput>;
  createdAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  email?: InputMaybe<StringFieldUpdateOperationsInput>;
  fieldValueCreated?: InputMaybe<FieldUpdateManyWithoutCreatedUserNestedInput>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueUpdateManyWithoutUserNestedInput>;
  fieldValueUpdated?: InputMaybe<FieldUpdateManyWithoutUpdatedUserNestedInput>;
  groupCreatedBy?: InputMaybe<GroupUpdateManyWithoutCreatedUserNestedInput>;
  groupUpdatedBy?: InputMaybe<GroupUpdateManyWithoutUpdatedUserNestedInput>;
  groupUser?: InputMaybe<GroupUserUpdateManyWithoutUserNestedInput>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagUpdateManyWithoutCreatedByUserNestedInput>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueUpdateManyWithoutCreatedByUserNestedInput>;
  historyStepCreatedBy?: InputMaybe<HistoryStepUpdateManyWithoutCreatedByUserNestedInput>;
  invest?: InputMaybe<InvestUpdateManyWithoutUserNestedInput>;
  investStatus?: InputMaybe<EnuminvestStatusFieldUpdateOperationsInput>;
  kr?: InputMaybe<KrUpdateManyWithoutUserNestedInput>;
  krCommentProject?: InputMaybe<KrCommentProjectUpdateManyWithoutUserNestedInput>;
  krCreatedBy?: InputMaybe<KrUpdateManyWithoutCreatedByUserNestedInput>;
  name?: InputMaybe<StringFieldUpdateOperationsInput>;
  nickName?: InputMaybe<StringFieldUpdateOperationsInput>;
  notfyCreatedBy?: InputMaybe<NotfyUpdateManyWithoutCreatedByUserNestedInput>;
  notfyUpdateddBy?: InputMaybe<NotfyUpdateManyWithoutUpdatedByUserNestedInput>;
  objectiveCreatedBy?: InputMaybe<ObjectiveUpdateManyWithoutCreatedByUserNestedInput>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveUpdateManyWithoutUpdatedByUserNestedInput>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectUpdateManyWithoutUserNestedInput>;
  okrProject?: InputMaybe<OkrProjectUpdateManyWithoutUserNestedInput>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryUpdateManyWithoutUserNestedInput>;
  password?: InputMaybe<StringFieldUpdateOperationsInput>;
  personalInfo?: InputMaybe<Scalars['JSON']['input']>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtUpdateManyWithoutCreatedUserNestedInput>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtUpdateManyWithoutUpdatedUserNestedInput>;
  projectCreatedBy?: InputMaybe<ProjectUpdateManyWithoutCreatedByUserNestedInput>;
  projectUpdatedBy?: InputMaybe<ProjectUpdateManyWithoutUpdatedByUserNestedInput>;
  role?: InputMaybe<EnumroleFieldUpdateOperationsInput>;
  selfStructure?: InputMaybe<SelfStructureUpdateManyWithoutUserNestedInput>;
  tokenFirebase?: InputMaybe<TokenFirebaseUpdateManyWithoutUserNestedInput>;
  typeUser?: InputMaybe<EnumtypeUserFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userJobFunction?: InputMaybe<UserJobFunctionUpdateManyWithoutUserNestedInput>;
  userNotfy?: InputMaybe<UserNotfyUpdateManyWithoutUserNestedInput>;
  userOrganization?: InputMaybe<UserOrganizationUpdateManyWithoutUserNestedInput>;
  userSteps?: InputMaybe<UserStepUpdateManyWithoutUserNestedInput>;
  userTeam?: InputMaybe<UserTeamUpdateManyWithoutUserNestedInput>;
  uuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectUpdateManyWithoutUserNestedInput>;
};

export type UserWhereInput = {
  AND?: InputMaybe<Array<UserWhereInput>>;
  AcessHistoryUser?: InputMaybe<AcessHistoryUserListRelationFilter>;
  NOT?: InputMaybe<Array<UserWhereInput>>;
  OR?: InputMaybe<Array<UserWhereInput>>;
  active?: InputMaybe<BoolFilter>;
  archives?: InputMaybe<ArchivesListRelationFilter>;
  avatarUrl?: InputMaybe<StringFilter>;
  boardCreatedBy?: InputMaybe<BoardListRelationFilter>;
  boardUpdatedBy?: InputMaybe<BoardListRelationFilter>;
  cardAssignment?: InputMaybe<CardAssignmentListRelationFilter>;
  cardComment?: InputMaybe<CardCommentListRelationFilter>;
  cardCreatedBy?: InputMaybe<CardListRelationFilter>;
  cardMovements?: InputMaybe<CardMovementListRelationFilter>;
  cardUpdatedBy?: InputMaybe<CardListRelationFilter>;
  client?: InputMaybe<ClientListRelationFilter>;
  coardMenbership?: InputMaybe<BoardMenbershipListRelationFilter>;
  columnCreatedBy?: InputMaybe<ColumnListRelationFilter>;
  columnUpdatedBy?: InputMaybe<ColumnListRelationFilter>;
  commentProjects?: InputMaybe<CommentProjectListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  email?: InputMaybe<StringFilter>;
  fieldValueCreated?: InputMaybe<FieldListRelationFilter>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueListRelationFilter>;
  fieldValueUpdated?: InputMaybe<FieldListRelationFilter>;
  groupCreatedBy?: InputMaybe<GroupListRelationFilter>;
  groupUpdatedBy?: InputMaybe<GroupListRelationFilter>;
  groupUser?: InputMaybe<GroupUserListRelationFilter>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagListRelationFilter>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueListRelationFilter>;
  historyStepCreatedBy?: InputMaybe<HistoryStepListRelationFilter>;
  invest?: InputMaybe<InvestListRelationFilter>;
  investStatus?: InputMaybe<EnuminvestStatusFilter>;
  kr?: InputMaybe<KrListRelationFilter>;
  krCommentProject?: InputMaybe<KrCommentProjectListRelationFilter>;
  krCreatedBy?: InputMaybe<KrListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  nickName?: InputMaybe<StringFilter>;
  notfyCreatedBy?: InputMaybe<NotfyListRelationFilter>;
  notfyUpdateddBy?: InputMaybe<NotfyListRelationFilter>;
  objectiveCreatedBy?: InputMaybe<ObjectiveListRelationFilter>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveListRelationFilter>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectListRelationFilter>;
  okrProject?: InputMaybe<OkrProjectListRelationFilter>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryListRelationFilter>;
  password?: InputMaybe<StringFilter>;
  personalInfo?: InputMaybe<JsonNullableFilter>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtListRelationFilter>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtListRelationFilter>;
  projectCreatedBy?: InputMaybe<ProjectListRelationFilter>;
  projectUpdatedBy?: InputMaybe<ProjectListRelationFilter>;
  role?: InputMaybe<EnumroleFilter>;
  selfStructure?: InputMaybe<SelfStructureListRelationFilter>;
  tokenFirebase?: InputMaybe<TokenFirebaseListRelationFilter>;
  typeUser?: InputMaybe<EnumtypeUserFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userJobFunction?: InputMaybe<UserJobFunctionListRelationFilter>;
  userNotfy?: InputMaybe<UserNotfyListRelationFilter>;
  userOrganization?: InputMaybe<UserOrganizationListRelationFilter>;
  userSteps?: InputMaybe<UserStepListRelationFilter>;
  userTeam?: InputMaybe<UserTeamListRelationFilter>;
  uuid?: InputMaybe<UuidFilter>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectListRelationFilter>;
};

export type UserWhereUniqueInput = {
  AND?: InputMaybe<Array<UserWhereInput>>;
  AcessHistoryUser?: InputMaybe<AcessHistoryUserListRelationFilter>;
  NOT?: InputMaybe<Array<UserWhereInput>>;
  OR?: InputMaybe<Array<UserWhereInput>>;
  active?: InputMaybe<BoolFilter>;
  archives?: InputMaybe<ArchivesListRelationFilter>;
  avatarUrl?: InputMaybe<StringFilter>;
  boardCreatedBy?: InputMaybe<BoardListRelationFilter>;
  boardUpdatedBy?: InputMaybe<BoardListRelationFilter>;
  cardAssignment?: InputMaybe<CardAssignmentListRelationFilter>;
  cardComment?: InputMaybe<CardCommentListRelationFilter>;
  cardCreatedBy?: InputMaybe<CardListRelationFilter>;
  cardMovements?: InputMaybe<CardMovementListRelationFilter>;
  cardUpdatedBy?: InputMaybe<CardListRelationFilter>;
  client?: InputMaybe<ClientListRelationFilter>;
  coardMenbership?: InputMaybe<BoardMenbershipListRelationFilter>;
  columnCreatedBy?: InputMaybe<ColumnListRelationFilter>;
  columnUpdatedBy?: InputMaybe<ColumnListRelationFilter>;
  commentProjects?: InputMaybe<CommentProjectListRelationFilter>;
  createdAt?: InputMaybe<DateTimeFilter>;
  email?: InputMaybe<Scalars['String']['input']>;
  fieldValueCreated?: InputMaybe<FieldListRelationFilter>;
  fieldValueCreatedBy?: InputMaybe<FieldsValueListRelationFilter>;
  fieldValueUpdated?: InputMaybe<FieldListRelationFilter>;
  groupCreatedBy?: InputMaybe<GroupListRelationFilter>;
  groupUpdatedBy?: InputMaybe<GroupListRelationFilter>;
  groupUser?: InputMaybe<GroupUserListRelationFilter>;
  historyFlagCreatedBy?: InputMaybe<HistoryFlagListRelationFilter>;
  historyMonthlyRecurringRevenue?: InputMaybe<HistoryMonthlyRecurringRevenueListRelationFilter>;
  historyStepCreatedBy?: InputMaybe<HistoryStepListRelationFilter>;
  invest?: InputMaybe<InvestListRelationFilter>;
  investStatus?: InputMaybe<EnuminvestStatusFilter>;
  kr?: InputMaybe<KrListRelationFilter>;
  krCommentProject?: InputMaybe<KrCommentProjectListRelationFilter>;
  krCreatedBy?: InputMaybe<KrListRelationFilter>;
  name?: InputMaybe<StringFilter>;
  nickName?: InputMaybe<Scalars['String']['input']>;
  notfyCreatedBy?: InputMaybe<NotfyListRelationFilter>;
  notfyUpdateddBy?: InputMaybe<NotfyListRelationFilter>;
  objectiveCreatedBy?: InputMaybe<ObjectiveListRelationFilter>;
  objectiveUpdatedBy?: InputMaybe<ObjectiveListRelationFilter>;
  okrObjectiveProject?: InputMaybe<OkrObjectiveProjectListRelationFilter>;
  okrProject?: InputMaybe<OkrProjectListRelationFilter>;
  okrProjectHistory?: InputMaybe<OkrProjectHistoryListRelationFilter>;
  password?: InputMaybe<StringFilter>;
  personalInfo?: InputMaybe<JsonNullableFilter>;
  primitiveStreenghtCreatedBy?: InputMaybe<PrimitiveStreenghtListRelationFilter>;
  primitiveStreenghtUpdatedBy?: InputMaybe<PrimitiveStreenghtListRelationFilter>;
  projectCreatedBy?: InputMaybe<ProjectListRelationFilter>;
  projectUpdatedBy?: InputMaybe<ProjectListRelationFilter>;
  role?: InputMaybe<EnumroleFilter>;
  selfStructure?: InputMaybe<SelfStructureListRelationFilter>;
  tokenFirebase?: InputMaybe<TokenFirebaseListRelationFilter>;
  typeUser?: InputMaybe<EnumtypeUserFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userJobFunction?: InputMaybe<UserJobFunctionListRelationFilter>;
  userNotfy?: InputMaybe<UserNotfyListRelationFilter>;
  userOrganization?: InputMaybe<UserOrganizationListRelationFilter>;
  userSteps?: InputMaybe<UserStepListRelationFilter>;
  userTeam?: InputMaybe<UserTeamListRelationFilter>;
  uuid?: InputMaybe<Scalars['String']['input']>;
  viewedCommentProject?: InputMaybe<ViewedCommentProjectListRelationFilter>;
};

export type UuidFilter = {
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedUuidFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type UuidNullableFilter = {
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedUuidNullableFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type UuidNullableWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntNullableFilter>;
  _max?: InputMaybe<NestedStringNullableFilter>;
  _min?: InputMaybe<NestedStringNullableFilter>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedUuidNullableWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type UuidWithAggregatesFilter = {
  _count?: InputMaybe<NestedIntFilter>;
  _max?: InputMaybe<NestedStringFilter>;
  _min?: InputMaybe<NestedStringFilter>;
  equals?: InputMaybe<Scalars['String']['input']>;
  gt?: InputMaybe<Scalars['String']['input']>;
  gte?: InputMaybe<Scalars['String']['input']>;
  in?: InputMaybe<Array<Scalars['String']['input']>>;
  lt?: InputMaybe<Scalars['String']['input']>;
  lte?: InputMaybe<Scalars['String']['input']>;
  mode?: InputMaybe<QueryMode>;
  not?: InputMaybe<NestedUuidWithAggregatesFilter>;
  notIn?: InputMaybe<Array<Scalars['String']['input']>>;
};

export type ViewedCommentProject = {
  __typename?: 'ViewedCommentProject';
  project: Project;
  projectId: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  user: User;
  userUuid: Scalars['String']['output'];
  vieweds: Scalars['Int']['output'];
};

export type ViewedCommentProjectAvgAggregate = {
  __typename?: 'ViewedCommentProjectAvgAggregate';
  projectId?: Maybe<Scalars['Float']['output']>;
  vieweds?: Maybe<Scalars['Float']['output']>;
};

export type ViewedCommentProjectAvgOrderByAggregateInput = {
  projectId?: InputMaybe<SortOrder>;
  vieweds?: InputMaybe<SortOrder>;
};

export type ViewedCommentProjectCountAggregate = {
  __typename?: 'ViewedCommentProjectCountAggregate';
  _all: Scalars['Int']['output'];
  projectId: Scalars['Int']['output'];
  updatedAt: Scalars['Int']['output'];
  userUuid: Scalars['Int']['output'];
  vieweds: Scalars['Int']['output'];
};

export type ViewedCommentProjectCountOrderByAggregateInput = {
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  vieweds?: InputMaybe<SortOrder>;
};

export type ViewedCommentProjectCreateManyInput = {
  projectId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
  vieweds?: InputMaybe<Scalars['Int']['input']>;
};

export type ViewedCommentProjectCreateManyProjectInput = {
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
  vieweds?: InputMaybe<Scalars['Int']['input']>;
};

export type ViewedCommentProjectCreateManyProjectInputEnvelope = {
  data: Array<ViewedCommentProjectCreateManyProjectInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ViewedCommentProjectCreateManyUserInput = {
  projectId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  vieweds?: InputMaybe<Scalars['Int']['input']>;
};

export type ViewedCommentProjectCreateManyUserInputEnvelope = {
  data: Array<ViewedCommentProjectCreateManyUserInput>;
  skipDuplicates?: InputMaybe<Scalars['Boolean']['input']>;
};

export type ViewedCommentProjectCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ViewedCommentProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ViewedCommentProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ViewedCommentProjectCreateManyProjectInputEnvelope>;
};

export type ViewedCommentProjectCreateOrConnectWithoutProjectInput = {
  create: ViewedCommentProjectUncheckedCreateWithoutProjectInput;
  where: ViewedCommentProjectWhereUniqueInput;
};

export type ViewedCommentProjectCreateOrConnectWithoutUserInput = {
  create: ViewedCommentProjectUncheckedCreateWithoutUserInput;
  where: ViewedCommentProjectWhereUniqueInput;
};

export type ViewedCommentProjectCreateWithoutProjectInput = {
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  user: UserCreateNestedOneWithoutViewedCommentProjectInput;
  vieweds?: InputMaybe<Scalars['Int']['input']>;
};

export type ViewedCommentProjectCreateWithoutUserInput = {
  project: ProjectCreateNestedOneWithoutViewedCommentProjectInput;
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  vieweds?: InputMaybe<Scalars['Int']['input']>;
};

export type ViewedCommentProjectGroupBy = {
  __typename?: 'ViewedCommentProjectGroupBy';
  _avg?: Maybe<ViewedCommentProjectAvgAggregate>;
  _count?: Maybe<ViewedCommentProjectCountAggregate>;
  _max?: Maybe<ViewedCommentProjectMaxAggregate>;
  _min?: Maybe<ViewedCommentProjectMinAggregate>;
  _sum?: Maybe<ViewedCommentProjectSumAggregate>;
  projectId: Scalars['Int']['output'];
  updatedAt: Scalars['DateTimeISO']['output'];
  userUuid: Scalars['String']['output'];
  vieweds: Scalars['Int']['output'];
};

export type ViewedCommentProjectListRelationFilter = {
  every?: InputMaybe<ViewedCommentProjectWhereInput>;
  none?: InputMaybe<ViewedCommentProjectWhereInput>;
  some?: InputMaybe<ViewedCommentProjectWhereInput>;
};

export type ViewedCommentProjectMaxAggregate = {
  __typename?: 'ViewedCommentProjectMaxAggregate';
  projectId?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
  vieweds?: Maybe<Scalars['Int']['output']>;
};

export type ViewedCommentProjectMaxOrderByAggregateInput = {
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  vieweds?: InputMaybe<SortOrder>;
};

export type ViewedCommentProjectMinAggregate = {
  __typename?: 'ViewedCommentProjectMinAggregate';
  projectId?: Maybe<Scalars['Int']['output']>;
  updatedAt?: Maybe<Scalars['DateTimeISO']['output']>;
  userUuid?: Maybe<Scalars['String']['output']>;
  vieweds?: Maybe<Scalars['Int']['output']>;
};

export type ViewedCommentProjectMinOrderByAggregateInput = {
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  vieweds?: InputMaybe<SortOrder>;
};

export type ViewedCommentProjectOrderByRelationAggregateInput = {
  _count?: InputMaybe<SortOrder>;
};

export type ViewedCommentProjectOrderByWithAggregationInput = {
  _avg?: InputMaybe<ViewedCommentProjectAvgOrderByAggregateInput>;
  _count?: InputMaybe<ViewedCommentProjectCountOrderByAggregateInput>;
  _max?: InputMaybe<ViewedCommentProjectMaxOrderByAggregateInput>;
  _min?: InputMaybe<ViewedCommentProjectMinOrderByAggregateInput>;
  _sum?: InputMaybe<ViewedCommentProjectSumOrderByAggregateInput>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  userUuid?: InputMaybe<SortOrder>;
  vieweds?: InputMaybe<SortOrder>;
};

export type ViewedCommentProjectOrderByWithRelationInput = {
  project?: InputMaybe<ProjectOrderByWithRelationInput>;
  projectId?: InputMaybe<SortOrder>;
  updatedAt?: InputMaybe<SortOrder>;
  user?: InputMaybe<UserOrderByWithRelationInput>;
  userUuid?: InputMaybe<SortOrder>;
  vieweds?: InputMaybe<SortOrder>;
};

export enum ViewedCommentProjectScalarFieldEnum {
  ProjectId = 'projectId',
  UpdatedAt = 'updatedAt',
  UserUuid = 'userUuid',
  Vieweds = 'vieweds'
}

export type ViewedCommentProjectScalarWhereInput = {
  AND?: InputMaybe<Array<ViewedCommentProjectScalarWhereInput>>;
  NOT?: InputMaybe<Array<ViewedCommentProjectScalarWhereInput>>;
  OR?: InputMaybe<Array<ViewedCommentProjectScalarWhereInput>>;
  projectId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  vieweds?: InputMaybe<IntFilter>;
};

export type ViewedCommentProjectScalarWhereWithAggregatesInput = {
  AND?: InputMaybe<Array<ViewedCommentProjectScalarWhereWithAggregatesInput>>;
  NOT?: InputMaybe<Array<ViewedCommentProjectScalarWhereWithAggregatesInput>>;
  OR?: InputMaybe<Array<ViewedCommentProjectScalarWhereWithAggregatesInput>>;
  projectId?: InputMaybe<IntWithAggregatesFilter>;
  updatedAt?: InputMaybe<DateTimeWithAggregatesFilter>;
  userUuid?: InputMaybe<UuidWithAggregatesFilter>;
  vieweds?: InputMaybe<IntWithAggregatesFilter>;
};

export type ViewedCommentProjectSumAggregate = {
  __typename?: 'ViewedCommentProjectSumAggregate';
  projectId?: Maybe<Scalars['Int']['output']>;
  vieweds?: Maybe<Scalars['Int']['output']>;
};

export type ViewedCommentProjectSumOrderByAggregateInput = {
  projectId?: InputMaybe<SortOrder>;
  vieweds?: InputMaybe<SortOrder>;
};

export type ViewedCommentProjectUncheckedCreateInput = {
  projectId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
  vieweds?: InputMaybe<Scalars['Int']['input']>;
};

export type ViewedCommentProjectUncheckedCreateNestedManyWithoutProjectInput = {
  connect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ViewedCommentProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ViewedCommentProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ViewedCommentProjectCreateManyProjectInputEnvelope>;
};

export type ViewedCommentProjectUncheckedCreateNestedManyWithoutUserInput = {
  connect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ViewedCommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ViewedCommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<ViewedCommentProjectCreateManyUserInputEnvelope>;
};

export type ViewedCommentProjectUncheckedCreateWithoutProjectInput = {
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  userUuid: Scalars['String']['input'];
  vieweds?: InputMaybe<Scalars['Int']['input']>;
};

export type ViewedCommentProjectUncheckedCreateWithoutUserInput = {
  projectId: Scalars['Int']['input'];
  updatedAt?: InputMaybe<Scalars['DateTimeISO']['input']>;
  vieweds?: InputMaybe<Scalars['Int']['input']>;
};

export type ViewedCommentProjectUncheckedUpdateInput = {
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  vieweds?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ViewedCommentProjectUncheckedUpdateManyInput = {
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  vieweds?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ViewedCommentProjectUncheckedUpdateManyWithoutProjectInput = {
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  vieweds?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ViewedCommentProjectUncheckedUpdateManyWithoutProjectNestedInput = {
  connect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ViewedCommentProjectCreateOrConnectWithoutProjectInput>>;
  create?: InputMaybe<Array<ViewedCommentProjectCreateWithoutProjectInput>>;
  createMany?: InputMaybe<ViewedCommentProjectCreateManyProjectInputEnvelope>;
  delete?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ViewedCommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ViewedCommentProjectUpdateWithWhereUniqueWithoutProjectInput>>;
  updateMany?: InputMaybe<Array<ViewedCommentProjectUpdateManyWithWhereWithoutProjectInput>>;
  upsert?: InputMaybe<Array<ViewedCommentProjectUpsertWithWhereUniqueWithoutProjectInput>>;
};

export type ViewedCommentProjectUncheckedUpdateManyWithoutUserInput = {
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  vieweds?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ViewedCommentProjectUncheckedUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ViewedCommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ViewedCommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<ViewedCommentProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ViewedCommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ViewedCommentProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<ViewedCommentProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<ViewedCommentProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type ViewedCommentProjectUncheckedUpdateWithoutProjectInput = {
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  userUuid?: InputMaybe<StringFieldUpdateOperationsInput>;
  vieweds?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ViewedCommentProjectUncheckedUpdateWithoutUserInput = {
  projectId?: InputMaybe<IntFieldUpdateOperationsInput>;
  updatedAt?: InputMaybe<DateTimeFieldUpdateOperationsInput>;
  vieweds?: InputMaybe<IntFieldUpdateOperationsInput>;
};

export type ViewedCommentProjectUpdateManyWithWhereWithoutProjectInput = {
  data: ViewedCommentProjectUncheckedUpdateManyWithoutProjectInput;
  where: ViewedCommentProjectScalarWhereInput;
};

export type ViewedCommentProjectUpdateManyWithWhereWithoutUserInput = {
  data: ViewedCommentProjectUncheckedUpdateManyWithoutUserInput;
  where: ViewedCommentProjectScalarWhereInput;
};

export type ViewedCommentProjectUpdateManyWithoutUserNestedInput = {
  connect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  connectOrCreate?: InputMaybe<Array<ViewedCommentProjectCreateOrConnectWithoutUserInput>>;
  create?: InputMaybe<Array<ViewedCommentProjectCreateWithoutUserInput>>;
  createMany?: InputMaybe<ViewedCommentProjectCreateManyUserInputEnvelope>;
  delete?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  deleteMany?: InputMaybe<Array<ViewedCommentProjectScalarWhereInput>>;
  disconnect?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  set?: InputMaybe<Array<ViewedCommentProjectWhereUniqueInput>>;
  update?: InputMaybe<Array<ViewedCommentProjectUpdateWithWhereUniqueWithoutUserInput>>;
  updateMany?: InputMaybe<Array<ViewedCommentProjectUpdateManyWithWhereWithoutUserInput>>;
  upsert?: InputMaybe<Array<ViewedCommentProjectUpsertWithWhereUniqueWithoutUserInput>>;
};

export type ViewedCommentProjectUpdateWithWhereUniqueWithoutProjectInput = {
  data: ViewedCommentProjectUncheckedUpdateWithoutProjectInput;
  where: ViewedCommentProjectWhereUniqueInput;
};

export type ViewedCommentProjectUpdateWithWhereUniqueWithoutUserInput = {
  data: ViewedCommentProjectUncheckedUpdateWithoutUserInput;
  where: ViewedCommentProjectWhereUniqueInput;
};

export type ViewedCommentProjectUpsertWithWhereUniqueWithoutProjectInput = {
  create: ViewedCommentProjectUncheckedCreateWithoutProjectInput;
  update: ViewedCommentProjectUncheckedUpdateWithoutProjectInput;
  where: ViewedCommentProjectWhereUniqueInput;
};

export type ViewedCommentProjectUpsertWithWhereUniqueWithoutUserInput = {
  create: ViewedCommentProjectUncheckedCreateWithoutUserInput;
  update: ViewedCommentProjectUncheckedUpdateWithoutUserInput;
  where: ViewedCommentProjectWhereUniqueInput;
};

export type ViewedCommentProjectUserUuidProjectIdCompoundUniqueInput = {
  projectId: Scalars['Int']['input'];
  userUuid: Scalars['String']['input'];
};

export type ViewedCommentProjectWhereInput = {
  AND?: InputMaybe<Array<ViewedCommentProjectWhereInput>>;
  NOT?: InputMaybe<Array<ViewedCommentProjectWhereInput>>;
  OR?: InputMaybe<Array<ViewedCommentProjectWhereInput>>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  vieweds?: InputMaybe<IntFilter>;
};

export type ViewedCommentProjectWhereUniqueInput = {
  AND?: InputMaybe<Array<ViewedCommentProjectWhereInput>>;
  NOT?: InputMaybe<Array<ViewedCommentProjectWhereInput>>;
  OR?: InputMaybe<Array<ViewedCommentProjectWhereInput>>;
  project?: InputMaybe<ProjectRelationFilter>;
  projectId?: InputMaybe<IntFilter>;
  updatedAt?: InputMaybe<DateTimeFilter>;
  user?: InputMaybe<UserRelationFilter>;
  userUuid?: InputMaybe<UuidFilter>;
  userUuid_projectId?: InputMaybe<ViewedCommentProjectUserUuidProjectIdCompoundUniqueInput>;
  vieweds?: InputMaybe<IntFilter>;
};

export type CardProps = {
  action: Scalars['String']['input'];
  from?: InputMaybe<Scalars['String']['input']>;
  id: Scalars['ID']['input'];
  to?: InputMaybe<Scalars['String']['input']>;
};

export type FindUniqueCardInHistoryComponentOutput = {
  __typename?: 'findUniqueCardInHistoryComponentOutput';
  hasHistoryModified: Scalars['Boolean']['output'];
  id: Scalars['String']['output'];
  moviment: Array<CardMovement>;
};

export enum InvestStatus {
  Actived = 'actived',
  Deactived = 'deactived',
  TurnOver = 'turn_over',
  WaitingApproval = 'waiting_approval'
}

export enum Role {
  Account = 'account',
  Admin = 'admin',
  Client = 'client',
  Cs = 'cs',
  Financ = 'financ',
  Head = 'head',
  Invest = 'invest',
  Pep = 'pep',
  Root = 'root',
  User = 'user'
}

export enum TypeFile {
  Boleto = 'BOLETO',
  Contract = 'CONTRACT',
  Contrato = 'CONTRATO',
  Document = 'DOCUMENT',
  Image = 'IMAGE',
  Nf = 'NF',
  Payment = 'PAYMENT'
}

export enum TypeFlagsCommentProject {
  Churn = 'CHURN',
  Comment = 'COMMENT',
  Danger = 'DANGER',
  Occurrence = 'OCCURRENCE',
  Safe = 'SAFE',
  Victory = 'VICTORY'
}

export enum TypeNotfy {
  Alert = 'alert',
  PushNotification = 'pushNotification'
}

export enum TypeUser {
  Client = 'client',
  Invest = 'invest'
}
